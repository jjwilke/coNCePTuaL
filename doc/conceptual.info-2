This is conceptual.info, produced by makeinfo version 6.4 from
conceptual.texi.

This document describes coNCePTuaL version 1.5.1.


   Copyright (C) 2015, Los Alamos National Security, LLC
INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* coNCePTuaL: (conceptual).   A domain-specific language for network benchmarks
END-INFO-DIR-ENTRY

   This document describes coNCePTuaL version 1.5.1.


   Copyright (C) 2015, Los Alamos National Security, LLC


File: conceptual.info,  Node: Tag matching,  Next: Buffer control,  Prev: Data touching,  Up: Message specifications

Tag matching
............

Messages sent from task A to task B are normally received in order.
However, the 'USING TAG' clause enables a program to enforce a
particular order on message reception.  'USING TAG' takes a tag as an
argument.  This tag can be either an <EXPR> or a <STRING>.  In the
latter case, coNCePTuaL will automatically hash the string to an <EXPR>.
A message sent with a given tag TAG is received only by a 'RECEIVE'
statement that also specifies tag TAG.  If the 'USING TAG' clause is
omitted, TAG defaults to '0'.

   As an example of the difference 'USING TAG' can make, consider the
following code that does not use tags:

     TASK 0 SENDS A MESSAGE TO UNSUSPECTING TASK 1 THEN
     TASK 0 SLEEPS FOR 2 SECONDS THEN
     TASK 0 SENDS A MESSAGE TO UNSUSPECTING TASK 1 THEN
     TASK 1 RECEIVES A MESSAGE FROM TASK 0 THEN
     TASK 1 SLEEPS FOR 2 SECONDS THEN
     TASK 1 RECEIVES A MESSAGE FROM TASK 0

In that example, the first send matches the first receive, then both
tasks simultaneously sleep for two seconds, and finally the second send
matches the second receive.  The total execution time should therefore
be just over two seconds.  Now consider the following variation that
uniquely tags each of the messages:

     TASK 0 SENDS A MESSAGE USING TAG 123 TO UNSUSPECTING TASK 1 THEN
     TASK 0 SLEEPS FOR 2 SECONDS THEN
     TASK 0 SENDS A MESSAGE USING TAG "stuff" TO UNSUSPECTING TASK 1 THEN
     TASK 1 RECEIVES A MESSAGE USING TAG "stuff" FROM TASK 0 THEN
     TASK 1 SLEEPS FOR 2 SECONDS THEN
     TASK 1 RECEIVES A MESSAGE USING TAG 123 FROM TASK 0

The first message is sent with tag '123' while the second message is
sent with tag '"stuff"'.  Task 1 receives the messages in the reverse
order: first the '"stuff"' message and then the '123' message.
Consequently, task 1's first 'RECEIVE' cannot complete until task 0 has
sent its first message, slept for two seconds, and sent its second
message.  Task 1 can then receive a message, sleep for two seconds, and
receive its other message.  The total execution time should therefore be
just over four seconds, as the new message ordering forces a
serialization on the two 'SLEEPS'.

   The following are a few things to keep in mind when using message
tags:

  1. Using strings for tag values can benefit program readability and is
     recommended for programs that utilize a small, fixed set of tags,
     while using numerical expressions for tag values supports the
     implementation of a variety of sophisticated communication
     patterns.

  2. <STRING> tags are hashed, not coerced, to numerical values.  Hence,
     a message sent 'USING TAG 42' will not be matched by a message
     received 'USING TAG "42"'.

  3. Different backends place different restrictions on the range of
     accceptable tag values.  For example, the 'c_mpi' backend is
     limited by MPI's tag values, which range from 0 to at least
     32,767--but usually more.  (The range [0, 2^{31}-1] is probably
     typical.)  coNCePTuaL will automatically map any <EXPR> or <STRING>
     used as a tag value into whatever range the backend supports.  One
     implication is that different tags in a coNCePTuaL program can map
     to the same tag at run time.  For example, if a backend limits tag
     values to the range [0, 32,767], then 'USING TAG 131068' is
     equivalent to 'USING TAG 0'--or even not using any tag at all.
     Also, in that case, two arbitrary strings have a 0.003% chance of
     mapping to the same tag (or 0.00000005% in the more typical case
     for 'c_mpi'), which is unlikely but not impossible.


File: conceptual.info,  Node: Buffer control,  Next: Blocking semantics,  Prev: Tag matching,  Up: Message specifications

Buffer control
..............

The coNCePTuaL run-time library allocates a unique message buffer for
each message sent/received with the 'UNIQUE' keyword (*note Unique
messages::).  The message buffers for 'NONUNIQUE' messages are recycled
subject to the constraint that no two concurrent transmissions will
reference the same buffer.  For example, if a task performs a
synchronous send followed by a synchronous receive, those operations
must be executed serially and will therefore share a message buffer.
If, instead, a task performs an asynchronous send followed by an
asynchronous receive, those operations may overlap, so coNCePTuaL will
use different message buffers for the two operations.

   Message specifications enable the programmer to override the default
buffer-allocation behavior.  If a message is sent 'FROM BUFFER' <EXPR>
or received 'INTO BUFFER' <EXPR>, the message is guaranteed to be
sent/received using the specified buffer number.  For example, 'FROM
BUFFER' and 'INTO BUFFER' can be used to force a synchronous send and
synchronous receive to use different buffers or an asynchronous send and
asynchronous receive to use the same buffer.  If <EXPR> is negative, the
behavior is the same as if 'FROM BUFFER'/'INTO BUFFER' was not
specified.  'FROM THE DEFAULT BUFFER' and 'INTO THE DEFAULT BUFFER' also
explicitly specify the default buffer-allocation behavior.

   It is also possible to specify byte offsets into a buffer.  For
example, a message sent 'FROM 4 WORDS INTO BUFFER 3' will be sent from
4 words (12 bytes) past buffer 3's normal starting memory address.


File: conceptual.info,  Node: Blocking semantics,  Prev: Buffer control,  Up: Message specifications

Blocking semantics
..................

By default--or if 'SYNCHRONOUSLY' is specified--messages are sent
synchronously.  That is, a sender blocks (i.e., waits) until the message
buffer is safe to reuse before it continues and a receiver blocks until
it actually receives the message.  The 'ASYNCHRONOUSLY' keyword
specifies that messages should be sent and received asynchronously.
That is, the program merely posts the message (i.e., declares that it
should eventually be sent and/or received) and immediately continues
executing.  Asynchronous messages must be "completed" as described in
*note Awaiting completion::.


File: conceptual.info,  Node: Sending,  Next: Receiving,  Prev: Message specifications,  Up: Communication statements

4.4.2 Sending
-------------

The 'SEND' statement is fundamental to coNCePTuaL.  It is used to send a
multiple messages from multiple source tasks to multiple target tasks.
The syntax is formally specified as follows:

<SEND_STMT>   ::=   <SOURCE_TASK>
                    ['ASYNCHRONOUSLY'] 'SENDS'
                    <MESSAGE_SPEC>
                    'TO' ['UNSUSPECTING'] <TARGET_TASKS>
              |     <SOURCE_TASK>
                    ['ASYNCHRONOUSLY'] 'SENDS'
                    <MESSAGE_SPEC>
                    'TO' <TARGET_TASKS>
                    'WHO RECEIVE IT'
                    <RECV_MESSAGE_SPEC>

<SOURCE_TASK> is described in *note Source tasks::; <MESSAGE_SPEC> and
<RECV_MESSAGE_SPEC> are described in *note Message specifications::;
and, <TARGET_TASKS> is described in *note Target tasks::.

   The 'SEND' statement's simplest form, "<SOURCE_TASK> 'SENDS'
<MESSAGE_SPEC> 'TO' <TARGET_TASKS>", is fairly straightforward.  The
following is a example:

     TASK 0 SENDS A 0 BYTE MESSAGE TO TASK 1

The only subtlety in the preceding statement is that it implicitly
causes task 1 to perform a corresponding receive.  This receive can be
suppressed by adding the keyword 'UNSUSPECTING' before the
<TARGET_TASKS> description:

     TASK 0 SENDS A 0 BYTE MESSAGE TO UNSUSPECTING TASK 1

   Here are some further examples of valid <SEND_STMT>s:

   * 'ALL TASKS SEND A 64 KILOBYTE MESSAGE TO TASK 0'

   * 'TASK num_tasks-1 SENDS 5 53 BYTE PAGE ALIGNED MESSAGES TO ALL
     OTHER TASKS'

   * 'TASKS upper SUCH THAT upper>=num_tasks/2 ASYNCHRONOUSLY SEND A 0
     BYTE MESSAGE TO TASK upper/2'

   * 'TASKS nonzero SUCH THAT nonzero>0 SEND nonzero 1E3 BYTE MESSAGES
     TO UNSUSPECTING TASK 0'

   There are a number of attributes associated with every message
transmission:

   * synchronous vs. asynchronous operation

   * unique vs. recycled message buffers

   * unaligned vs. aligned vs. misaligned message buffers

   * no data touching vs. data touching vs. data verification

   * first-in, first-out vs. selective message ordering based on message
     tags

   * implicit vs. explicit message-buffer selection

   * explicit byte offsets into message buffers

A few of those appear in the preceding examples.

   When 'UNSUSPECTING' is omitted, the implicit 'RECEIVE' statement
normally inherits all of the attributes of the corresponding 'SEND'.
However, the second form of a <SEND_STMT>, which contains a 'WHO
RECEIVES IT' (or 'WHO RECEIVES THEM') clause, enables the receiver's
attributes to be overridden on a per-attribute basis.  For instance,
consider the following 'SEND' statement:

     TASK 0 SENDS A 1 MEGABYTE MESSAGE TO TASK 1 WHO RECEIVES IT
     ASYNCHRONOUSLY

The alternative sequence of statements that does not use 'WHO RECEIVES
IT' is less straightforward to read because it splits a single message
transmission into two statements:

  1. 'TASK 1 ASYNCHRONOUSLY RECEIVES A 1 MEGABYTE MESSAGE FROM TASK 0'

  2. 'TASK 0 SENDS A 1 MEGABYTE MESSAGE TO UNSUSPECTING TASK 1'

   Some further examples of 'WHO RECEIVES IT' follow:

     TASKS left SUCH THAT left IS EVEN SEND 5 2 KILOBYTE 64 BYTE ALIGNED
     MESSAGES TO TASKS left+1 WHO RECEIVE THEM AS UNALIGNED MESSAGES WITH
     DATA TOUCHING

     TASK num_tasks-1 ASYNCHRONOUSLY SENDS A 1E5 BYTE MESSAGE WITH
     VERIFICATION TO TASK 0 WHO RECEIVES IT SYNCHRONOUSLY

     TASK leaf SUCH THAT KNOMIAL_CHILDREN(leaf,2)=0 SENDS A UNIQUE 1536
     BYTE MESSAGE WITH DATA TOUCHING TO TASK KNOMIAL_PARENT(leaf,2) WHO
     RECEIVES IT ASYNCHRONOUSLY AS A NONUNIQUE QUADWORD ALIGNED MESSAGE
     WITHOUT DATA TOUCHING INTO BUFFER KNOMIAL_PARENT(leaf,2)

   One subtlety of the 'SEND' statement when used without 'UNSUSPECTING'
involves the orderings of the sends and receives.  The rule is that
receives are posted before sends.  Furthermore, <RESTRICTED_IDENT>s
(*note Restricted identifiers::) are evaluated in order from 0
to NUM_TASKS-1.  The implication is that a statement such as 'TASKS ev
SUCH THAT ev IS EVEN /\ ev<6 SEND A 4 WORD MESSAGE TO TASK ev+2' is
exactly equivalent to the following ordered sequence of statements
(assuming NUM_TASKS >= 5):

  1. 'TASK 2 RECEIVES A 4 WORD MESSAGE FROM TASK 0'
  2. 'TASK 4 RECEIVES A 4 WORD MESSAGE FROM TASK 2'
  3. 'TASK 6 RECEIVES A 4 WORD MESSAGE FROM TASK 4'
  4. 'TASK 0 SENDS A 4 WORD MESSAGE TO UNSUSPECTING TASK 2'
  5. 'TASK 2 SENDS A 4 WORD MESSAGE TO UNSUSPECTING TASK 4'
  6. 'TASK 4 SENDS A 4 WORD MESSAGE TO UNSUSPECTING TASK 6'

(The 'RECEIVE' statement is described in *note Receiving::.)

   If the above sequence were executed, tasks 2, 4, and 6 would
immediately block on their receives (steps 1-3).  Task 0 would awaken
task 2 by sending it a message (step 4).  Then, task 2 would be able to
continue to step 5 at which point it would send a message to task 4.
Task 4 would then finally be able to send a message to task 6 (step 6).
Hence, even though the original coNCePTuaL statement encapsulates
multiple communication operations, the component communications proceed
sequentially because of data dependences and because the operations are
blocking.

   As another example of send/receive ordering, consider the statement,
'TASKS x SUCH THAT x IS IN {1,4,5} SEND A 768 BYTE MESSAGE FROM 4
DOUBLEWORDS INTO THE DEFAULT BUFFER TO TASKS y SUCH THAT y IS IN
{6,2,3}'.  This statement causes nine messages to be sent and received
and in the following order: 1 => 2, 1 => 3, 1 => 6, 4 => 2, 4 => 3,
4 => 6, 5 => 2, 5 => 3, 5 => 6.  The reason that task 6 receives from
each sender _after_ tasks 2 and 3 relates to the comment above that
<RESTRICTED_IDENT>s are evaluated in order from 0 to NUM_TASKS-1.  One
can therefore think of the preceding coNCePTuaL statement as being
implemented with the following pseudocode:

     for s := 0 to num_tasks-1 do
       if s is in {1, 4, 5} then
         for r := 0 to num_tasks-1 do
           if r is in {6, 2, 3} then
             r receives from s
     for s := 0 to num_tasks-1 do
       if s is in {1, 4, 5} then
         for r := 0 to num_tasks-1 do
           if r is in {6, 2, 3} then
             s sends to r


File: conceptual.info,  Node: Receiving,  Next: Awaiting completion,  Prev: Sending,  Up: Communication statements

4.4.3 Receiving
---------------

*note Sending::, mentioned the <SEND_STMT>'s 'UNSUSPECTING' keyword,
which specifies that the targets should not implicitly perform a receive
operation.  Because every send must have a matching receive, coNCePTuaL
offers a 'RECEIVE' statement that explicitly receives a set of messages.
A <RECEIVE_STMT> is much like a <SEND_STMT> (*note Sending::) with the
<SOURCE_TASK> and <TARGET_TASKS> in the reverse order:

<RECEIVE_STMT>   ::=   <TARGET_TASKS>
                       ['ASYNCHRONOUSLY'] 'RECEIVE'
                       <MESSAGE_SPEC>
                       'FROM' <SOURCE_TASK>

<TARGET_TASKS> is described in *note Target tasks::; <MESSAGE_SPEC> is
described in *note Message specifications::; and, <SOURCE_TASK> is
described in *note Source tasks::.

   Like other statements that contain both a <SOURCE_TASK> and a
<TARGET_TASKS>, the 'RECEIVE' statement propagates all variables
declared by the <SOURCE_TASK> to the <TARGET_TASKS>, as in

     TASKS src-1 RECEIVE A 1 MEGABYTE MESSAGE FROM ALL TASKS src.

However, the 'RECEIVE' statement is unique among coNCePTuaL statements
in that it can alternatively propagate all variables declared by the
<TARGET_TASKS> to the <SOURCE_TASK>, as in

     ALL TASKS dst RECEIVE A 1 MEGABYTE MESSAGE FROM TASKS dst+1.

The 'RECEIVE' statement automatically determines the direction in which
variables should be propagated.  If the direction cannot unambiguously
be determined, the coNCePTuaL compiler aborts with an error message.
For example, the 'RECEIVE' statement in the following code is ambiguous
because the 'bbb' in the expression 'aaa < bbb' can refer to either the
one in the 'LET' statement or the one in the 'TASKS bbb SUCH THAT bbb >
3' expression:

     LET bbb BE 5 WHILE {
       TASKS aaa SUCH THAT aaa < bbb RECEIVE A MESSAGE FROM TASKS bbb SUCH
       THAT bbb > 3 THEN
       TASKS ccc SUCH THAT ccc > 3 SEND A MESSAGE TO UNSUSPECTING TASKS
       ddd SUCH THAT ddd < ccc
     }

   For each message sent via a 'SEND'...'TO UNSUSPECTING' statement
there must be a 'RECEIVE' statement that receives a message of the same
size.  The <TARGET_TASKS>'s <MESSAGE_SPEC> can, however, specify
different values for message uniqueness, message alignment, and data
touching.  In addition, the source and target do not need to agree on
the use of the 'ASYNCHRONOUSLY' keyword.  The only restriction is that
'WITH VERIFICATION' will return spurious results if used by the target
but not by the source.  Hence, the following <SEND_STMT> and
<RECEIVE_STMT> correctly match each other:

     TASK 0 SENDS 3 4 KILOBYTE MESSAGES TO UNSUSPECTING TASK 1

     TASK 1 ASYNCHRONOUSLY RECEIVES 3 UNIQUE 4 KILOBYTE 48 BYTE ALIGNED
     MESSAGES WITH DATA TOUCHING FROM TASK 0.

   In general, it is better to use a single 'SEND' statement with a 'WHO
RECEIVES IT' clause (*note Sending::) than a 'RECEIVE' plus a matching
'SEND'...'TO UNSUSPECTING'; the former is less error-prone than the
latter.  However, the latter is useful for programs in which a set of
receives is posted, then the tasks perform various communication,
computation, and synchronization operations, and--towards the end of the
program--the matching sends are posted.  That sort of split-phase
structure requires separate 'SEND' and 'RECEIVE' statements.


File: conceptual.info,  Node: Awaiting completion,  Next: Multicasting,  Prev: Receiving,  Up: Communication statements

4.4.4 Awaiting completion
-------------------------

When a message is sent or received asynchronously it must eventually be
"completed".  In some messaging layers, asynchronous messages are not
even sent or received until completion time.  coNCePTuaL provides the
following statement for completing messages that were send/received
asynchronously:

<WAIT_STMT>   ::=   <SOURCE_TASK>
                    'AWAITS COMPLETION'

That is, a <WAIT_STMT> simply specifies the set of tasks that should
block until all of their pending communications complete.  <SOURCE_TASK>
is as defined in *note Source tasks::.  Note that a <WAIT_STMT> blocks
until _all_ pending communications complete.  coNCePTuaL does not
provide finer-grained control over completions.  It is safe, however,
for a task to 'AWAIT COMPLETION' even if it has no asynchronous messages
pending.


File: conceptual.info,  Node: Multicasting,  Next: Reducing,  Prev: Awaiting completion,  Up: Communication statements

4.4.5 Multicasting
------------------

Although a single <SEND_STMT> (*note Sending::) can specify multiple
messages at once, these messages are sent one at a time.  "Multicasting"
is a form of collective communication in which a set of tasks
collaborates to deliver a message from a source to multiple targets.
With many messaging layers, multicasting a message to N tasks is more
efficient than sending a sequence of N individual messages.  coNCePTuaL
supports multicasting as follows:

<MCAST_STMT>    ::=   <SOURCE_TASK>
                      ['ASYNCHRONOUSLY'] 'MULTICASTS'
                      <MESSAGE_SPEC>
                      'TO' <TARGET_TASKS>

   Unlike <SEND_STMT>s, <MCAST_STMT>s do not support the 'UNSUSPECTING'
keyword.  This is because 'MULTICASTS' is a collective operation: all
parties are active participants in delivering messages to the
<TARGET_TASKS>.

   <SOURCE_TASK> (*note Source tasks::) and <TARGET_TASKS> (*note Target
tasks::) can be either disjoint or overlapping sets.  That is, either of
the following is legal:

     TASK 0 MULTICASTS A 16 BYTE MESSAGE TO TASKS recip SUCH THAT recip<4
     TASK 0 MULTICASTS A 16 BYTE MESSAGE TO TASKS recip SUCH THAT recip>=4

Note that in the first <MCAST_STMT>, task 0 both sends and receives a
message, while in the second <MCAST_STMT>, task 0 sends but does not
receive.

   The 'MULTICASTS' statement supports not only traditional one-to-many
multicasting as shown in the preceding example but also many-to-many
multicasting--and the less interesting but still valid many-to-one and
one-to-one multicasting.  The constituent pairs of communicating tasks
are identical to those induced by the 'SENDS' statement (*note
Sending::).  For example, the statement

     TASKS s SUCH THAT s<3 MULTICAST A 1 KILOBYTE MESSAGE TO TASKS s SUCH
     THAT s>6

performs the collective analogue of

     TASKS s SUCH THAT s<3 SEND A 1 KILOBYTE MESSAGE TO TASKS s SUCH
     THAT s>6

Specifically, task 0 will send a message to each of tasks 7, 8, 9, ...;
task 1 will send a message to each of tasks 7, 8, 9, ...; and task 2
will send a message to each of tasks 7, 8, 9, ...


File: conceptual.info,  Node: Reducing,  Next: Synchronizing,  Prev: Multicasting,  Up: Communication statements

4.4.6 Reducing
--------------

A reduction operation is, in a sense, a complementary operation to a
multicast (*note Multicasting::).  While a multicast delivers a message
from one source to multiple targets, a reduction combines messages from
multiple sources (by applying a commutative/associative operator to
corresponding elements) to a single target.  Reduction is a collective
operation: all parties collaborate to calculate the reduced value(s).
As an example, if tasks 0, 1, and 2 collectively reduce the messages {5,
1}, {2, 7}, and {3, 4} to task 2 using the "+" operator, then task 2
will receive the message {10, 12}.  In fact, coNCePTuaL's implementation
of reductions also supports reductions to multiple targets with each
target receiving a copy of the reduced value.

   The following grammatical rules define coNCePTuaL's many-to-many and
many-to-one reduction facilities:

<REDUCE_STMT>   ::=   <SOURCE_TASK>
                      'REDUCES'
                      <REDUCE_MESSAGE_SPEC>
                      'TO' <SOURCE_TASK>
                      ['WHO RECEIVES THE RESULT' <REDUCE_TARGET_MESSAGE_SPEC>]
                |     <SOURCE_TASK>
                      'REDUCES'
                      <REDUCE_MESSAGE_SPEC>
                      ['TO' <REDUCE_MESSAGE_SPEC>]

   <REDUCE_MESSAGE_SPEC> is defined in *note Message specifications::.
Both the data providers and data receivers are specified as
<SOURCE_TASK> nonterminals (*note Source tasks::).  This design enables
any set of tasks to provide the data to reduce and any disjoint or
overlapping set of tasks to receive the reduced data.  As with all
communication in coNCePTuaL, message contents are opaque.  Furthermore,
the grammar does not currently enable the programmer to specify the
commutative/associative operator to use.

   A simple many-to-one reduction can be expressed in coNCePTuaL with
'ALL TASKS REDUCE 5 DOUBLEWORDS TO TASK 0'.  Note that the definition of
<REDUCE_MESSAGE_SPEC> and <REDUCE_TARGET_MESSAGE_SPEC> (*note Message
specifications::) supports reductions only of 'INTEGER's and
'DOUBLEWORD's, not arbitrary <DATA_TYPE> values.  Omitting the optional
''TO' <REDUCE_MESSAGE_SPEC>', as in 'TASKS rt SUCH THAT 3 DIVIDES rt
REDUCE AN INTEGER', specifies that all tasks performing the reduction
will receive a copy of the reduced value.  The sources and targets can
also be designated explicitly as in 'TASKS xyz SUCH THAT xyz<num_tasks/2
REDUCE 100 DOUBLEWORDS TO TASKS xyz+num_tasks/4'.  When that code is run
with 8 tasks, tasks 0-3 reduce 100 doublewords (800 bytes) apiece and
tasks 2-5 each receive identical copies of the 100 doublewords of
reduced data.

   Message data used with 'REDUCES' can be transferred 'WITH DATA
TOUCHING' (but not 'WITH VERIFICATION'); data alignment can be
specified; and, messages buffers can be named explicitly.  The following
example represents fairly complex many-to-many usage of 'REDUCES':

     TASKS rsrc SUCH THAT rsrc IS EVEN REDUCE 32 64-BYTE-ALIGNED INTEGERS
     WITH DATA TOUCHING FROM BUFFER 2 TO TASKS rtarg SUCH THAT
     rtarg<num_tasks/4 \/ rtarg>(3*num_tasks)/4 WHO RECEIVE THE RESULT AS
     32 UNIQUE PAGE-ALIGNED INTEGERS WITHOUT DATA TOUCHING.


File: conceptual.info,  Node: Synchronizing,  Prev: Reducing,  Up: Communication statements

4.4.7 Synchronizing
-------------------

coNCePTuaL enables sets of tasks to perform "barrier synchronization".
The semantics are that no task can finish synchronizing until all tasks
have started synchronizing.  The syntax is as follows:

<SYNC_STMT>   ::=   <SOURCE_TASK>
                    'SYNCHRONIZES'

   A <SYNC_STMT> can be used to ensure that one set of statements has
completed before beginning another set.  For example, a coNCePTuaL
program might have a set of tasks post a series of asynchronous receives
(*note Receiving::), then make 'ALL TASKS SYNCHRONIZE' before having
another set of tasks perform the corresponding 'UNSUSPECTING' sends
(*note Sending::).  This procedure ensures that all of the target tasks
are ready to receive before the source tasks start sending to them.


File: conceptual.info,  Node: I/O statements,  Next: Counter and timer statements,  Prev: Communication statements,  Up: Grammar

4.5 I/O statements
==================

coNCePTuaL provides two statements for presenting information.  One
statement writes simple messages to the standard output device and is
intended to be used for providing status information during the run of a
program.  The other statement provides a powerful mechanism for storing
performance and correctness data to a log file.

* Menu:

* Utilizing log-file comments::  Treating log-file comments as a database
* Writing to standard output::  Displaying status messages
* Writing to a log file::       Storing test results


File: conceptual.info,  Node: Utilizing log-file comments,  Next: Writing to standard output,  Prev: I/O statements,  Up: I/O statements

4.5.1 Utilizing log-file comments
---------------------------------

<OUTPUT_STMT>s and <LOG_STMT>s have limited access to the <KEY:VALUE>
pairs that are written as comments at the top of every log file as shown
in *note Log-file format::.  Given a key, KEY, the string expression
'THE VALUE OF KEY' represents the value associated with that key or the
empty string if KEY does not appear in the log-file comments:

<STRING_OR_LOG_COMMENT>   ::=   <STRING>
                          |     'THE VALUE OF' <STRING>

That is, '"CPU frequency"' means the literal string "CPU frequency"
while 'THE VALUE OF "CPU frequency"' translates to a string like
"1300000000 Hz (1.3 GHz)".  Environment variables are also considered
keys and are therefore acceptable input to a 'THE VALUE OF' construct.


File: conceptual.info,  Node: Writing to standard output,  Next: Writing to a log file,  Prev: Utilizing log-file comments,  Up: I/O statements

4.5.2 Writing to standard output
--------------------------------

coNCePTuaL's 'OUTPUT' keyword is used to write a message from one or
more source tasks (*note Source tasks::) to the standard output device.
This is useful for providing progress reports during the execution of
long-running coNCePTuaL programs.  An <OUTPUT_STMT> looks like this:

<OUTPUT_STMT>   ::=   <SOURCE_TASK>
                      'OUTPUTS'
                      <EXPR> | <STRING_OR_LOG_COMMENT>
                      ['AND'   <EXPR> | <STRING_OR_LOG_COMMENT>]*

   The following are some sample <OUTPUT_STMT>s:

     TASK 0 OUTPUTS "Hello, world!"

     TASKS nr SUCH THAT nr>0 OUTPUT nr AND "'s parent is " AND nr>>1 AND
     " and its children are " AND nr<<1 AND " and " AND nr<<1+1

     ALL TASKS me OUTPUT "Task " AND me AND " is running on host " AND THE
     VALUE OF "Host name" AND " and plans to send to task " AND (me+1) MOD
     num_tasks

   'OUTPUT' does not implicitly output spaces between terms.  Hence,
'OUTPUT "Yes" AND "No"' will output "YesNo", not "Yes No".  Although it
is unlikely that a program would ever need to output two arithmetic
expressions with no intervening text, an empty string can be used for
this purpose: 'OUTPUT 6 AND "" AND 3'.

   An <OUTPUT_STMT> implicitly outputs a newline character at the end.
Additional newline characters can be output by embedding '\n' in a
string.  (*note Primitives::.)  coNCePTuaL does not provide a means for
suppressing the newline, however.


File: conceptual.info,  Node: Writing to a log file,  Prev: Writing to standard output,  Up: I/O statements

4.5.3 Writing to a log file
---------------------------

After performing a network correctness or performance test it is almost
always desirable to store the results in a file.  coNCePTuaL has
language support for writing tabular data to a log file.  The <LOG_STMT>
command does the bulk of the work:

<LOG_STMT>   ::=   <SOURCE_TASK>
                   'LOGS'
                   <AGGR_EXPR> 'AS' <STRING_OR_LOG_COMMENT>
                   ['AND' <AGGR_EXPR> 'AS' <STRING_OR_LOG_COMMENT>]*

   The idea behind a <LOG_STMT> is that a set of source tasks (*note
Source tasks::) log an aggregate expression (*note Aggregate
expressions::) to a log file under the column heading
<STRING_OR_LOG_COMMENT>.  Each task individually maintains a separately
named log file so there is no ambiguity over which task wrote which
entries.

   Each (static) 'LOGS' statement in a coNCePTuaL program specifies one
or more columns of the log file.  Every dynamic execution of a 'LOGS'
statement writes a single row to the log file.  A single 'LOGS'
statement should suffice for most coNCePTuaL programs.

   The following are some examples of <LOG_STMT>s:

     ALL TASKS LOG bit_errors AS "Bit errors"

     TASK 0 LOGS THE msgsize AS "Bytes" AND
                 THE MEDIAN OF (1E6*bytes_sent)/(1M*elapsed_usecs) AS "MB/s"

The first example produces a log file like the following:

     "Bit errors"
     "(all data)"
     3

The second example produces a log file like this:

     "Bytes","MB/s"
     "(only value)","(median)"
     65536,179.9416266

Note that in each log file, the coNCePTuaL run-time system writes two
rows of column headers for each column.  The first row contains
<STRING_OR_LOG_COMMENT> as is.  The second row describes the <AGGR_FUNC>
(*note Aggregate functions::) used to aggregate the data.  One or more
rows of data follow.

   Assume that the second <LOG_STMT> presented above appears within a
loop (*note Iterating::).  It is therefore important to include the
'THE' keyword before 'msgsize' to assert that the expression 'msgsize'
is constant across invocations of the <LOG_STMT> and that, consequently,
only a single row of data should be written to the log file.  Using
'msgsize' without the 'THE' would produce a column of data with one row
per <LOG_STMT> invocation:

     "Bytes","MB/s"
     "(all data)","(median)"
     65536,179.9416266
     65536,
     65536,
     65536,
     65536,
          .
          .
          .

   The rules that determine how 'LOGS' statements produce rows and
columns of a log file are presented below:

  1. Each _static_ 'LOGS' statement (and 'AND' clause within a 'LOGS'
     statement) in a program produces a unique column.

  2. Each _dynamic_ execution of a 'LOGS' statement appends a row to the
     column(s) it describes.

  3. Each top-level complex statement (*note Complete programs::)
     produces a new table in the log file.

   Note that the choice of column name is inconsequential for
determining what columns are written to the log file:

     TASK 0 LOGS 314/100 AS "Pi" AND 22/7 AS "Pi"

     "Pi","Pi"
     "(all data)","(all data)"
     3.14,3.142857143

   As mentioned in *note Aggregate expressions::, multiple <AGGR_FUNC>
values can be specified per <AGGR_EXPR>.  This is a convenient feature
when a coNCePTuaL program needs to compute multiple statistics over the
same values while reusing the same description.  For example,

     ALL TASKS LOG THE MINIMUM OF bytes_received/elapsed_usecs AS
     "Bandwidth (B/us)" AND THE MAXIMUM OF bytes_received/elapsed_usecs AS
     "Bandwidth (B/us)" AND THE MEAN OF bytes_received/elapsed_usecs AS
     "Bandwidth (B/us)" AND THE MEDIAN OF bytes_received/elapsed_usecs AS
     "Bandwidth (B/us)"

can be shortened to

     ALL TASKS LOG THE MINIMUM AND THE MAXIMUM AND THE MEAN AND THE MEDIAN
     OF bytes_received/elapsed_usecs AS "Bandwidth (B/us)"

* Menu:

* Computing aggregates::        Forcing aggregates to compute a result


File: conceptual.info,  Node: Computing aggregates,  Prev: Writing to a log file,  Up: Writing to a log file

Computing aggregates
....................

What if 'msgsize' takes on a number of values throughout the execution
of the program and for each value a number of runs is performed?  How
would one log the median of each set of data?  Using 'THE msgsize' won't
work because the message size is not constant.  Using 'msgsize' alone
won't work either because coNCePTuaL would then take the median of the
times gathered across _all_ message sizes, which is undesirable.  The
solution is for the program to specify explicitly when aggregate
functions ('MEDIAN' and all of the other functions listed in *note
Aggregate functions::) compute a value:

<FLUSH_STMT>   ::=   <SOURCE_TASK>
                     'COMPUTES AGGREGATES'

   The intention is that an inner loop might 'LOG' data after every
iteration and an outer loop would 'COMPUTE AGGREGATES' after each
iteration.


File: conceptual.info,  Node: Counter and timer statements,  Next: Complex statements,  Prev: I/O statements,  Up: Grammar

4.6 Counter and timer statements
================================

Critical to any performance or correctness test is the ability to
specify which operations represent the test itself and should be
measured and which are setup or other uninteresting operations and
should not.  coNCePTuaL automatically maintains a number of
"counters"--variables that represent message counts, byte counts,
bit-error counts, and elapsed time.  The complete list is presented in
*note Predeclared variables::.

   Normally, a coNCePTuaL program performs some setup operations,
'RESETS ITS COUNTERS' to zero, executes a communication pattern, and
logs some function of the resulting changes in counter values (*note
Writing to a log file::).  If additional setup work needs to be
performed during an experiment, a program can 'STORE ITS COUNTERS',
perform any arbitrarily costly operations, 'RESTORE ITS COUNTERS', and
continue the experiment as if those operations never happened.

   Some coNCePTuaL statements implicitly store and restore counters.
For example, the 'LOGS' statement *note Writing to a log file::) takes
up no time from the program's perspective, and counted loops (*note
Counted loops::) bracket any warmup repetitions and post-warmup
synchronizations between a counter store and restore so no delays, bit
errors, or messaging operations contribute to the totals measured by the
experiment.

* Menu:

* Resetting counters::          Clearing message, byte, and time tallies
* Storing counter values::      Storing message, byte, and time tallies
* Restoring counter values::    Restoring stored message, byte, and time tallies


File: conceptual.info,  Node: Resetting counters,  Next: Storing counter values,  Prev: Counter and timer statements,  Up: Counter and timer statements

4.6.1 Resetting counters
------------------------

At the start of an experiment, after all setup processing has completed,
all tasks that will eventually log measurement results should zero out
their counters:

<RESET_STMT>   ::=   <SOURCE_TASK>
                     'RESETS ITS COUNTERS'

   Hence, writing 'ALL TASKS RESET THEIR COUNTERS' causes each task to
reset all of the variables listed in *note Predeclared variables::--with
the exception of 'num_tasks'--to zero.  Note that 'ITS' and 'THEIR',
like 'RESET' and 'RESETS', are considered synonyms (*note Primitives::).


File: conceptual.info,  Node: Storing counter values,  Next: Restoring counter values,  Prev: Resetting counters,  Up: Counter and timer statements

4.6.2 Storing counter values
----------------------------

A program can store the current values of all of the variables listed in
*note Predeclared variables:: as follows:

<STORE_STMT>   ::=   <SOURCE_TASK>
                     'STORES ITS COUNTERS'

   For example, writing 'TASK 0 STORES ITS COUNTERS' causes task 0 to
store the current values of 'elapsed_usecs', 'total_msgs', 'bit_errors',
etc.  The values are not modified.  Note that 'ITS' and 'THEIR', like
'STORE' and 'STORES', are considered synonyms (*note Primitives::).


File: conceptual.info,  Node: Restoring counter values,  Prev: Storing counter values,  Up: Counter and timer statements

4.6.3 Restoring counter values
------------------------------

Counters can be restored to their most recently saved values with a
<RESTORE_STMT>:

<RESTORE_STMT>   ::=   <SOURCE_TASK>
                       'RESTORES ITS COUNTERS'

   For example, writing 'TASKS t SUCH THAT 3 DIVIDES t RESTORE THEIR
COUNTERS' causes every third task to replace 'elapsed_usecs',
'total_msgs', 'bit_errors', etc.  with the values stored by a
corresponding <STORE_STMT> (*note Storing counter values::).  Note that
'ITS' and 'THEIR', like 'RESTORE' and 'RESTORES', are considered
synonyms (*note Primitives::).

   An important feature of 'STORES' and 'RESTORES' is that they can be
nested.  That is, each 'STORE' pushes a set of counter values on a
stack, and each 'RESTORE' pops a set of counter values from the stack.
Consequently, one can write code like the following:

     ALL TASKS RESET THEIR COUNTERS THEN                                 #  1
     ALL TASKS COMPUTE FOR 2 SECONDS THEN                                #  2
     ALL TASKS STORE THEIR COUNTERS THEN                                 #  3
       ALL TASKS COMPUTE FOR 5 SECONDS THEN                              #  4
       ALL TASKS STORE THEIR COUNTERS THEN                               #  5
         ALL TASKS COMPUTE FOR 9 SECONDS THEN                            #  6
         ALL TASKS LOG ROUND(elapsed_usecs/1E6) AS "Should be 16" THEN   #  7
       ALL TASKS RESTORE THEIR COUNTERS THEN                             #  8
       ALL TASKS LOG ROUND(elapsed_usecs/1E6) AS "Should be 7" THEN      #  9
       ALL TASKS STORE THEIR COUNTERS THEN                               # 10
         ALL TASKS COMPUTE FOR 1 SECOND THEN                             # 11
         ALL TASKS LOG ROUND(elapsed_usecs/1E6) AS "Should be 8" THEN    # 12
       ALL TASKS RESTORE THEIR COUNTERS THEN                             # 13
       ALL TASKS LOG ROUND(elapsed_usecs/1E6) AS "Should be 7" THEN      # 14
       ALL TASKS RESTORE THEIR COUNTERS THEN                             # 15
     ALL TASKS LOG ROUND(elapsed_usecs/1E6) AS "Should be 2".            # 16

   Indentation is used in the above to clarify which 'RESTORE'
operations match which 'STORE' operations.  The first 'STORE' statement
(line 3) occurs after 2 seconds have elapsed.  The second 'STORE'
statement (line 5) occurs after 2+5=7 seconds have elapsed.  When the
'LOG' statement in line 7 is executed, it reports that 2+5+9=16 seconds
have elapsed.  The 'RESTORE' statement in line 8 then "winds back the
clock" to the previous 'STORE' statement, the one in line 5.  The next
'LOG' statement (line 9) executes as if lines 5-8 never ran and
therefore reports that only 2+5=7 seconds have elapsed.  The 'LOG'
statement in line 12 sees an additional second of elapsed time due to
line 11's 'COMPUTE' statement, for a total of 2+5+1=8 seconds.  However,
the 'RESTORE' in line 13 makes it as if that 'COMPUTE' never happened.
Consequently, the 'LOG' statement in line 14 reports that only
2+5=7 seconds have elapsed.  Finally, the 'RESTORE' in line 15 sets the
timer to the value it had all the way back at line 3.  The final 'LOG'
statement (line 16) therefore reports that only 2 seconds have elapsed
because line 2 contains the only 'COMPUTE' statement whose execution
time has not been discarded.

   Because the 'interpret' backend and those derived from it use logical
time instead of physical time, the code listed above will report all
zeroes.  Replacing 'ROUND(elapsed_usecs/1E6)' with just 'elapsed_usecs'
will log the logical times {6,5,8,7,3}.  That is, the 'LOG' statement in
line 7 sees six events after the initial 'RESET';(1) the 'LOG' statement
in line 9 sees only five events after the 'RESET' (corresponding to
lines 2, 3, 4, 5, and 9); and so forth up to the final 'LOG' statement,
which sees only three events: those produced by lines 2, 3, and 16.

   A program that calls 'RESTORE' more times than it calls 'STORE' will
abort with a fatal run-time error.

   ---------- Footnotes ----------

   (1) Each statement in the example corresponds to a single event and
therefore counts as one unit of time.


File: conceptual.info,  Node: Complex statements,  Next: Other statements,  Prev: Counter and timer statements,  Up: Grammar

4.7 Complex statements
======================

The coNCePTuaL statements presented in *note Communication statements::,
*note I/O statements::, and *note Other statements:: are all known as
"simple statements".  This section expands upon the statements already
introduced by presenting "complex statements".  In its most basic form,
a <COMPLEX_STMT> is just a <SIMPLE_STMT>.  However, the primary purpose
of a <COMPLEX_STMT> is to juxtapose simple statements and other complex
statements into more expressive forms.

   Complex statements take the following form:

<COMPLEX_STMT>   ::=   <SIMPLE_STMT> ['THEN' <COMPLEX_STMT>]

   The constituent simple statements include 'FOR' loops, 'LET'
bindings, 'IF' conditionals, grouping constructs, and all of the
statements introduced in *note Communication statements::, *note I/O
statements::, and *note Other statements:::

<SIMPLE_STMT>   ::=   'FOR' <EXPR> 'REPETITIONS' ['PLUS' <EXPR> 'WARMUP' 'REPETITIONS'
                      ['AND A SYNCHRONIZATION']] <SIMPLE_STMT>
                |     'FOR EACH' <IDENT> 'IN' <RANGE> [',' <RANGE>]* <SIMPLE_STMT>
                |     'FOR' <EXPR> <TIME_UNIT> ['PLUS' <EXPR> 'WARMUP' <TIME_UNIT>
                      ['AND A SYNCHRONIZATION']] <SIMPLE_STMT>
                |     'LET' <LET_BINDING> ['AND' <LET_BINDING>]* 'WHILE' <SIMPLE_STMT>
                |     'IF' <REL_EXPR> 'THEN' <SIMPLE_STMT> ['OTHERWISE' <SIMPLE_STMT>]
                |     '{' [<COMPLEX_STMT>] '}'
                |     <SEND_STMT>
                |     <RECEIVE_STMT>
                |     <WAIT_STMT>
                |     <MCAST_STMT>
                |     <REDUCE_STMT>
                |     <SYNC_STMT>
                |     <OUTPUT_STMT>
                |     <LOG_STMT>
                |     <FLUSH_STMT>
                |     <RESET_STMT>
                |     <STORE_STMT>
                |     <RESTORE_STMT>
                |     <ASSERT_STMT>
                |     <DELAY_STMT>
                |     <TOUCH_STMT>
                |     <TOUCH_BUFFER_STMT>
                |     <PROCESSOR_STMT>
                |     <BACKEND_STMT>

   The remainder of this section describes in turn the 'THEN' construct
and each of the just-introduced <SIMPLE_STMT> types.

* Menu:

* Combining statements::        Performing multiple statements in sequence
* Iterating::                   Performing a statement multiple times
* Binding variables::           Lending values to variables
* Conditional execution::       Executing statements only if a condition is met
* Grouping::                    Treating multiple statements as one


File: conceptual.info,  Node: Combining statements,  Next: Iterating,  Prev: Complex statements,  Up: Complex statements

4.7.1 Combining statements
--------------------------

The 'THEN' keyword separates statements that are to be performed
sequentially.  For example, a simple ping-pong communication can be
expressed as follows:

     ALL TASKS RESET ALL COUNTERS THEN
     TASK 0 SENDS A 0 BYTE MESSAGE TO TASK 1 THEN
     TASK 1 SENDS A 0 BYTE MESSAGE TO TASK 0 THEN
     TASK 0 LOGS elapsed_usecs/2 AS "One-way latency"

   There is no implicit intertask synchronization across 'THEN'
statements.  Consequently, the two communications specified in the
following statement will be performed concurrently:

     TASK 0 ASYNCHRONOUSLY SENDS AN 8 KILOBYTE MESSAGE TO TASK 1 THEN
     TASK 1 ASYNCHRONOUSLY SENDS AN 8 KILOBYTE MESSAGE TO TASK 0 THEN
     ALL TASKS AWAIT COMPLETION


File: conceptual.info,  Node: Iterating,  Next: Binding variables,  Prev: Combining statements,  Up: Complex statements

4.7.2 Iterating
---------------

coNCePTuaL provides a variety of looping constructs designed to
repeatedly execute a <SIMPLE_STMT>.

* Menu:

* Counted loops::               Iterating for a given number of iterations
* Range loops::                 Iterating over lists of numbers
* Timed loops::                 Iterating for a given length of time


File: conceptual.info,  Node: Counted loops,  Next: Range loops,  Prev: Iterating,  Up: Iterating

Counted loops
.............

The simplest form of iteration in coNCePTuaL repeats a <SIMPLE_STMT> a
given number of times.  In its most basic form the syntax is simply
"'FOR' <EXPR> 'REPETITIONS' <SIMPLE_STMT>".  As could be expected, the
<EXPR> term (*note Arithmetic expressions::) specifies the number of
repetitions to perform.  Hence, the following <SIMPLE_STMT> outputs the
phrase "I will not talk in class" 100 times:

     FOR 100 REPETITIONS ALL TASKS OUTPUT "I will not talk in class."

   'FOR'...'REPETITIONS' can optionally specify a number of "warmup"
repetitions to perform in addition to the base number of repetitions.
The syntax is "'FOR' <EXPR> 'REPETITIONS' 'PLUS' <EXPR> 'WARMUP
REPETITIONS' <SIMPLE_STMT>".  During warmup repetitions, the 'OUTPUTS'
statement (*note Writing to standard output::), the 'LOGS' statement
(*note Writing to a log file::), and the 'COMPUTES AGGREGATES' statement
(*note Computing aggregates::) are all suppressed (i.e., they have no
effect) and none of the special variables predeclared by coNCePTuaL
(*note Predeclared variables::) are updated.  Many benchmarks
synchronize all tasks after performing a set of warmup repetitions.
This behavior can be expressed conveniently as part of a coNCePTuaL
'FOR' loop by appending the 'AND A SYNCHRONIZATION' clause:

     FOR 1000 REPETITIONS PLUS 3 WARMUP REPETITIONS AND A SYNCHRONIZATION
     TASK 0 MULTICASTS A 1 MEGABYTE MESSAGE TO ALL OTHER TASKS

coNCePTuaL also provides a separate 'SYNCHRONIZES' statement.  This is
described in *note Synchronizing::.

   The importance of performing warmup repetitions is that many
communication layers give atypically poor performance on the first few
transmissions.  This may be because the messages miss in the cache;
because the communication layer needs to establish connections between
pairs of communicating tasks; or, because the operating system needs to
"register" message buffers with the network interface.  Regardless of
the reason, specifying warmup repetitions helps make performance
measurements less variable.


File: conceptual.info,  Node: Range loops,  Next: Timed loops,  Prev: Counted loops,  Up: Iterating

Range loops
...........

Range loops are coNCePTuaL's most powerful looping construct.  Unlike
the counted-loop construct presented in *note Counted loops::, a range
loop binds a variable to a different value on each iteration.  Range
loops have the following syntax:

        'FOR EACH' <IDENT>
        'IN' <RANGE> [',' <RANGE>]*
        <SIMPLE_STMT>

   A <RANGE> represents a range expression.  Range expressions are
described in *note Range expressions::.  In short, a range expression
specifies a list of values by explicit enumeration, numeric progression,
or predicated combinations of other range expressions.  For a range
loop, coNCePTuaL successively binds a specified variable to each <EXPR>
in each <RANGE> and evaluates the given <SIMPLE_STMT>.

   The following are some examples of the 'FOR EACH' statement from
simplest to most elaborate.  Each example uses 'i' as the loop variable
and 'TASK 0 OUTPUTS i' as the loop body.  The output from each example
is shown with a "-|" symbol preceding each line.

     FOR EACH i IN {8, 7, 5, 4, 5} TASK 0 OUTPUTS i
     -| 8
     -| 7
     -| 5
     -| 4
     -| 5

     FOR EACH i IN {1, ..., 5} TASK 0 OUTPUTS i
     -| 1
     -| 2
     -| 3
     -| 4
     -| 5

     FOR EACH i IN {5, ..., 1} TASK 0 OUTPUTS i
     -| 5
     -| 4
     -| 3
     -| 2
     -| 1

     FOR EACH i IN {1, ..., 5}, {8, 7, 5, 4, 5} TASK 0 OUTPUTS i
     -| 1
     -| 2
     -| 3
     -| 4
     -| 5
     -| 8
     -| 7
     -| 5
     -| 4
     -| 5

     FOR EACH i IN {1, 4, 7, ..., 30} TASK 0 OUTPUTS i
     -| 1
     -| 4
     -| 7
     -| 10
     -| 13
     -| 16
     -| 19
     -| 22
     -| 25
     -| 28

     FOR EACH i IN {3**1, 3**2, 3**3, ..., 3**7} TASK 0 OUTPUTS i
     -| 3
     -| 9
     -| 27
     -| 81
     -| 243
     -| 729
     -| 2187

     FOR EACH i IN {0}, {1, 2, 4, ..., 256} TASK 0 OUTPUTS i
     -| 0
     -| 1
     -| 2
     -| 4
     -| 8
     -| 16
     -| 32
     -| 64
     -| 128
     -| 256

     FOR EACH i IN {neigh FOR EACH neigh IN {0,...,100} WHERE
     MESH_DISTANCE((10,10), 55, neigh) IS IN {1, 2}} TASK 0 OUTPUTS i.
     -| 35
     -| 44
     -| 45
     -| 46
     -| 53
     -| 54
     -| 56
     -| 57
     -| 64
     -| 65
     -| 66
     -| 75

   That final example loops over all values that are a Manhattan
distance of either 1 or 2 from the number 55 in a 10x10 layout of the
numbers 0-99.

   'FOR EACH' loops with constant progressions are executed exactly
once.  Note that if the <RANGE> does not contain an ellipsis then all
values are used, regardless of order or constancy:

     FOR EACH i IN {4, 4, 4, ..., 4} TASK 0 OUTPUTS i
     -| 4

     FOR EACH i IN {4, 4, 4, 4, 4} TASK 0 OUTPUTS i
     -| 4
     -| 4
     -| 4
     -| 4
     -| 4


File: conceptual.info,  Node: Timed loops,  Prev: Range loops,  Up: Iterating

Timed loops
...........

A "timed loop" is similar to a counted loop (*note Counted loops::) but
instead of running for a given number of iterations it runs for a given
length of time.  Timed loops are absent from all general-purpose
programming languages but can be quite useful in the context of network
correctness and performance testing.  The syntax of coNCePTuaL's
timed-loop construct is "'FOR' <EXPR> <TIME_UNIT> <SIMPLE_STMT>".
<TIME_UNIT> is unit of time as listed in *note Delaying execution:: and
<EXPR> specifies the number of <TIME_UNIT>s for which to execute.

   The following example shows how to spend three seconds sending
messages from task 0 to task 1:

     FOR 3 SECONDS TASK 0 SENDS A 1 MEGABYTE MESSAGE TO TASK 1

   Although coNCePTuaL tries its best to run for exactly the specified
length of time there will invariably be some error in the process.
Always use 'elapsed_usecs' (*note Predeclared variables::) as the
indicator of actual time instead of the time requested in the loop.

   Timed loops can optionally run for a length of "warmup" time in
addition to the base execution time.  The syntax is "'FOR' <EXPR>
<TIME_UNIT> 'PLUS' <EXPR> 'WARMUP' <TIME_UNIT> <SIMPLE_STMT>".  During
warmup repetitions, the 'OUTPUTS' statement (*note Writing to standard
output::), the 'LOGS' statement (*note Writing to a log file::), and the
'COMPUTES AGGREGATES' statement (*note Computing aggregates::) are all
suppressed (i.e., they have no effect) and none of the special variables
predeclared by coNCePTuaL (*note Predeclared variables::) are updated.
Many benchmarks synchronize all tasks after performing a set of warmup
repetitions.  This behavior can be expressed conveniently as part of a
timed loop by appending the 'AND A SYNCHRONIZATION' clause:

     FOR 3 SECOND PLUS 1 WARMUP MILLISECOND AND A SYNCHRONIZATION TASK 0
     SENDS A 1 MEGABYTE MESSAGE TO TASK 1

coNCePTuaL also provides a separate 'SYNCHRONIZES' statement.  This is
described in *note Synchronizing::.

   The importance of performing warmup repetitions is that many
communication layers give atypically poor performance on the first few
transmissions.  This may be because the messages miss in the cache;
because the communication layer needs to establish connections between
pairs of communicating tasks; or, because the operating system needs to
"register" message buffers with the network interface.  Regardless of
the reason, specifying warmup repetitions helps make performance
measurements less variable.


File: conceptual.info,  Node: Binding variables,  Next: Conditional execution,  Prev: Iterating,  Up: Complex statements

4.7.3 Binding variables
-----------------------

There are four ways to bind a value to a variable:

  1. as part a source or target task description (*note Task
     descriptions::)

  2. as part of a range loop (*note Range loops::)

  3. via a command-line argument (*note Command-line arguments::)

  4. explicitly using the 'LET' keyword (this section)

   The 'LET' statement has the following form:

        'LET' <LET_BINDING>
        ['AND'
        <LET_BINDING>]*
        'WHILE' <SIMPLE_STMT>

where <LET_BINDING> is defined as follows:

<LET_BINDING>   ::=   <IDENT> 'BE'       expr
                                     |   <SOURCE_TASK>
                                     |   'A RANDOM TASK' [<RANDOM_TASK_CONSTRAINTS>]

   The optional <RANDOM_TASK_CONSTRAINTS> limits the set of tasks from
which 'A RANDOM TASK' selects:

<RANDOM_TASK_CONSTRAINTS>   ::=   'OTHER THAN' <EXPR>
                            |     'LESS THAN' <EXPR> ['BUT NOT' <EXPR>]
                            |     'GREATER THAN' <EXPR> ['BUT NOT' <EXPR>]
                            |     'IN' '[' <EXPR> ',' <EXPR> ']' ['BUT NOT' <EXPR>]

   An <IDENT> bound using the form ''LET' <IDENT> 'BE' <SOURCE_TASK>'
represents a group of tasks and must therefore be accessed using the
'TASK GROUP' construct (*note Source tasks::).  For example, in the
coNCePTuaL program

     LET left BE TASKS t SUCH THAT t < num_tasks/2 WHILE TASK GROUP left
     SENDS A 1 KILOBYTE MESSAGE TO TASK num_tasks - left - 1

the ''TASK GROUP' left' expression defines 'left' as the group of tasks
described by ''TASKS' t 'SUCH THAT' t < num_tasks/2'.  The 'left' in
'num_tasks - left - 1' refers back to _that_ definition of 'left', not
the let-bound 'left'.  The 't' in the let-binding is used only to
specify the group of tasks that will be bound to 'left'.  Its scope is
limited to the expression 't < num_tasks/2'.  In other words, the
preceding example is equivalent to

     TASKS left SUCH THAT left < num_tasks/2 SEND A 1 KILOBYTE MESSAGE TO
     TASK num_tasks - left - 1

   The advantage of using 'LET' to define a task group is that the
same--possible complex--description of a set of tasks can be reused in
multiple statements without having to type it repeatedly.

   Here are some further examples of 'LET':

     LET reps BE 3 WHILE FOR reps REPETITIONS TASK 0 OUTPUTS "Laissez les
     bons temps rouler."

     LET src BE num_tasks-1 AND dest BE num_tasks/2 WHILE TASK src SENDS A
     55E6 BIT MESSAGE TO TASK dst

     LET hotspot BE A RANDOM TASK WHILE TASKS other SUCH THAT
     other<>hotspot SEND 1000 1 MEGABYTE MESSAGES TO TASK hotspot

     LET target BE A RANDOM TASK OTHER THAN 3 WHILE TASK 3 SENDS A 24 BYTE
     MESSAGE TO TASK target

     LET x BE A RANDOM TASK AND y be a RANDOM TASK GREATER THAN x WHILE
     TASK 0 OUTPUTS "Did you know that " AND x AND " is less than " AND y
     AND "?"

     LET nonzero BE A RANDOM TASK LESS THAN 10 BUT NOT 0 WHILE TASK nonzero
     SLEEPS FOR 2 SECONDS

     LET middles BE A RANDOM TASK IN [1, num_tasks-2] WHILE TASK middles
     ASYNCHRONOUSLY SENDS A 10 BYTE MESSAGE TO TASK ends SUCH THAT ends IS
     NOT IN [1, num_tasks-2]

     LET num BE 1000 AND num BE num*2 WHILE TASK 0 OUTPUTS num
     -| 2000

   That last example demonstrates that 'LET' can bind a variable to a
function of its previous value.  It is important to remember, though,
that variables in coNCePTuaL cannot be assigned, only bound to a value
for the duration of the current scope.  They can, however, be bound to a
different value for the duration of a child scope.  The following
example is an attempt to clarify the distinction between binding and
assignment:

     LET var BE 123 WHILE FOR 5 REPETITIONS LET var BE var+1 WHILE TASK 0
     OUTPUTS var
     -| 124
     -| 124
     -| 124
     -| 124
     -| 124

In that example, 'var' is bound to '123' for the scope containing the
'FOR' statement.  Then, within the 'FOR' statement, a new scope begins
with 'var' being given one plus the value it had in the outer scope,
resulting in '124'.  If coNCePTuaL supported assignment instead of
variable-binding, the program would have output '124', '125', '126',
'127', and '128'.  Note that if 'A RANDOM TASK' were used in the example
instead of 'var+1', 'var' would get a different value in each iteration.

   When a variable is 'LET'-bound to 'A RANDOM TASK', all tasks agree on
the random number.  Otherwise, task A might send a message to task B but
task B might be expecting to receive the message from task C, thereby
leading to a variety of problems.  If there are no valid random tasks,
as in the following example, 'A RANDOM TASK' will return '-1':

     LET invalid_task BE A RANDOM TASK GREATER THAN num_tasks WHILE TASK 0
     OUTPUTS invalid_task
     -| -1

Furthermore, the <EXPR> passed to 'GREATER THAN' is bounded from below
by '0' and the <EXPR> passed to 'LESS THAN' is bounded from above by
'num_tasks-1'.  Hence, the following coNCePTuaL statement will always
output values less than or equal to 'num_tasks-1' (unless 'num_tasks' is
greater than 1*10^6, of course, in which case it will always output
values less than 1*10^6):

     LET valid_task BE A RANDOM TASK LESS THAN 1E6 WHILE TASK valid_task
     OUTPUTS "Hello from " AND valid_task


File: conceptual.info,  Node: Conditional execution,  Next: Grouping,  Prev: Binding variables,  Up: Complex statements

4.7.4 Conditional execution
---------------------------

Like most programming languages, coNCePTuaL supports conditional code
execution:

<IF_STMT>   ::=   'IF' <REL_EXPR>
                  'THEN' <SIMPLE_STMT>
                  ['OTHERWISE' <SIMPLE_STMT>]

   The semantics of an <IF_STMT> are that if <REL_EXPR> (*note
Relational expressions::) is TRUE then the first <SIMPLE_STMT> is
executed.  If <REL_EXPR> is FALSE then the second <SIMPLE_STMT> is
executed.  One restriction is that <REL_EXPR> must return the same truth
value to every task.  Consequently, functions that involve task-specific
random numbers (*note Random-number functions::) are forbidden within
<REL_EXPR>.

   The following is an example of an <IF_STMT>:

     IF this>that THEN TASK 0 SENDS A 3 KILOBYTE MESSAGE TO TASK this
     OTHERWISE TASK num_tasks-1 SENDS A 4 KILOBYTE MESSAGE TO TASK that


File: conceptual.info,  Node: Grouping,  Prev: Conditional execution,  Up: Complex statements

4.7.5 Grouping
--------------

'FOR' loops, 'LET' bindings, and 'IF' statements operate on a single
<SIMPLE_STMT> (or two <SIMPLE_STMT>s in the case of 'IF'...'OTHERWISE').
Operating on multiple <SIMPLE_STMT>s--or, more precisely, operating on a
single <COMPLEX_STMT> that may consist of multiple <SIMPLE_STMT>s--is a
simple matter of placing the <SIMPLE_STMT>s within curly braces.
Contrast the following:

     FOR 3 REPETITIONS TASK 0 OUTPUTS "She loves me." THEN TASK 0 OUTPUTS
     "She loves me not."
     -| She loves me.
     -| She loves me.
     -| She loves me.
     -| She loves me not.

     FOR 3 REPETITIONS {TASK 0 OUTPUTS "She loves me." THEN TASK 0 OUTPUTS
     "She loves me not."}
     -| She loves me.
     -| She loves me not.
     -| She loves me.
     -| She loves me not.
     -| She loves me.
     -| She loves me not.

In other words, everything between '{' and '}' is treated as if it were
a single statement.  Hence, the 'FOR' loop applies only to the "She
loves me" output in the first statement above, while the 'FOR' loop
applies to both "She loves me" and "She loves me not" in the second
statement.

   Variable scoping is limited to the <SIMPLE_STMT> in the body of a
'LET':

     LET year BE 1984 WHILE LET year BE 2084 WHILE TASK 0 OUTPUTS year THEN
     TASK 0 OUTPUTS year
     error-> The second 'year' is outside the scope of both 'LET' statements.

     LET year BE 1984 WHILE {{LET year BE 2084 WHILE TASK 0 OUTPUTS year}
     THEN TASK 0 OUTPUTS year}
     -| 2084
     -| 1984

   As indicated by the grammatical rules presented at the beginning of
*note Complex statements::, coNCePTuaL does support empty pairs of curly
braces, which represent a statement that does nothing and takes no time
to execute.  While never strictly needed, '{}' may be a convenient
mechanism for mechanically produced coNCePTuaL programs.


File: conceptual.info,  Node: Other statements,  Next: Header declarations,  Prev: Complex statements,  Up: Grammar

4.8 Other statements
====================

coNCePTuaL contains a few more statements than those described in *note
Communication statements:: and *note I/O statements::.  As there is no
category that clearly describes the remaining statements, they are
listed here in this "catch-all" section.

* Menu:

* Asserting conditions::        Aborting if a program requirement is not met
* Delaying execution::          Introducing artificial delays into a program
* Touching memory::             Occupying the CPU or the memory hierarchy
* Reordering task IDs::         Changing the virtual->physical task map
* Injecting arbitrary code::    Executing backend-specific code verbatim


File: conceptual.info,  Node: Asserting conditions,  Next: Delaying execution,  Prev: Other statements,  Up: Other statements

4.8.1 Asserting conditions
--------------------------

coNCePTuaL programs can encode the run-time conditions that must hold in
order for the test to run properly.  This is achieved through
"assertions", which are expressed as follows:

<ASSERT_STMT>   ::=   'ASSERT THAT' <STRING>
                      'WITH' <REL_EXPR>

   <STRING> is a message to be reported to the user if the assertion
fails.  <REL_EXPR> is a relational expression (as described in *note
Relational expressions::) that must evaluate to TRUE for the program to
continue running.  Assertion failures are considered fatal errors.  They
cause the coNCePTuaL program to abort immediately.

   Here are some sample <ASSERT_STMT>s:

     ASSERT THAT "the bandwidth test requires at least two tasks" WITH
     num_tasks >= 2

     ASSERT THAT "pairwise ping-pongs require an even number of task"
     WITH num_tasks IS EVEN

     ASSERT THAT "this program requires a square number of tasks" WITH
     SQRT(num_tasks)**2 = num_tasks

(For the last example, recall that coNCePTuaL expressions are of integer
type.  Hence, the example's <REL_EXPR> is mathematically equivalent to
floor(sqrt(N))^2 = N, which is TRUE if and only if N is a square.)


File: conceptual.info,  Node: Delaying execution,  Next: Touching memory,  Prev: Asserting conditions,  Up: Other statements

4.8.2 Delaying execution
------------------------

It is sometimes interesting to measure the progress of a communication
pattern when delays are inserted at various times on various tasks.
coNCePTuaL provides two mechanisms for inserting delays: one that
relinquishes the CPU while delaying ('SLEEP') and one that hoards it
('COMPUTE').

<DELAY_STMT>   ::=   <SOURCE_TASK>
                     'SLEEPS' | 'COMPUTES'
                     'FOR' <EXPR> <TIME_UNIT>

   <SOURCE_TASK> (*note Source tasks::) specifies the set of tasks that
will stall.  <EXPR> (*note Arithmetic expressions::) specifies the
number of <TIME_UNIT>s for which to delay and <TIME_UNIT> represents any
of the following measures of time:

<TIME_UNIT>   ::=   'MICROSECONDS' | 'MILLISECONDS' | 'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS'

   Delay times are only approximate.  'SLEEP''s accuracy depends upon
the operating-system's clock resolution or length of time quantum
(commonly measured in milliseconds or tens of milliseconds).  'COMPUTE',
which is implemented by repeatedly reading a variable until the desired
amount of time elapses, is calibrated during the coNCePTuaL run-time
system's initialization phase and can be adversely affected by
intermittant system load.  Both forms of <DELAY_STMT> attempt to measure
wall-clock time ("real time"), not just the time the program is running
("virtual time").  Because the delay times are approximate, it is
strongly recommended that the 'elapsed_usecs' variable (*note
Predeclared variables::) be employed to determine the actual elapsed
time.


File: conceptual.info,  Node: Touching memory,  Next: Reordering task IDs,  Prev: Delaying execution,  Up: Other statements

4.8.3 Touching memory
---------------------

"Touching" memory means reading and writing it.  The coNCePTuaL
'TOUCHES' statement enables a program to touch memory for one of two
purposes: either to simulate computation in an application by thrashing
some or all of the memory hierarchy or to preload message buffers into
the upper levels of the memory hierarchy in order to better separate
communication costs from memory costs.

* Menu:

* Simulating computation::      Touching memory to mimic computation
* Priming message buffers::     Touching memory to warm up message buffers


File: conceptual.info,  Node: Simulating computation,  Next: Priming message buffers,  Prev: Touching memory,  Up: Touching memory

Simulating computation
......................

While the statements described in *note Delaying execution:: delay for a
specified length of time, it is also possible to delay for the duration
of a specified amount of "work".  "Work" is expressed in terms of memory
accesses.  That is, a coNCePTuaL program can touch (i.e., read plus
write) data with a given stride from a memory region of a given size.
By varying these parameters, a program can emulate an application's
computation by hoarding the CPU or any level of the memory hierarchy.

<TOUCH_STMT>   ::=   <SOURCE_TASK>
                     'TOUCHES'
                     [<EXPR> <DATA_TYPE> 'OF']
                     'AN' <ITEM_SIZE> 'MEMORY REGION'
                     [<EXPR> 'TIMES']
                     ['WITH STRIDE' <EXPR> <DATA_TYPE> | 'WITH RANDOM STRIDE']

<ITEM_SIZE> and <DATA_TYPE> are described in *note Item size:: and
<EXPR> is described in *note Arithmetic expressions::.

   As shown by the formal definition of <TOUCH_STMT> the required
components are a <SOURCE_TASK> and the size of the memory region to
touch.  By default, every 'WORD' (*note Item size::) of memory in the
region is touched exactly once.  The type of data that is touched can be
varied with an '<EXPR> <DATA_TYPE> OF' clause.  For instance, '100 BYTES
OF' of a memory region will touch individual bytes.  An optional repeat
count enables the memory region (or subset thereof) to be touched
multiple times.  Hence, if 'TASK 0 TOUCHES A 6 MEGABYTE MEMORY REGION 5
TIMES', then the touch will be performed as if 'TASK 0' were told to
'TOUCH 5*6M BYTES OF A 6 MEGABYTE MEMORY REGION 1 TIME' or simply to
'TOUCH 5*6M BYTES OF A 6 MEGABYTE MEMORY REGION'.

   By default, every <DATA_TYPE> of data is touched.  However, a
<TOUCH_STMT> provides for touching only a subset of the <DATA_TYPE>s in
the memory region.  By writing 'WITH STRIDE <EXPR> <DATA_TYPE>', only
the first <DATA_TYPE> out of every <EXPR> will be touched.  Instead of
specifying an exact stride, the memory region can be accessed in random
order using the 'WITH RANDOM STRIDE' clause.

   Unless the number of touches and data type are specified explicitly,
the number of 'WORD's that are touched is equal to the size of the
memory region divided by the stride length then multiplied by the repeat
count.  Therefore, if 'TASK 0 TOUCHES AN 8 MEGABYTE MEMORY REGION 2
TIMES WITH STRIDE 8 WORDS', then a total of (2^23 / (4*8)) * 2 = 524288
touches will be performed.  For the purpose of the preceding
calculation, 'WITH RANDOM STRIDE' should be treated as if it were 'WITH
STRIDE 1 WORD' (again, unless the number of touches and data type are
specified explicitly).

   To save memory, all 'TOUCH' statements in a coNCePTuaL program access
subsets of the same region of memory, whose size is determined by the
maximum needed.  However, each dynamic execution of a <TOUCH_STMT>
starts touching from where the previous execution left off.  For
example, consider the following statement:

     TASK 0 TOUCHES 100 WORDS OF A 200 WORD MEMORY REGION

The first time that that statement is executed within a loop (*note
Iterating::), the first 200 words are touched.  The second time, the
second 200 words are touched.  The third time, the index into the region
wraps around and the first 200 words are touched again.

   Each static <TOUCH_STMT> maintains its own index into the memory
region.  Therefore, the first of the following two statements will
terminate successfully (assuming it's not executed in the body of a
loop) while the second will result in a run-time error because the final
byte of the final word does not fit within the given memory region.

     TASK 0 TOUCHES 100 WORDS OF A 799 BYTE MEMORY REGION THEN
     TASK 0 TOUCHES 100 WORDS OF A 799 BYTE MEMORY REGION

     FOR 2 REPETITIONS TASK 0 TOUCHES 100 WORDS OF A 799 BYTE MEMORY REGION

('THEN' is described in *note Combining statements::, and
'FOR'...'REPETITIONS' is described in *note Counted loops::.)  The first
statement shown above touches the same 100 words (400 bytes) in each of
the two <TOUCH_STMT>s.  The second statement touches the first 100 words
the first time the <TOUCH_STMT> is executed and fails when trying to
touch the (only partially extant) second 100 words.


File: conceptual.info,  Node: Priming message buffers,  Prev: Simulating computation,  Up: Touching memory

Priming message buffers
.......................

*note Data touching::, describes how a message sent or received 'WITH
DATA TOUCHING' will have all of its data touched before or after
transmission.  Sometimes, however, a program may want to touch message
data without actually transmitting a message.  For example, a task could
touch message data to load it into the cache, then 'RESET ITS COUNTERS'
(*note Resetting counters::), and finally send or receive a message
without further data touching.  The 'TOUCHES' statement has an alternate
form that touches message buffers instead of isolated memory regions:

<TOUCH_BUFFER_STMT>   ::=   <SOURCE_TASK>
                            'TOUCHES'
                                'ALL MESSAGE BUFFERS'
                              | 'MESSAGE BUFFER' <EXPR>
                              | 'THE CURRENT MESSAGE BUFFER'

   The first form, 'ALL MESSAGE BUFFERS', touches all message buffers
available to the program, even those not yet used at the time 'TOUCHES'
is invoked.  In the following statement, for example, 'TOUCHES' "knows"
that 10 message buffers will be used and touches the data in all 10 of
them:

     ALL TASKS TOUCH ALL MESSAGE BUFFERS THEN
     FOR EACH SZ IN {0, ..., 9}
       TASK 0 ASYNCHRONOUSLY SENDS AN SZ MEGABYTE MESSAGE TO TASK 1 THEN
     ALL TASKS AWAIT COMPLETION

(*note Buffer control::, explains why the preceding statement requires
10 buffers.)  One caveat is that in coNCePTuaL version 1.5.1, messages
sent or received with the 'UNIQUE' keyword (*note Unique messages::) are
not touched.  This limitation may be lifted in a later release of
coNCePTuaL.

   The second form of the <TOUCH_BUFFER_STMT> statement, 'MESSAGE BUFFER
<EXPR>', touches a specific message buffer.  It is expected to be used
in programs that send 'FROM BUFFER <EXPR>' or receive 'INTO BUFFER
<EXPR>'.

   'THE CURRENT MESSAGE BUFFER', the third and final form of the
<TOUCH_BUFFER_STMT> statement, touches the first message buffer that is
not currently in use (i.e., is not the source or destination of an
asynchronous operation).  Usually, this is whichever message buffer will
next be sent from or received into.  (The exception is when a task
'AWAITS COMPLETION' after touching the current message buffer but before
sending or receiving a message--probably a somewhat contrived
situation.)


File: conceptual.info,  Node: Reordering task IDs,  Next: Injecting arbitrary code,  Prev: Touching memory,  Up: Other statements

4.8.4 Reordering task IDs
-------------------------

coNCePTuaL distinguishes between "task IDs", which are used in task
descriptions (*note Task descriptions::) and "processor IDs", which are
assigned by the underlying communication layer.  As stated in *note
Running coNCePTuaL programs::, a coNCePTuaL program has no control over
how processor IDs map to physical processors.  It therefore has no way
to specify, for instance, that a set of tasks must run on the same
multiprocessor node (or on different nodes, for that matter).
Initially, every task's task ID is set equal to its processor ID.
However, while processor IDs are immutable, task IDs can be changed
dynamically during the execution of a program.  Altering task IDs can
simplify coNCePTuaL programs that might otherwise need to evaluate
complex expressions to determine peer tasks.  coNCePTuaL enables either
a specific or a randomly selected task to be assigned to a given
processor:

<PROCESSOR_STMT>   ::=   <SOURCE_TASK>
                         'IS ASSIGNED TO'
                         'PROCESSOR' <EXPR> | 'A RANDOM PROCESSOR'

   In addition to performing the specified processor assignment,
coNCePTuaL will perform an additional, implicit processor assignment in
order to maintain a bijection between task IDs and processor IDs (i.e.,
every task ID corresponds to exactly one processor ID and every
processor ID corresponds to exactly one task ID). Consider the following
statement:

     TASK n SUCH THAT n<(num_tasks+1)/2 IS ASSIGNED TO PROCESSOR n*2

If 'num_tasks' is '8' the preceding statement will cause 'TASK 0' to
refer to processor 0, 'TASK 1' to refer to processor processor 2,
'TASK 2' to refer to processor 4, and 'TASK 3' to refer to processor 6.
What may be unintuitive is that the remaining tasks will not map to
their original processors, as doing so would violate the bijection
invariant.  To clarify coNCePTuaL's implicit processor assignments the
following timeline illustrates the execution of 'TASK n SUCH THAT
n<(num_tasks+1)/2 IS ASSIGNED TO PROCESSOR n*2' when 'num_tasks' is '8':

'n'   'TASK 0'   'TASK 1'   'TASK 2'   'TASK 3'   'TASK 4'   'TASK 5'   'TASK 6'   'TASK 7'
                                                                                   
--    0          1          2          3          4          5          6          7
0     0          1          2          3          4          5          6          7
1     0          *2*        *1*        3          4          5          6          7
2     0          2          *4*        3          *1*        5          6          7
3     0          2          4          *6*        1          5          *3*        7

   Initially, task and processor IDs are equal.  When 'n' takes on the
value 0, coNCePTuaL performs the equivalent of 'TASK 0 IS ASSIGNED TO
PROCESSOR 0', which does not change the task ID to processor ID mapping.
When 'n' is 1, coNCePTuaL performs the equivalent of 'TASK 1 IS ASSIGNED
TO PROCESSOR 2', which sets task 1's processor to 2.  However, because
task 2 also has processor 2, coNCePTuaL implicitly performs the
equivalent of 'TASK 2 IS ASSIGNED TO PROCESSOR 1' in order to preserve
the unique task ID to processor ID mapping.  When 'n' is 2, coNCePTuaL
performs the equivalent of 'TASK 2 IS ASSIGNED TO PROCESSOR 4' and,
because task 4 also has processor 4, the equivalent of 'TASK 4 IS
ASSIGNED TO PROCESSOR 1'.  Finally, when 'n' is 3, coNCePTuaL performs
the equivalent of 'TASK 3 IS ASSIGNED TO PROCESSOR 6' and, because
task 6 also has processor 6, the equivalent of 'TASK 6 IS ASSIGNED TO
PROCESSOR 3'.  Thus, coNCePTuaL maintains the invariant that after any
processor assignment every task corresponds to a unique processor and
every processor corresponds to a unique task.


File: conceptual.info,  Node: Injecting arbitrary code,  Prev: Reordering task IDs,  Up: Other statements

4.8.5 Injecting arbitrary code
------------------------------

There are some features that are outside the scope of the coNCePTuaL
language.  coNCePTuaL does, however, provide a mechanism for inserting
backend-specific statements into the control flow of a coNCePTuaL
program.  This feature is intended for users with specific needs that
can't be satisfied through the conventional coNCePTuaL statements.

<BACKEND_STMT>   ::=   <SOURCE_TASK>
                       'BACKEND EXECUTES'
                       <EXPR> | <STRING>
                       ['AND' <EXPR> | <STRING>]*

   The following example assumes a C-based backend:

     ALL TASKS taskID BACKEND EXECUTE "my_c_function(" AND taskID AND ");"

The 'my_c_function()' function needs be defined in some object file and
linked with the coNCePTuaL-generated code.

   Most users will never need to 'BACKEND EXECUTE' code.  In fact, most
users should _not_ use <BACKEND_STMT>s as they produce nonportable code.
One of coNCePTuaL's goals is for programs to be understandable by people
unfamiliar with the language, and <BACKEND_STMT>s thwart that goal.
However, <BACKEND_STMT>s do help ensure that all of the target
language/library's features are available to coNCePTuaL.

   All <EXPR>s are passed to the backend in floating-point context
(*note Evaluation contexts::).  Consequently, all backend code that
takes a coNCePTuaL <EXPR> needs to expect a floating-point value (which
the backend code can of course cast explicitly to an integer if
necessary).

   There is an important special case defined for the argument to the
'BACKEND EXECUTES' statement: once all of the <STRING> and <EXPR>
arguments are concatenated into a single string, all occurrences of the
substring '[MESSAGE BUFFER EXPR]' are replaced by a pointer to the
EXPRth message buffer created using the 'FROM BUFFER' or 'INTO BUFFER'
keywords (presented in *note Buffer control::).  This special case makes
it easy for a coNCePTuaL program to invoke communication functions
provided by the underlying communications library.  Note that the notion
of a default buffer is not meaningful in the context of 'BACKEND
EXECUTES', which is not a communication statement.

   *Note Backend-specific declarations::, for a description of 'BACKEND
DECLARES', a companion statement to 'BACKEND EXECUTES' that enables
coNCePTuaL programs to directly declare variables and functions in the
target language.


File: conceptual.info,  Node: Header declarations,  Next: Complete programs,  Prev: Other statements,  Up: Grammar

4.9 Header declarations
=======================

coNCePTuaL programs may contain a header section that precedes the first
statement in a coNCePTuaL program.  The header section contains three
types of declarations that affect the remainder of the program: language
versioning declarations, declarations of command-line options, and
backend-specific variable and function declarations.

* Menu:

* Language versioning::         Preventing errors caused by language changes
* Command-line arguments::      Setting variables from command-line arguments
* Backend-specific declarations::  Declaring variables and functions verbatim


File: conceptual.info,  Node: Language versioning,  Next: Command-line arguments,  Prev: Header declarations,  Up: Header declarations

4.9.1 Language versioning
-------------------------

Because the coNCePTuaL language is still under development, the
programmer is forewarned that major changes are likely.  Changes may
prevent old code from compiling or, even worse, may cause old code to
produce incorrect results (e.g., if scoping or block structuring are
altered).  To mitigate future language changes coNCePTuaL enables
programs to specify which version of the language they were written to.
The syntax is straightforward:

<VERSION_DECL>   ::=   'REQUIRE LANGUAGE VERSION' <STRING>

   The parser issues a warning message if <STRING> does not exactly
match the language version supported by the compiler.  If the program
successfully compiles after a version-mismatch warning, the programmer
should check the output very carefully to ensure that the program
behaved as expected.

   The current version of the coNCePTuaL language is '1.5'.  Note that
the language version does not necessarily correspond to the version of
the coNCePTuaL toolset (*note Usage::) as a whole.


File: conceptual.info,  Node: Command-line arguments,  Next: Backend-specific declarations,  Prev: Language versioning,  Up: Header declarations

4.9.2 Command-line arguments
----------------------------

coNCePTuaL makes it easy to declare command-line parameters, although
the syntax is a bit verbose:

<PARAM_DECL>   ::=   <IDENT>
                     'IS' <STRING>
                     'AND COMES FROM' <STRING> 'OR' <STRING>
                     'WITH DEFAULT' <EXPR>

   <IDENT> is the coNCePTuaL variable being declared.  The first
<STRING> is a descriptive string that is provided when the user runs the
program with '--help' or '-?'.  The '<STRING> OR <STRING>' terms list
the long name for the command-line option, preceded by '--', and the
short (single-character) name, preceded by '-'.  Finally, <EXPR>
specifies the value that will be assigned to <IDENT> if the command-line
option is not used.  <EXPR> must be a constant expression and may not
utilize any of the random-number functions listed in *note Random-number
functions::.  Note that short names (also long names) must be unique.

   For instance, the declaration 'nummsgs IS "Number of messages to
send" AND COMES FROM "--messages" OR "-m" WITH DEFAULT 25*4' declares a
new coNCePTuaL variable called 'nummsgs'.  'nummsgs' is given the value
'100' ('25*4') by default.  However, if the user running the program
specifies, for example, '--messages=55' (or, equivalently, '-m 55'),
then 'nummsgs' will be given the value '55'.  The following is an
example of the output that might be produced if the program is run with
'--help' or '-?':

     Usage: a.out [OPTION...]
       -m, --messages=<number>     Number of messages to send [default: 100]
       -C, --comment=<string>      Additional commentary to write to the log
                                   file, @FILE to import commentary from FILE,
                                   or !COMMAND to import commentary from COMMAND
                                   (may be specified repeatedly)
       -L, --logfile=<string>      Log-file template [default: "a.out-%p.log"]
       -N, --no-trap=<string>      List of signals that should not be trapped
                                   [default: ""]

     Help options:
       -?, --help                  Show this help message
       --usage                     Display brief usage message

   The above is only an example.  Depending on what libraries were
available when the coNCePTuaL run-time system was configured, the output
could be somewhat different.  Also, long options may not be supported if
a suitable argument-processing library was not available at
configuration time.  The above example does indicate one way that help
strings could be formatted.  It also shows that the coNCePTuaL run-time
system reserves some command-line options for its own purposes.
Currently, these all use uppercase letters for their short forms so it
should be safe for programs to use any lowercase letter.


File: conceptual.info,  Node: Backend-specific declarations,  Prev: Command-line arguments,  Up: Header declarations

4.9.3 Backend-specific declarations
-----------------------------------

The 'BACKEND EXECUTES' statement (*note Injecting arbitrary code::)
provides support for executing non-coNCePTuaL code from a coNCePTuaL
program.  A related construct, 'BACKEND DECLARES', provides support for
embedding non-coNCePTuaL variable and function declarations in a
coNCePTuaL program:

<BACKEND_DECL>   ::=   'THE BACKEND DECLARES' <STRING>

   Like 'BACKEND EXECUTES', 'BACKEND DECLARES' produces nonportable
code.  Its use is therefore strongly discouraged.  However, 'BACKEND
DECLARES' and 'BACKEND EXECUTES' together help ensure that all of the
target language/library's features are available to coNCePTuaL.

   The following example uses 'BACKEND DECLARES' to declare a C global
variable and two C functions that access that variable:

     THE BACKEND DECLARES "
     int tally = 0;

     void increment_tally (void)
     {
       tally++;
     }

     void show_tally (char *msg)
     {
       printf(\"%s%d.\\n\", msg, tally);
     }
     ".

     FOR 3 REPETITIONS PLUS 2 WARMUP REPETITIONS {
       ALL TASKS src SEND A 512-BYTE MESSAGE TO TASK src+1 THEN
       ALL TASKS BACKEND EXECUTE "increment_tally();"
     } THEN
     TASK 0 BACKEND EXECUTES "show_tally(\"Tally is\\n==> \");".

The preceding code works only when using a C-based backend such as
'c_mpi' or 'c_udgram'.  Eliciting the same behavior from a Python-based
backend such as 'interpret' or 'latex_vis' requires a complete rewrite
of the coNCePTuaL code:

     THE BACKEND DECLARES "
     global tally
     tally = 0

     def increment_tally():
         global tally
         tally = tally + 1

     def show_tally(msg):
         global tally
         print \"%s%d.\\n\" % (msg, tally)
     "

     FOR 3 REPETITIONS PLUS 2 WARMUP REPETITIONS {
       ALL TASKS src SEND A 512-BYTE MESSAGE TO TASK src+1 THEN
       ALL TASKS BACKEND EXECUTE "increment_tally()"
     } THEN
     TASK 0 BACKEND EXECUTES "show_tally(\"Tally is\\n==> \")".

It is because of this need to rewrite programs for each set of backends
that 'BACKEND DECLARES' and 'BACKEND EXECUTES' should be used only when
absolutely necessary.


File: conceptual.info,  Node: Complete programs,  Next: Summary of the grammar,  Prev: Header declarations,  Up: Grammar

4.10 Complete programs
======================

A complete coNCePTuaL program consists of zero or more header
declarations (*note Header declarations::), each terminated with a '.',
followed by one or more complex statements (*note Complex statements::),
each also terminated with a '.'.  More formally, coNCePTuaL's top-level
nonterminal is the <PROGRAM>:

<PROGRAM>   ::=   (<VERSION_DECL> | <PARAM_DECL> | <BACKEND_DECL> ['.'])*
                  (<TOP_LEVEL_COMPLEX_STMT> ['.'])+

<TOP_LEVEL_COMPLEX_STMT>   ::=   <COMPLEX_STMT>

   Because a <COMPLEX_STMT> can reduce to a <SIMPLE_STMT>, the most
basic, complete coNCePTuaL program would be a <SIMPLE_STMT> with a
terminating period:

     ALL TASKS self OUTPUT "Hello from task " AND self AND "!".

A fuller example might contain multiple header declarations and multiple
<COMPLEX_STMT>s:

     # A complete coNCePTuaL program
     # By Scott Pakin <pakin@lanl.gov>

     REQUIRE LANGUAGE VERSION "1.5".

     maxval IS "Maximum value to loop to" AND COMES FROM "--maxval" OR
       "-v" WITH DEFAULT 100.

     step IS "Increment after each iteration" AND COMES FROM "--step" OR
       "-s" WITH DEFAULT 1.

     TASK 0 OUTPUTS "Looping from 0 to " AND maxval AND " by " AND step
       AND "...".

     FOR EACH loopvar IN {0, step, ..., maxval}
       TASK 0 OUTPUTS "    " AND loopvar.

     TASK 0 OUTPUTS "Wasn't that fun?".

   Technically, the '.' is optional; the language is unambiguous without
it.  However, for aesthetic purposes it is recommended that you
terminate sentences with a period, just like in a natural language.  An
exception would be when a <COMPLEX_STMT> ends with a curly brace.  The
'}.' syntax is unappealing so a simple '}' should be used instead.
*Note Examples::, for further examples.

* Menu:

* Top-level statements and log files::  One statement = one table in the log


File: conceptual.info,  Node: Top-level statements and log files,  Prev: Complete programs,  Up: Complete programs

Top-level statements and log files
----------------------------------

The reason that coNCePTuaL distinguishes between
<TOP_LEVEL_COMPLEX_STMT>s and <COMPLEX_STMT>s is that
<TOP_LEVEL_COMPLEX_STMT>s begin a new table in the log file (*note
Writing to a log file::) while <COMPLEX_STMT>s add columns to the
current table.  Consider the following piece of code:

     TASK 0 LOGS 111 AS "First" AND
                 222 AS "Second".

   Because 'First' and 'Second' are logged within the same <SIMPLE_STMT>
they appear in the log file within the same table but as separate
columns:

     "First","Second"
     "(all data)","(all data)"
     111,222

   The same rule holds when 'LOGS' is used repeatedly across
<SIMPLE_STMT>s but within the same <COMPLEX_STMT>:

     TASK 0 LOGS 111 AS "First" THEN
     TASK 0 LOGS 222 AS "Second".

   However, if 'First' and 'Second' are logged from separate
<TOP_LEVEL_COMPLEX_STMT>s, the coNCePTuaL run-time library stores them
in separate tables:

     TASK 0 LOGS 111 AS "First".
     TASK 0 LOGS 222 AS "Second".

     "First"
     "(all data)"
     111

     "Second"
     "(all data)"
     222


File: conceptual.info,  Node: Summary of the grammar,  Prev: Complete programs,  Up: Grammar

4.11 Summary of the grammar
===========================

The following is the complete grammar for the coNCePTuaL language.  The
EBNF productions appear here in the order that they were presented in
the rest of the chapter.

<EXPR>   ::=   <COND_EXPR>

<COND_EXPR>   ::=   <ADD_EXPR> 'IF' <REL_EXPR> 'OTHERWISE' <ADD_EXPR>

<ADD_EXPR>   ::=   <MULT_EXPR>
             |     <ADD_EXPR> '+' <MULT_EXPR>
             |     <ADD_EXPR> '-' <MULT_EXPR>
             |     <ADD_EXPR> '|' <MULT_EXPR>
             |     <ADD_EXPR> 'XOR' <MULT_EXPR>

<MULT_EXPR>   ::=   <UNARY_EXPR>
              |     <MULT_EXPR> '*' <UNARY_EXPR>
              |     <MULT_EXPR> '/' <UNARY_EXPR>
              |     <MULT_EXPR> 'MOD' <UNARY_EXPR>
              |     <MULT_EXPR> '>>' <UNARY_EXPR>
              |     <MULT_EXPR> '<<' <UNARY_EXPR>
              |     <MULT_EXPR> '&' <UNARY_EXPR>

<POWER_EXPR>   ::=   <PRIMARY_EXPR> ['**' <UNARY_EXPR>]

<UNARY_EXPR>   ::=   <POWER_EXPR>
               |     <UNARY_OPERATOR> <UNARY_EXPR>

<UNARY_OPERATOR>   ::=   '+' | '-' | 'NOT'

<PRIMARY_EXPR>   ::=   '(' <EXPR> ')'
                 |     <IDENT>
                 |     <INTEGER>
                 |     <FUNC_NAME> '(' <ENUMERATED_EXPRS> ')'
                 |     'REAL' '(' <EXPR> ')'

<ENUMERATED_EXPRS>   ::=   <EXPR> [',' <EXPR>]*

<FUNC_NAME>   ::=   'ABS' | 'BITS' | 'CBRT' | 'FACTOR10' | 'LOG10' | 'MAX' | 'MIN' | 'ROOT' | 'SQRT'
              |     'CEILING' | 'FLOOR' | 'ROUND'
              |     'TREE_PARENT' | 'TREE_CHILD'
              |     'KNOMIAL_PARENT' | 'KNOMIAL_CHILD' | 'KNOMIAL_CHILDREN'
              |     'MESH_NEIGHBOR' | 'MESH_COORDINATE' | 'MESH_DISTANCE'
              |     'RANDOM_UNIFORM' | 'RANDOM_GAUSSIAN'
              |     'RANDOM_POISSON' | 'RANDOM_PARETO'
              |     'PROCESSOR_OF' | 'TASK_OF'
              |     'FILE_DATA' | 'STATIC_FILE_DATA'

<AGGR_EXPR>   ::=   ['EACH'] <EXPR>
              |     'THE' <EXPR>
              |     'THE' <AGGR_FUNC> ['AND' 'THE' <AGGR_FUNC>]* ['OF' ['THE']] <EXPR>
              |     'A HISTOGRAM OF' ['THE'] <EXPR>

<AGGR_FUNC>   ::=   ['ARITHMETIC'] 'MEAN' | 'HARMONIC MEAN' | 'GEOMETRIC MEAN' | 'MEDIAN' |
                    'STANDARD DEVIATION' | 'VARIANCE' | 'MEDIAN ABSOLUTE DEVIATION' | 'SUM'
                    | 'MINIMUM' | 'MAXIMUM' | 'FINAL' | <EXPR> 'PERCENTILE'

<REL_EXPR>   ::=   <REL_DISJ_EXPR>

<REL_DISJ_EXPR>   ::=   [<REL_DISJ_EXPR> '\/'] <REL_CONJ_EXPR>

<REL_CONJ_EXPR>   ::=   [<REL_CONJ_EXPR> '/\'] <REL_PRIMARY_EXPR>

<REL_PRIMARY_EXPR>   ::=   <EQ_EXPR>
                     |     '(' <REL_EXPR> ')'

<EQ_EXPR>   ::=   <EXPR> '=' <EXPR>
            |     <EXPR> '<' <EXPR>
            |     <EXPR> '>' <EXPR>
            |     <EXPR> '<=' <EXPR>
            |     <EXPR> '>=' <EXPR>
            |     <EXPR> '<>' <EXPR>
            |     <EXPR> 'DIVIDES' <EXPR>
            |     <EXPR> 'IS EVEN'
            |     <EXPR> 'IS ODD'
            |     <EXPR> 'IS IN' <RANGE> [',' <RANGE>]*
            |     <EXPR> 'IS NOT IN' <RANGE> [',' <RANGE>]*

<RANGE>   ::=   '{' <EXPR> [',' <EXPR>]* [', ... ,' <EXPR>] '}'
          |     '{' <EXPR> ['FOR EACH' <IDENT> 'IN' <RANGE> [',' <RANGE>]* ]+
                    ['WHERE' <REL_EXPR>] '}'

<RESTRICTED_IDENT>   ::=   <IDENT> 'SUCH THAT' <REL_EXPR>

<SOURCE_TASK>   ::=   'ALL TASKS'
                |     'ALL TASKS' <IDENT>
                |     'TASK' <EXPR>
                |     'TASKS' <RESTRICTED_IDENT>
                |     'TASK' 'GROUP' <IDENT>
                |     'TASKS' <RANGE> [',' <RANGE>]*

<TARGET_TASKS>   ::=   'ALL OTHER TASKS'
                 |     'TASK' <EXPR>
                 |     'TASKS' <RESTRICTED_IDENT>
                 |     'TASK' 'GROUP' <IDENT>
                 |     'TASKS' <RANGE> [',' <RANGE>]*

<MESSAGE_SPEC>        ::=   <ITEM_COUNT>
                            ['NONUNIQUE' | 'UNIQUE']
                            <ITEM_SIZE>
                            ['UNALIGNED' |
                             <MESSAGE_ALIGNMENT> 'ALIGNED' |
                             <MESSAGE_ALIGNMENT> 'MISALIGNED']
                            'MESSAGES'
                            ['WITH VERIFICATION' | 'WITH DATA TOUCHING' |
                             'WITHOUT VERIFICATION' | 'WITHOUT DATA TOUCHING']
                            ['USING TAG'
                             <EXPR> | <STRING>]
                            ['FROM' [<EXPR> <DATA_MULTIPLIER> 'INTO']
                             'BUFFER' <EXPR> | 'THE DEFAULT BUFFER']

<RECV_MESSAGE_SPEC>   ::=   ['SYNCHRONOUSLY' | 'ASYNCHRONOUSLY']
                            ['AS' ['A'|'AN']
                             ['NONUNIQUE' | 'UNIQUE']
                             ['UNALIGNED' |
                              <MESSAGE_ALIGNMENT> 'ALIGNED' |
                              <MESSAGE_ALIGNMENT> 'MISALIGNED']
                             'MESSAGES']
                            ['WITH VERIFICATION' | 'WITH DATA TOUCHING' |
                             'WITHOUT VERIFICATION' | 'WITHOUT DATA TOUCHING']
                            ['USING TAG'
                             <EXPR> | <STRING>]
                            ['INTO' [<EXPR> <DATA_MULTIPLIER> 'INTO']
                             'BUFFER' <EXPR> | 'THE DEFAULT BUFFER']

<REDUCE_MESSAGE_SPEC>   ::=   <ITEM_COUNT>
                              ['NONUNIQUE' | 'UNIQUE']
                              ['UNALIGNED' |
                               <MESSAGE_ALIGNMENT> 'ALIGNED' |
                               <MESSAGE_ALIGNMENT> 'MISALIGNED']
                              'INTEGERS' | 'DOUBLEWORDS'
                              ['WITH DATA TOUCHING' | 'WITHOUT DATA TOUCHING']
                              ['USING TAG'
                               <EXPR> | <STRING>]
                              ['FROM' [<EXPR> <DATA_MULTIPLIER> 'INTO']
                               'BUFFER' <EXPR> | 'THE DEFAULT BUFFER']

<REDUCE_TARGET_MESSAGE_SPEC>   ::=   ['AS' <ITEM_COUNT>
                                      ['NONUNIQUE' | 'UNIQUE']
                                      [<MESSAGE_ALIGNMENT> 'ALIGNED' |
                                       <MESSAGE_ALIGNMENT> 'MISALIGNED']
                                      'INTEGERS' | 'DOUBLEWORDS']
                                     ['WITH DATA TOUCHING' | 'WITHOUT DATA TOUCHING']
                                     ['USING TAG'
                                      <EXPR> | <STRING>]
                                     ['INTO' [<EXPR> <DATA_MULTIPLIER> 'INTO']
                                      'BUFFER' <EXPR> | 'THE DEFAULT BUFFER']

<ITEM_COUNT>   ::=   'A' | 'AN' | <EXPR>

<ITEM_SIZE>   ::=   <empty>
              |     <EXPR> <DATA_MULTIPLIER>
              |     <DATA_TYPE> 'SIZED'

<DATA_MULTIPLIER>   ::=   'BIT' | 'BYTE' | 'HALFWORD' | 'WORD' | 'INTEGER' | 'DOUBLEWORD' |
                          'QUADWORD' | 'PAGE' | 'KILOBYTE' | 'MEGABYTE' | 'GIGABYTE'

<DATA_TYPE>   ::=   'BYTE' | 'HALFWORD' | 'WORD' | 'INTEGER' | 'DOUBLEWORD' |
                    'QUADWORD' | 'PAGE'

<MESSAGE_ALIGNMENT>   ::=   <DATA_TYPE>
                      |     <EXPR> <DATA_MULTIPLIER>

<SEND_STMT>   ::=   <SOURCE_TASK>
                    ['ASYNCHRONOUSLY'] 'SENDS'
                    <MESSAGE_SPEC>
                    'TO' ['UNSUSPECTING'] <TARGET_TASKS>
              |     <SOURCE_TASK>
                    ['ASYNCHRONOUSLY'] 'SENDS'
                    <MESSAGE_SPEC>
                    'TO' <TARGET_TASKS>
                    'WHO RECEIVE IT'
                    <RECV_MESSAGE_SPEC>

<RECEIVE_STMT>   ::=   <TARGET_TASKS>
                       ['ASYNCHRONOUSLY'] 'RECEIVE'
                       <MESSAGE_SPEC>
                       'FROM' <SOURCE_TASK>

<WAIT_STMT>   ::=   <SOURCE_TASK>
                    'AWAITS COMPLETION'

<MCAST_STMT>    ::=   <SOURCE_TASK>
                      ['ASYNCHRONOUSLY'] 'MULTICASTS'
                      <MESSAGE_SPEC>
                      'TO' <TARGET_TASKS>

<REDUCE_STMT>   ::=   <SOURCE_TASK>
                      'REDUCES'
                      <REDUCE_MESSAGE_SPEC>
                      'TO' <SOURCE_TASK>
                      ['WHO RECEIVES THE RESULT' <REDUCE_TARGET_MESSAGE_SPEC>]
                |     <SOURCE_TASK>
                      'REDUCES'
                      <REDUCE_MESSAGE_SPEC>
                      ['TO' <REDUCE_MESSAGE_SPEC>]

<SYNC_STMT>   ::=   <SOURCE_TASK>
                    'SYNCHRONIZES'

<STRING_OR_LOG_COMMENT>   ::=   <STRING>
                          |     'THE VALUE OF' <STRING>

<OUTPUT_STMT>   ::=   <SOURCE_TASK>
                      'OUTPUTS'
                      <EXPR> | <STRING_OR_LOG_COMMENT>
                      ['AND'   <EXPR> | <STRING_OR_LOG_COMMENT>]*

<LOG_STMT>   ::=   <SOURCE_TASK>
                   'LOGS'
                   <AGGR_EXPR> 'AS' <STRING_OR_LOG_COMMENT>
                   ['AND' <AGGR_EXPR> 'AS' <STRING_OR_LOG_COMMENT>]*

<FLUSH_STMT>   ::=   <SOURCE_TASK>
                     'COMPUTES AGGREGATES'

<RESET_STMT>   ::=   <SOURCE_TASK>
                     'RESETS ITS COUNTERS'

<STORE_STMT>   ::=   <SOURCE_TASK>
                     'STORES ITS COUNTERS'

<RESTORE_STMT>   ::=   <SOURCE_TASK>
                       'RESTORES ITS COUNTERS'

<COMPLEX_STMT>   ::=   <SIMPLE_STMT> ['THEN' <COMPLEX_STMT>]

<SIMPLE_STMT>   ::=   'FOR' <EXPR> 'REPETITIONS' ['PLUS' <EXPR> 'WARMUP' 'REPETITIONS'
                      ['AND A SYNCHRONIZATION']] <SIMPLE_STMT>
                |     'FOR EACH' <IDENT> 'IN' <RANGE> [',' <RANGE>]* <SIMPLE_STMT>
                |     'FOR' <EXPR> <TIME_UNIT> ['PLUS' <EXPR> 'WARMUP' <TIME_UNIT>
                      ['AND A SYNCHRONIZATION']] <SIMPLE_STMT>
                |     'LET' <LET_BINDING> ['AND' <LET_BINDING>]* 'WHILE' <SIMPLE_STMT>
                |     'IF' <REL_EXPR> 'THEN' <SIMPLE_STMT> ['OTHERWISE' <SIMPLE_STMT>]
                |     '{' [<COMPLEX_STMT>] '}'
                |     <SEND_STMT>
                |     <RECEIVE_STMT>
                |     <WAIT_STMT>
                |     <MCAST_STMT>
                |     <REDUCE_STMT>
                |     <SYNC_STMT>
                |     <OUTPUT_STMT>
                |     <LOG_STMT>
                |     <FLUSH_STMT>
                |     <RESET_STMT>
                |     <STORE_STMT>
                |     <RESTORE_STMT>
                |     <ASSERT_STMT>
                |     <DELAY_STMT>
                |     <TOUCH_STMT>
                |     <TOUCH_BUFFER_STMT>
                |     <PROCESSOR_STMT>
                |     <BACKEND_STMT>

<LET_BINDING>   ::=   <IDENT> 'BE'       expr
                                     |   <SOURCE_TASK>
                                     |   'A RANDOM TASK' [<RANDOM_TASK_CONSTRAINTS>]

<RANDOM_TASK_CONSTRAINTS>   ::=   'OTHER THAN' <EXPR>
                            |     'LESS THAN' <EXPR> ['BUT NOT' <EXPR>]
                            |     'GREATER THAN' <EXPR> ['BUT NOT' <EXPR>]
                            |     'IN' '[' <EXPR> ',' <EXPR> ']' ['BUT NOT' <EXPR>]

<IF_STMT>   ::=   'IF' <REL_EXPR>
                  'THEN' <SIMPLE_STMT>
                  ['OTHERWISE' <SIMPLE_STMT>]

<ASSERT_STMT>   ::=   'ASSERT THAT' <STRING>
                      'WITH' <REL_EXPR>

<DELAY_STMT>   ::=   <SOURCE_TASK>
                     'SLEEPS' | 'COMPUTES'
                     'FOR' <EXPR> <TIME_UNIT>

<TIME_UNIT>   ::=   'MICROSECONDS' | 'MILLISECONDS' | 'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS'

<TOUCH_STMT>   ::=   <SOURCE_TASK>
                     'TOUCHES'
                     [<EXPR> <DATA_TYPE> 'OF']
                     'AN' <ITEM_SIZE> 'MEMORY REGION'
                     [<EXPR> 'TIMES']
                     ['WITH STRIDE' <EXPR> <DATA_TYPE> | 'WITH RANDOM STRIDE']

<TOUCH_BUFFER_STMT>   ::=   <SOURCE_TASK>
                            'TOUCHES'
                                'ALL MESSAGE BUFFERS'
                              | 'MESSAGE BUFFER' <EXPR>
                              | 'THE CURRENT MESSAGE BUFFER'

<PROCESSOR_STMT>   ::=   <SOURCE_TASK>
                         'IS ASSIGNED TO'
                         'PROCESSOR' <EXPR> | 'A RANDOM PROCESSOR'

<BACKEND_STMT>   ::=   <SOURCE_TASK>
                       'BACKEND EXECUTES'
                       <EXPR> | <STRING>
                       ['AND' <EXPR> | <STRING>]*

<VERSION_DECL>   ::=   'REQUIRE LANGUAGE VERSION' <STRING>

<PARAM_DECL>   ::=   <IDENT>
                     'IS' <STRING>
                     'AND COMES FROM' <STRING> 'OR' <STRING>
                     'WITH DEFAULT' <EXPR>

<BACKEND_DECL>   ::=   'THE BACKEND DECLARES' <STRING>

<PROGRAM>   ::=   (<VERSION_DECL> | <PARAM_DECL> | <BACKEND_DECL> ['.'])*
                  (<TOP_LEVEL_COMPLEX_STMT> ['.'])+

<TOP_LEVEL_COMPLEX_STMT>   ::=   <COMPLEX_STMT>


   The primitives <IDENT>, <STRING>, and <INTEGER> are described in
*note Primitives::.


File: conceptual.info,  Node: Examples,  Next: Implementation,  Prev: Grammar,  Up: Top

5 Examples
**********

This chapter presents a variety of examples of complete coNCePTuaL
programs.  The purpose is to put in context the grammatical elements
described in *note Grammar:: and also to illustrate coNCePTuaL's power
and expressiveness.

* Menu:

* Latency::                     Measure half the round-trip message latency
* Hot potato::                  Send a message around a ring
* Hot spot::                    Bombard task 0 with messages
* Multicast trees::             Multicast over various k-nomial trees
* Calling MPI functions::       Invoking MPI_Allgather() from coNCePTuaL


File: conceptual.info,  Node: Latency,  Next: Hot potato,  Prev: Examples,  Up: Examples

5.1 Latency
===========

One of the most common network performance benchmarks is a ping-pong
latency test.  Not surprisingly, such a test is straightforward to
implement in coNCePTuaL:

     # A ping-pong latency test written in coNCePTuaL

     Require language version "1.5".

     # Parse the command line.
     reps is "Number of repetitions of each message size" and comes from
      "--reps" or "-r" with default 1000.
     maxbytes is "Maximum number of bytes to transmit" and comes from
      "--maxbytes" or "-m" with default 1M.

     # Ensure the we have a peer with whom to communicate.
     Assert that "the latency test requires at least two tasks" with
       num_tasks>=2.

     # Perform the benchmark.
     For each msgsize in {0}, {1, 2, 4, ..., maxbytes} {
       for reps repetitions {
         task 0 resets its counters then
         task 0 sends a msgsize byte message to task 1 then
         task 1 sends a msgsize byte message to task 0 then
         task 0 logs the msgsize as "Bytes" and
                     the median of elapsed_usecs/2 as "1/2 RTT (usecs)"
       } then
       task 0 computes aggregates
     }

   Note that the outer 'FOR' loop specifies two <RANGE>s (*note Range
expressions::).  This is because '{0, 1, 2, 4, ..., maxbytes}' is not a
geometric progression.  Hence, that incorrect <RANGE> is split into the
singleton '{0}' and the geometric progression '{1, 2, 4, ...,
maxbytes}'.


File: conceptual.info,  Node: Hot potato,  Next: Hot spot,  Prev: Latency,  Up: Examples

5.2 Hot potato
==============

One way to measure performance variance on a parallel system is with a
"hot potato" test.  The idea is that the tasks send a message in a ring
pattern, then the first task logs the minimum, mean, and variance of the
per-hop latency.  Ideally, the minimum should equal the mean and these
should both maintain a constant value as the number of tasks increases.
Also, the variance should be small and constant.  The following
coNCePTuaL code implements a hot-potato test.

     # Virtual ring "hot potato" test

     Require language version "1.5".

     trials is "Number of trials to perform" and comes from "--trials" or
       "-t" with default 100000.

     Assert that "the hot-potato test requires at least two tasks" with
       num_tasks>=2.

     Let len be 0 while {
       for each task_count in {2, ..., num_tasks} {
         task 0 outputs "Performing " and trials and " " and
                        task_count and "-task runs...." then
         for trials repetitions plus 5 warmup repetitions {
           task 0 resets its counters then
           task 0 sends a len byte message to unsuspecting task 1 then
           task (n+1) mod task_count receives a len byte message from task
             n such that n<task_count then
           task n such that n>0 /\ n<task_count sends a len byte message
             to unsuspecting task (n+1) mod task_count then
           task 0 logs the task_count as "# of tasks" and
                       the minimum of elapsed_usecs/task_count as
                         "Latency (usecs)" and
                       the mean of elapsed_usecs/task_count as
                         "Latency (usecs)" and
                       the variance of elapsed_usecs/task_count as
                         "Latency (usecs)"
         } then
         task 0 computes aggregates
       }
     }

   All tasks receive from their left neighbor and send to their right
neighbor.  However, in order to avoid a deadlock situation, task 0 sends
then receives while all of the other tasks receive then send.


File: conceptual.info,  Node: Hot spot,  Next: Multicast trees,  Prev: Hot potato,  Up: Examples

5.3 Hot spot
============

Different systems react differently to resource contention.  A hot-spot
test attempts to measure the performance degradation that occurs when a
task is flooded with data.  That is, all tasks except 0 concurrently
send a batch of messages to task 0.  Task 0 reports the incoming
bandwidth, i.e., the number of bytes it received divided by the time it
took to receive that many bytes.  The two independent variables are the
message size and the number of tasks.

     # Hot-spot bandwidth

     Require language version "1.5".

     maxbytes is "Maximum message size in bytes" and comes from
       "--maxbytes" or "-x" with default 1024.
     numtrials is "Number of bursts of each size" and comes from "--trials"
       or "-t" with default 100.
     burst is "Number of messages in each burst" and comes from
       "--burstsize" or "-b" with default 1000.

     Assert that "the hot-spot test requires at least two tasks" with
       num_tasks>=2.

     For each maxtask in {2, ..., num_tasks}
       for each msgsize in {1, 2, 4, ..., maxbytes} {
         task 0 outputs "Performing " and numtrials and " " and
                        maxtask and "-task trials with " and
                        msgsize and "-byte messages" then
         for numtrials repetitions plus 3 warmup repetitions {
           task 0 resets its counters then
           task sender such that sender>0 /\ sender<maxtask asynchronously
             sends burst msgsize byte messages to task 0 then
           all tasks await completion then
           task 0 logs the maxtask as "Tasks" and
                       the msgsize as "Message size (B)" and
                       the mean of (1E6*bytes_received)/(1M*elapsed_usecs)
                         as "Incoming BW (MB/s)"
         } then
         task 0 computes aggregates
       }


File: conceptual.info,  Node: Multicast trees,  Next: Calling MPI functions,  Prev: Hot spot,  Up: Examples

5.4 Multicast trees
===================

It may be worth comparing the performance of a native multicast
operation to the performance achieved by multicasting over a K-nomial
tree to gauge how well the underlying communication layer implements
multicasts.  The following code records a wealth of data, varying the
tree arity (i.e., K), the number of tasks receiving the multicast, and
the message size.  It provides a good demonstration of how to use the
'KNOMIAL_CHILDREN' and 'KNOMIAL_CHILD' functions.

     # Test the performance of multicasting over various k-nomial trees
     # By Scott Pakin <pakin@lanl.gov>

     Require language version "1.5".

     # Parse the command line.
     minsize is "Min. message size (bytes)" and comes from "--minbytes" or "-n"
       with default 1.
     maxsize is "Max. message size (bytes)" and comes from "--maxbytes" or "-x"
       with default 1M.
     reps is "Repetitions to perform" and comes from "--reps" or "-r" with
       default 100.
     maxarity is "Max. arity of the tree" and comes from "--maxarity" or "-a"
       with default 2.

     Assert that "this program requires at least two processors" with
       num_tasks>=2.

     # Send messages from task 0 to 1, 2, 3, ... other tasks in a k-nomial tree.
     For each arity in {2, ..., maxarity} {
       for each num_targets in {1, ..., num_tasks-1} {
         for each msgsize in {minsize, minsize*2, minsize*4, ..., maxsize} {
           task 0 outputs "Multicasting a " and msgsize and "-byte message to "
             and num_targets and " target(s) over a " and arity and
             "-nomial tree ..." then
           for reps repetitions {
             task 0 resets its counters then
             for each src in {0, ..., num_tasks}
               for each dstnum in {0, ..., knomial_children(src, arity,
                   num_targets+1)}
                 task src sends a msgsize byte message to task
                   knomial_child(src, dstnum, arity) then
             all tasks synchronize then
             task 0 logs the arity as "k-nomial arity" and
                         the num_targets as "# of recipients" and
                         the msgsize as "Message size (bytes)" and
                         the median of (1E6/1M)*(msgsize/elapsed_usecs) as
                           "Incoming bandwidth (MB/s)" and
                         the median of (num_targets*msgsize/elapsed_usecs)*
                           (1E6/1M) as "Outgoing bandwidth (MB/s)"
           } then
           task 0 computes aggregates
         }
       }
     }


File: conceptual.info,  Node: Calling MPI functions,  Prev: Multicast trees,  Up: Examples

5.5 Calling MPI functions
=========================

The coNCePTuaL language is designed to be highly portable.  Any
coNCePTuaL program can be compiled using any of the backends listed in
*note Supplied backends::.  A consequence of this portability is that
coNCePTuaL does not include primitives that are specific to any
particular target language or communication library.

   The 'BACKEND EXECUTES' and 'BACKEND DECLARES' statements (*note
Injecting arbitrary code::, and *note Backend-specific declarations::)
give a programmer the ability to sacrifice portability for the ability
to measure the performance of features provided by a specific target
language or communication library.  Hence, it is possible to write the
core parts of a benchmark in a lower-level language while letting
coNCePTuaL handle the setup, measurement, logging, and other mundane
operations.

   The following program uses 'BACKEND EXECUTES' to measure the
performance of the 'MPI_Allgather()' function provided by an MPI
library.  Because it utilizes C code to call an MPI function, the code
builds only with the 'c_mpi' backend.

     # Measure the performance of MPI_Allgather()
     # By Scott Pakin <pakin@lanl.gov>
     #
     # N.B. Requires the c_mpi backend.

     Require language version "1.5".

     # Parse the command line.
     numwords is "Message size (words)" and comes from "--msgsize" or "-s" with
     default 1.

     # Allocate a send buffer and a receive buffer.
     Task 0 multicasts a numwords-word message from buffer 0 to all other tasks.
     Task 0 multicasts a numwords*num_tasks word message from buffer 1 to all
     other tasks.

     # Measure the performance of MPI_Allgather().
     Task 0 resets its counters then
     for 100 repetitions plus 3 warmup repetitions
       all tasks backend execute "
         MPI_Allgather([MESSAGE BUFFER 0], (int)" and numwords and ", MPI_INT,
                       [MESSAGE BUFFER 1], (int)" and numwords and ", MPI_INT,
                       MPI_COMM_WORLD);
       " then
     task 0 logs elapsed_usecs/100 as "Gather time (us)".

   The preceding code demonstrates a few useful techniques:

   * A pair of 'MULTICASTS' statements (*note Multicasting::) are used
     to allocate the two message buffers.

   * The 'BACKEND EXECUTE' statement uses a value provided on the
     command line ('numwords', via '--msgsize') in the call to
     'MPI_Allgather()'.

   * Pointers to the two message buffers are passed to 'MPI_Allgather()'
     using the '[MESSAGE BUFFER EXPR]' substitution described in *note
     Injecting arbitrary code::.


File: conceptual.info,  Node: Implementation,  Next: Tips and Tricks,  Prev: Examples,  Up: Top

6 Implementation
****************

coNCePTuaL could have been implemented as a benchmarking library instead
of as a special-purpose language.  In addition to improved readability
and the practicality of including entire source programs in every log
file, one advantage of the language approach is that the same coNCePTuaL
source code can be used to compare the performance of multiple
communication libraries.  A compiler command-line option selects a
particular backend module to use to generate code.  Each backend outputs
code for a different combination of low-level language and communication
library.

   The coNCePTuaL compiler is structured into a pipeline of modules.
Thus, the backend can be replaced without altering the front end, lexer,
or parser modules.  coNCePTuaL ensures consistency across backends by
providing a run-time library that generated code can link to.  The
run-time library encapsulates many of the mundane tasks a network
correctness or performance test needs to perform.

* Menu:

* Overview::                    Summary of coNCePTuaL's construction
* Backend creation::            How to write a new compiler backend
* Run-time library functions::  Description of functions used by backends


File: conceptual.info,  Node: Overview,  Next: Backend creation,  Prev: Implementation,  Up: Implementation

6.1 Overview
============

* Menu:

* Compiler::                    Components of the coNCePTuaL compiler
* Run-time library::            The library commonly linked to generated programs
* Build process::               How coNCePTuaL itself is configured and built


File: conceptual.info,  Node: Compiler,  Next: Run-time library,  Prev: Overview,  Up: Overview

Compiler
--------

The coNCePTuaL compiler is written in Python and is based on the PLY
(Python Lex-Yacc) compiler framework.  Compiler execution follows a
basic pipeline structure.  Compilation starts with the top-level file
('ncptl.py'), which processes the command line then transfers control to
the lexer ('ncptl_lexer.py').  The lexer inputs coNCePTuaL source code
and outputs a stream of tokens ('ncptl_token.py').  Next, the parser
('ncptl_parser.py') finds structure in those tokens based on
coNCePTuaL's grammatical rules and outputs an abstract syntax tree
('ncptl_ast.py').  Finally, the code generator
('codegen_LANGUAGE_LIBRARY.py') that was designated on the command line
walks the abstract syntax tree, converting it to code in the target
language and for the target communication library.


File: conceptual.info,  Node: Run-time library,  Next: Build process,  Prev: Compiler,  Up: Overview

Run-time library
----------------

coNCePTuaL makes a large run-time library ('runtimelib.c') available to
generated programs.  The coNCePTuaL run-time library, which is written
in C, provides consistent functionality across target languages and
communication layers as well as across hardware architectures and
operating systems.  The library also simplifies code generation by
implementing functions for such tasks as memory allocation, queue
management, and data logging.  The functions in this library are
described in *note Run-time library functions::.


File: conceptual.info,  Node: Build process,  Prev: Run-time library,  Up: Overview

Build process
-------------

coNCePTuaL is built using the GNU Autotools (Autoconf, Automake, and
Libtool).  Consequently, changes should be made to original files, not
generated files.  Specifically, 'configure.ac' and 'acinclude.m4' should
be edited in place of 'configure'; 'ncptl.h.in' should be edited in
place of 'ncptl.h'; and, the various 'Makefile.am' files should be
edited in place of the corresponding 'Makefile's.  For information about
how these various tools operate, *note (autoconf)Top::, *note
(automake)Top::, and *note (libtool)Top::.

   If 'configure' is given the '--enable-maintainer-mode' option, 'make'
will automatically re-run 'aclocal', 'autoheader', 'automake',
'autoconf', and/or './configure' as needed.  Developers who plan to
modify any of the "maintainer" files ('acinclude.m4', 'configure.ac',
and the various 'Makefile.am' files) are strongly encouraged to
configure coNCePTuaL with '--enable-maintainer-mode' in order to ensure
that the build process is kept current with any changes.


File: conceptual.info,  Node: Backend creation,  Next: Run-time library functions,  Prev: Overview,  Up: Implementation

6.2 Backend creation
====================

The coNCePTuaL compiler's backend generates code from an abstract syntax
tree (AST). The compiler was designed to support a variety of code
generators, each targeting a particular programming language and
communication library.  There are two ways to create a new coNCePTuaL
backend.  Either a 'codegen_LANGUAGE_LIBRARY.py' backend supporting an
arbitrary language and communication library can be written from scratch
or a C-based 'codegen_c_LIBRARY.py' backend can be derived from
'codegen_c_generic.py'.

   In the former case, the backend must define an 'NCPTL_CodeGen' class.
'NCPTL_CodeGen' class must contain a 'generate' method with the
following signature:

     def generate(self, ast, filesource='<stdin>', filetarget='-',
                  sourcecode=None):

That is, 'generate' takes as arguments a class object, the root of an
abstract-syntax tree (as defined in 'ncptl_ast.py'), the name of the
input file containing coNCePTuaL code (to be used for outputting error
messages), the name of the output file to produce, and the complete
coNCePTuaL source code (which is both stored in prologue comments and
passed to the run-time library). 'generate' should invoke
'self.postorder_traversal' to traverse the AST in a post-order fashion,
calling various code-generating methods as it proceeds.  The
'NCPTL_CodeGen' must implement all of the methods listed in *note Method
calls::, each of which corresponds to some component of the coNCePTuaL
grammar.  Each method takes a "self" class object an a node of the AST
(of type 'AST').

   The compiler front-end, 'ncptl', invokes the following two methods,
which must be defined by the backend's 'NCPTL_CodeGen' class:

     def compile_only(self, progfilename, codelines, outfilename,
                      verbose, keepints):

     def compile_and_link(self, progfilename, codelines, outfilename,
                          verbose, keepints):

The 'compile_only' method compiles the backend-specific code into an
object file.  The 'compile_and_link' method compiles the
backend-specific code into an object file and links it into an
executable file.  For some backends, the notions of "compile" and "link"
may not be appropriate.  In that situation, the backend should perform
the closest meaningful operations.  For example, the 'dot_ast' backend
(*note The dot_ast backend::) compiles to a '.dot' file and links into
the target graphics format ('.ps' by default).

   For both the 'compile_only' and 'compile_and_link' methods,
'progfilename' is the name of the coNCePTuaL input file specified on the
'ncptl' command line or the string '<command line>' if a program was
specified literally with '--program'.  'codelines' is the output from
the 'generate' method, i.e., a list of lines of backend-specific code.
'outfilename' is the name of the target file specified on the 'ncptl'
command line with '--output' or the string '-' if '--output' was not
used.  If 'verbose' is '1', the method should write each operation it
plans to perform to the standard-error device.  For consistency, comment
lines should begin with '#'; shell commands should be output verbatim.
If 'verbose' is '0', corresponding to the 'ncptl' '--quiet' option, the
method should output nothing but error messages.  Finally, 'keepints'
corresponds to the '--keep-ints' option to 'ncptl'.  If equal to '0',
all intermediate files should be deleted before returning; if equal to
'1', intermediate files should be preserved.  *Note Compiling coNCePTuaL
programs::, for a description of the various command-line options to
'ncptl'.

   As long as 'NCPTL_CodeGen' implements all of the required functions
it is free to generate code in any way that it sees fit.  However, *note
Method calls::, lists a large number of methods, many of which will be
identical across multiple code generators for the same language but
different communication libraries.  To simplify a common case, C plus
some messaging library, coNCePTuaL provides 'codegen_c_generic.py', to
which the remainder of the Implementation chapter is devoted to
explaining.

* Menu:

* Hook methods::                Injecting code at strategic locations
* A minimal C-based backend::   How to write a trivial, sequential-only backend
* Generated code::              The generated C code's basic structure
* Internals::                   Key parts of codegen_c_generic.py


File: conceptual.info,  Node: Hook methods,  Next: A minimal C-based backend,  Prev: Backend creation,  Up: Backend creation

6.2.1 Hook methods
------------------

Multiple code generators for the same language but different
communication libraries are apt to contain much code in common.  Because
C is a popular language, coNCePTuaL provides a 'codegen_c_generic.py'
module that implements a virtual 'NCPTL_CodeGen' base class.  This base
class implements all of the methods listed in *note Method calls::.
However, rather than support a particular communication library, the
'codegen_c_generic.py' implementation of 'NCPTL_CodeGen' merely provides
a number of calls to "hook" methods--placeholders that implement
library-specific functionality.  *Note C hooks::, for a list of all of
the hooks that 'codegen_c_generic.py' defines.  For clarity, hooks are
named after the method from which they're called but with an
all-uppercase tag appended.  Hook methods take a single parameter, a
read-only dictionary (the result of invoking Python's 'locals()'
function) of all of the local variables in the caller's scope.  They
return C code in the form of a list with one line of C per element.  A
hook method is invoked only if it exists, which gives the backend
developer some flexibility in selecting places at which to insert code.
Of course, for coarser-grained control, a backend developer can override
complete methods in 'codegen_c_generic.py' if desired.  Generally, this
will not be necessary as hook invocations are scattered liberally
throughout the file.

An example
..........

'codegen_c_generic.py' defines a method named
'code_specify_include_files'.  ('codegen_c_generic.py' names all of its
code-generating helper methods 'code_SOMETHING'.)
'code_specify_include_files' pushes a sequence of '#include' directives
onto a queue of lines of C code.  The method is shown below in its
entirety:

     def code_specify_include_files(self, node):
         "Load all of the C header files the generated code may need."

         # Output a section comment.
         self.pushmany([
             "/*****************",
             " * Include files *",
             " *****************/",
             ""])

         # Enable hooks both before and after the common includes.
         self.pushmany(self.invoke_hook("code_specify_include_files_PRE",
                                        locals(),
                                        before=[
             "/* Header files specific to the %s backend */" %
             self.backend_name],
                                        after=[""]))
         self.pushmany([
             "/* Header files needed by all C-based backends */",
             "#include <stdio.h>",
             "#include <string.h>",
             "#include <ncptl/ncptl.h>"])
         self.pushmany(self.invoke_hook("code_specify_include_files_POST",
                                        locals(),
                                        before=[
             "",
             "/* Header files specific to the %s backend */" %
             self.backend_name]))

   'code_specify_include_files' uses the 'pushmany' method (*note
Internals::) to push each element in a list of lines of C code onto the
output queue.  It starts by pushing a section
comment--'codegen_c_generic.py' outputs fully commented C code.  Next,
it invokes the 'code_specify_include_files_PRE' hook if it exists and
pushes that method's return value onto the queue.  Then, it pushes all
of the '#include's needed by the generated C code.  Finally, it invokes
the 'code_specify_include_files_POST' hook if it exists and pushes that
method's return value onto the queue.

   A backend that requires additional header files from those included
by 'code_specify_include_files' need only define
'code_specify_include_files_PRE' to add extra header files before the
standard ones or 'code_specify_include_files_POST' to add extra header
files after them.  The following is a sample (hypothetical) hook
definition:

     def code_specify_include_files_POST(self, localvars):
         "Specify extra header files needed by the c_pthreads backend."
         return [
             "#include <errno.h>",
             "#include <pthread.h>"]

   Although the top-level structure of 'codegen_c_generic.py' is
described in *note Internals::, a backend developer will normally need
to study the 'codegen_c_generic.py' source code to discern the purpose
of each hook method and its relation to the surrounding code.


File: conceptual.info,  Node: A minimal C-based backend,  Next: Generated code,  Prev: Hook methods,  Up: Backend creation

6.2.2 A minimal C-based backend
-------------------------------

A backend derived from 'codegen_c_generic.py' starts by defining an
'NCPTL_CodeGen' child class that inherits much of its functionality from
the parent 'NCPTL_CodeGen' class.  There are only two items that a
C-based backend _must_ define: 'backend_name', the name of the backend
in the form 'c_LIBRARY'; and, 'backend_desc', a brief phrase describing
the backend.  (These are used for error messages and file comments.)
Also, a backend's '__init__' method must accept an 'options' parameter,
which is given a list of command-line parameters not recognized by
'ncptl.py'.  After 'NCPTL_CodeGen''s '__init__' method processes the
entries in 'options' that it recognizes, it should pass the remaining
options to its parent class's '__init__' method for further processing.
(For proper initialization, the parent class's '__init__' method must be
called, even if there are no remaining options to process.)

   The following is the complete source code to a minimal coNCePTuaL
backend.  This backend, 'codegen_c_seq.py', supports only sequential
coNCePTuaL programs (e.g., 'TASK 0 OUTPUTS "Hello, world!"'); any
attempt to use communication statements (*note Communication
statements::) will result in a compile-time error.

     #! /usr/bin/env python

     #######################################################
     # Code generation module for the coNCePTuaL language: #
     # Minimal C-based backend -- all communication        #
     # operations result in a compiler error               #
     #                                                     #
     # By Scott Pakin <pakin@lanl.gov>                     #
     #######################################################

     import codegen_c_generic

     class NCPTL_CodeGen(codegen_c_generic.NCPTL_CodeGen):
         def __init__(self, options):
             "Initialize the sequential C code generation module."
             self.backend_name = "c_seq"
             self.backend_desc = "C, sequential code only"
             codegen_c_generic.NCPTL_CodeGen.__init__(self, options)

             # We don't have our own command-line options but we handle
             # --help, nevertheless.
             for arg in range(0, len(options)):
                 if options[arg] == "--help":
                     # Output a help message.
                     self.show_help()
                     raise SystemExit, 0

   The 'c_seq' backend can be used like any other:

     ncptl --backend=c_seq \
       --program='For each i in {10, ..., 1} task 0 outputs i.' | \
       indent > myprogram.c

('codegen_c_generic.py' outputs unindented code, deferring attractive
formatting to the Unix 'indent' utility.)

   One sequential construct the 'c_seq' backend does not support is
randomness, as needed by'A RANDOM PROCESSOR' (*note Reordering task
IDs::) and 'A RANDOM TASK' (*note Binding variables::).
'codegen_c_generic.py' cannot support randomness itself because doing so
requires broadcasting the seed for the random-number generator to all
tasks.  Broadcasting requires messaging-layer support, which a derived
backend provides through the 'code_def_init_reseed_BCAST' hook (*note
Hook methods::).  For the sequential backend presented above, a
broadcast can be implemented as a no-op:

     def code_def_init_reseed_BCAST(self, localvars):
         '"Broadcast" a random-number seed to all tasks.'
         return []

   In fact, that same do-nothing hook method is used by the 'c_udgram'
backend.  'c_udgram' seeds the random-number generator before calling
'fork()', thereby ensuring that all tasks have the same seed without
requiring an explicit broadcast.


File: conceptual.info,  Node: Generated code,  Next: Internals,  Prev: A minimal C-based backend,  Up: Backend creation

6.2.3 Generated code
--------------------

'codegen_c_generic.py' generates thoroughly commented C code.  However,
the overall structure of the generated code may be somewhat unintuitive,
as it does not resemble the code that a human would write to accomplish
a similar task.  The basic idea behind the generated C code is that it
expands the entire program into a list of "events", then starts the
clock, then executes all of the events in a single loop.  Regardless of
the coNCePTuaL program being compiled, the body of the generated C code
will look like this:

     for (i=0; i<numevents; i++) {
       CONC_EVENT *thisev = &eventlist[i];

       switch (thisev->type) {
         case EVENT_1:
                                  ...

         case EVENT_2:
                                  ...

       }
     }

   Programs generated by 'codegen_c_generic.py' define a number of event
types that are summarized in *note Event types::.  The 'EV_CODE' event
is used, for example, by the 'BACKEND EXECUTES' (*note Injecting
arbitrary code::), 'LOGS' (*note Writing to a log file::), and 'OUTPUTS'
(*note Writing to standard output::) statements.  Note that there are no
loop events--in fact, there are no complex statements (*note Complex
statements::) whatsoever.  Complex statements are expanded into multiple
simple statements at initialization time.

   The advantage of completely expanding a coNCePTuaL program during the
initialization phase--essentially, "pre-executing" the entire
program--is that that enables all of the expensive,
non-communication-related setup to be hoisted out of the timing loop,
which is how a human would normally express a network benchmark.
Pre-execution is possible because the coNCePTuaL language is not a
Turing machine; infinite loops are not expressible by the language and
message contents and timings cannot affect program behavior, for
instance.  During its initialization phase, the generated C code
allocates memory for message buffers, evaluates numerical expressions,
verifies program assertions, unrolls loops, and does everything else
that's not directly relevant to communication performance.  For
instance, the coNCePTuaL program 'TASK tx SUCH THAT tx>4 SENDS 10 1
MEGABYTE MESSAGES TO TASK tx/2' would cause each task to perform the
following steps during initialization:

   * determine if its task ID is greater than 4, making the task a
     sender

   * determine if its task ID is equal to 'tx/4' (rounded down to the
     nearest integer) for some task 'tx' in the program, making the task
     a receiver

   * allocate 1MB for a message buffer

   * allocate and initialize a repeat event, specifying that the
     subsequent event should repeat 10 times

   * allocate a send or receive event

The final two of those steps repeat as necessary.  For example, task 3
receives 10 messages from each of task 6 and task 7.

   Note that each task's receive events (if any) are allocated before
its send events (if any), as described *note Sending::.  Also, note that
only a single message buffer is allocated because the coNCePTuaL source
did not specify the 'UNIQUE' keyword (*note Unique messages::).

   An event is implemented as a C 'struct' that contains all of the
state needed to perform a particular operation.  For example, an event
corresponding to a synchronous or asynchronous send operation
('CONC_SEND_EVENT') stores the destination task ID, the number of bytes
to send, the message alignment, the number of outstanding asynchronous
sends and receives, a flag indicating whether the data is to be touched,
and a flag indicating that the message should be filled with data the
receiver can verify.  In addition, the
'code_declare_datatypes_SEND_STATE' hook (*note Hook methods::) enables
a backend to include additional, backend-specific state in the
('CONC_SEND_EVENT') data structure.


File: conceptual.info,  Node: Internals,  Prev: Generated code,  Up: Backend creation

6.2.4 Internals
---------------

'codegen_c_generic.py' is a fairly substantial piece of code.  It is
divided into ten sections:

  1. methods exported to the compiler front end

  2. utility functions that do not generate code

  3. utility functions that do generate code

  4. methods for outputting language atoms (*note Primitives::)

  5. methods for outputting miscellaneous language constructs (e.g.,
     restricted identifiers; *note Restricted identifiers::)

  6. methods for outputting expressions (*note Expressions::)

  7. methods for outputting complete programs (*note Complete
     programs::)

  8. methods for outputting complex statements (*note Complex
     statements::)

  9. methods for outputting simple statements (e.g., communication
     statements; *note Communication statements::)

  10. methods for outputting nodes with non-textual names (e.g., '...'
     and various operators)

   The 'NCPTL_CodeGen' class defined in 'codegen_c_generic.py' generates
code as follows.  The 'generate' method, which is invoked by 'ncptl.py',
calls upon PLY to process the abstract-syntax tree (AST) in postorder
fashion. 'NCPTL_CodeGen' maintains a stack ('codestack') on which code
fragments are pushed and popped but that ends up containing a complete
line of C code in each element.  For example, in the coNCePTuaL program
'TASK 0 OUTPUTS 1+2*3', the 'n_outputs' method will pop '[('expr',
'(1)+((2)*(3))')]' (a list containing the single expression '1+2*3') and
'('task_expr', '0')' (a tuple designating a task by the expression '0')
and push multiple lines of code that prepare task 0 to evaluate and
output the given expression.

   The utility functions are the most useful for backend developers to
understand, as they are frequently called from hook methods (*note Hook
methods::).  The following should be of particular importance:

'push'
'pushmany'
     Push a single value (typically a string of C code) or each value in
     a list of values onto a stack.

'error_fatal'
'error_internal'
     Output a generic error message or an "internal error" error message
     and abort the program.

'code_declare_var'
     Push (using the 'push' method) a line of C code that declares a
     variable with an optionally specified type, name, initial value,
     and comment.  Return the variable name actually used.

See the definitions in 'codegen_c_generic.py' of each of the above to
determine required and optional parameters.  The following, adapted from
'codegen_c_udgram.py' demonstrates some of the preceding methods:

     def n_for_count_SYNC_ALL(self, localvars):
         "Synchronize all of the tasks in the job."
         synccode = []
         self.push("{", synccode)
         loopvar = self.code_declare_var(suffix="task",
           comment="Loop variable that iterates over all (physical) ranks",
           stack=synccode)
         self.pushmany([
           "thisev_sync->s.sync.peerqueue = ncptl_queue_init (sizeof(int));",
           "for (%s=0; %s<var_num_tasks; %s++)" %
           (loopvar, loopvar, loopvar),
           "*(int *)ncptl_queue_allocate(thisev_sync->s.sync.peerqueue) = %s;" %
           loopvar,
           "thisev_sync->s.sync.syncrank = physrank;",
           "}"],
                       stack=synccode)
         return synccode

   That definition of the 'n_for_count_SYNC_ALL' hook method defines a
new stack ('synccode') and pushes a '{' onto it.  It then declares a
loop variable, letting 'code_declare_var' select a name but dictating
that it end in '_task'.  The hook method then pushes some additional C
code onto the 'synccode' stack and finally returns the stack (which is
really just a list of lines of C code).

   Some useful variables defined by 'NCPTL_CodeGen' include the
following:

'base_global_parameters'
     a list of 6-ary tuples defining extra command-line parameters to
     parse (format: {TYPE, VARIABLE, LONG_NAME, SHORT_NAME, DESCRIPTION,
     DEFAULT_VALUE})

'events_used'
     a dictionary containing the names of events actually used by the
     program being compiled

   Some methods in 'codegen_c_generic.py' that are worth understanding
but are unlikely to be used directly in a derived backend include the
following:

'pop'
     Pop a value from a stack.

'push_marker'
     Push a specially designated "marker" value onto a stack.

'combine_to_marker'
     Pop all items off a stack up to the first marker value found;
     discard the marker; then, push the popped items as a single list of
     items.  This is used, for example, by a complex statement (*note
     Complex statements::) that applies to a list of statements, which
     can be popped as a unit using 'combine_to_marker'.

'invoke_hook'
     Call a hook method, specifying code to be pushed before/after the
     hook-produced code and alternative text (or Python code) to be
     pushed (or executed) in the case that a hook method is not
     provided.


File: conceptual.info,  Node: Run-time library functions,  Prev: Backend creation,  Up: Implementation

6.3 Run-time library functions
==============================

To simplify the backend developer's task and to provide consistent
functionality across backends, coNCePTuaL provides a run-time library
that encapsulates many of the common operations needed for
network-correctness and performance-testing programs.  This section
describes all of the functions that the library exports (plus a few
important types and variables).  The library is written in C, so all of
the type/variable/function prototypes are expressed with C syntax.  The
library includes, among others, functions that manage heap-allocated
memory, accurately read the time, write results to log files, control
queues of arbitrary data, and implement various arithmetic operations.
All of these functions should be considered "slow" and should therefore
generally not be invoked while execution is being timed.(1)

* Menu:

* Variables and data types::    Non-functions used by backends and the library
* Initialization functions::    The first calls to make from C
* Memory-allocation functions::  Getting memory from the heap
* Message-buffer manipulation functions::  Managing communication buffers
* Time-related functions::      Measuring and consuming time
* Log-file functions::          Writing results to a log file
* Random-task functions::       Selecting tasks at random
* Task-mapping functions::      Mapping between task IDs and processor IDs
* Queue functions::             Manipulating data queues
* Unordered-set functions::     Manipulating unordered sets of data
* Language-visible functions::  Implementing coNCePTuaL functions
* Finalization functions::      Cleanly stopping the run-time library

   ---------- Footnotes ----------

   (1) Some notable exceptions are the functions described in *note
Message-buffer manipulation functions::, which implement coNCePTuaL's
'WITH DATA TOUCHING' and 'WITH VERIFICATION' constructs.


File: conceptual.info,  Node: Variables and data types,  Next: Initialization functions,  Prev: Run-time library functions,  Up: Run-time library functions

6.3.1 Constants, variables, and data types
------------------------------------------

The following constants, variables, and data types are used by various
run-time library functions and directly by backends.

 -- Data type: ncptl_int
     The internal data type of the coNCePTuaL run-time library is
     'ncptl_int'.  This is normally a 64-bit signed integer type
     selected automatically by 'configure' (*note configure::) but can
     be overridden with the '--with-datatype' option to 'configure'.
     'ncptl.h' defines a string macro called 'NICS' that can be used to
     output an 'ncptl_int' regardless of how the 'ncptl_int' type is
     declared:

          ncptl_fatal ("My variable contains a negative value (%" NICS ")",
                       my_ncptl_int_var);

     'ncptl_int' constants declared by backends derived from
     'codegen_c_generic.py' are given an explicit suffix that defaults
     to 'LL' but can be overridden at configuration time using the
     '--with-const-suffix' option.

 -- Constant: NCPTL_INT_MIN
     'NCPTL_INT_MIN' is a C preprocessor macro that represents the
     smallest (i.e., most negative) number that can be assigned to an
     'ncptl_int'.  For example, if 'ncptl_int' is a 64-bit signed
     integer type, then 'NCPTL_INT_MIN' will be the value
     '-9223372036854775808'.

 -- Data type: NCPTL_CMDLINE
     The 'NCPTL_CMDLINE' structure describes an acceptable command-line
     option.  It contains a type, which is either 'NCPTL_TYPE_INT' for
     an 'ncptl_int' or 'NCPTL_TYPE_STRING' for a 'char *', a pointer to
     a variable that will receive the value specified on the command
     line, the long name of the argument (without the '--'), the
     one-letter short name of the argument (without the '-'), a textual
     description of what the argument represents, and a default value to
     use if the option is not specified on the command line.

 -- Data type: NCPTL_QUEUE
     An 'NCPTL_QUEUE' is an opaque data type that represents a
     dynamically growing queue that can be flattened to an array for
     more convenient access.  'NCPTL_QUEUE's have proved to be quite
     useful when implementing coNCePTuaL backends.

 -- Data type: NCPTL_LOG_FILE_STATE
     Every coNCePTuaL log file is backed by a unique
     'NCPTL_LOG_FILE_STATE' opaque data type.  An 'NCPTL_LOG_FILE_STATE'
     data type represents all of the state needed to maintain that file,
     such as file descriptors, prologue comments, and data that has not
     yet been aggregated.

 -- Variable: int ncptl_pagesize
     This variable is initialized by 'ncptl_init()' to the number of
     bytes in an operating-system memory page.  'ncptl_pagesize' can be
     used by backends to implement coNCePTuaL's 'PAGE SIZED' (*note Item
     size::) and 'PAGE ALIGNED' (*note Message alignment::) keywords.

 -- Variable: int ncptl_fast_init
     The 'ncptl_init()' function (*note Initialization functions::) can
     take many seconds to complete.  Much of this time is spent
     calibrating and measuring the quality of the various timers the
     run-time library uses.  For backends such as 'picl' (*note The picl
     backend::) that do not measure real time there is little need to
     have an accurate timer.  Setting 'ncptl_fast_init' to '1' before
     invoking 'ncptl_init()' skips the timer calibration and measurement
     steps, thereby leading to faster initialization times.  A user can
     also override the setting of 'ncptl_fast_init' at run time by
     setting the 'NCPTL_FAST_INIT' environment variable to either '0' or
     '1', as appropriate.


File: conceptual.info,  Node: Initialization functions,  Next: Memory-allocation functions,  Prev: Variables and data types,  Up: Run-time library functions

6.3.2 Initialization functions
------------------------------

The following functions are intended to be called fairly early in the
generated code.

 -- Function: void ncptl_init (int VERSION, char *PROGRAM_NAME)
     Initialize the coNCePTuaL run-time library.  VERSION is used to
     verify that 'runtimelib.c' corresponds to the version of 'ncptl.h'
     used by the generated code.  The caller must pass in
     'NCPTL_RUN_TIME_VERSION' for VERSION.  PROGRAM_NAME is the name of
     the executable program and is used for outputting error messages.
     The caller should pass in 'argv[0]' for PROGRAM_NAME.
     'ncptl_init()' must be the first library function called by the
     generated code (with a few exceptions, as indicated below).

 -- Function: void ncptl_permit_signal (int SIGNALNUM)
     Indicate that the backend relies on signal SIGNALNUM for correct
     operation.  Because signal handling has performance implications,
     the coNCePTuaL run-time library normally terminates the program
     upon receiving a signal.  Hence, the user can be assured that if a
     program runs to completion then no signals have affected its
     performance.  *Note Running coNCePTuaL programs::, for a
     description of the '--no-trap' command-line option, which enables a
     user to permit additional signals to be delivered to the program
     (e.g., when linking with a particular implementation of a
     communication library that relies on signals).
     'ncptl_permit_signal()' must be invoked before
     'ncptl_parse_command_line()' to have any effect.

 -- Function: void ncptl_parse_command_line (int ARGC, char *ARGV[],
          NCPTL_CMDLINE *ARGLIST, int NUMARGS)
     Parse the command line.  ARGC and ARGV should be the argument count
     and argument vector passed to the generated code by the operating
     system.  ARGLIST is a list of descriptions of acceptable
     command-line arguments and NUMARGS is the length of that list.

   Because 'ncptl_init()' takes many seconds to run, it is common for
generated code to scan the command line for '--help' or '-?' and, if
found, skip 'ncptl_init()' and immediately invoke
'ncptl_parse_command_line()'.  Doing so gives the user immediate
feedback when requesting program usage information.  Skipping
'ncptl_init()' is safe in this context because
'ncptl_parse_command_line()' terminates the program after displaying
usage information; it does not require any information discovered by
'ncptl_init()'.

   Most generated programs have a '--seed'/'-S' option that enables the
user to specify explicitly a seed for the random-number generator with
'--help'/'-?' showing the default seed. 'ncptl_seed_random_task()' must
therefore be called before 'ncptl_parse_command_line()' which, as stated
in the previous paragraph, can be invoked without a prior invocation of
'ncptl_init()'.  Consequently, it can be considered safe also to invoke
'ncptl_seed_random_task()' before 'ncptl_init()'.

   A generated program's initialization routine will generally exhibit a
structure based on the following pseudocode:

     *if* "'--help'" *or* "'-?'" *in* command-line options *then*
        ONLY_HELP := TRUE
     *else*
        ONLY_HELP := FALSE
        'ncptl_init(...)'
     *end if*
     RANDOM_SEED := 'ncptl_seed_random_task(0)'
     'ncptl_parse_command_line(...)'
     *if* ONLY_HELP = TRUE *then*
        'ncptl_error("Internal error; should have exited")'
     *end if*
     'ncptl_seed_random_task(RANDOM_SEED)'


File: conceptual.info,  Node: Memory-allocation functions,  Next: Message-buffer manipulation functions,  Prev: Initialization functions,  Up: Run-time library functions

6.3.3 Memory-allocation functions
---------------------------------

The coNCePTuaL run-time library provides its own wrappers for
'malloc()', 'free()', 'realloc()', and 'strdup()' as well as a
specialized 'malloc()' designed specifically for allocating message
buffers.  The wrappers' "value added" is that they support the explicit
data alignments needed by 'ALIGNED' messages (*note Message alignment::)
and that they automatically call 'ncptl_fatal()' on failure, so the
return value does not need to be checked for 'NULL'.

 -- Function: void * ncptl_malloc (ncptl_int NUMBYTES, ncptl_int
          ALIGNMENT)
     Allocate NUMBYTES bytes of memory aligned to an ALIGNMENT-byte
     boundary.  If ALIGNMENT is '0', 'ncptl_malloc()' will use whatever
     alignment is "natural" for the underlying architecture.
     'ncptl_malloc()' will automatically call 'ncptl_fatal()' if memory
     allocation fails.  Therefore, unlike 'malloc()', there is no need
     to check the return value for 'NULL'.

 -- Function: void * ncptl_malloc_misaligned (ncptl_int NUMBYTES,
          ncptl_int MISALIGNMENT)
     Allocate NUMBYTES bytes of memory from the heap aligned
     MISALIGNMENT bytes past a page boundary.  If ALIGNMENT is '0',
     'ncptl_malloc_misaligned()' will return page-aligned memory.
     'ncptl_malloc_misaligned()' will automatically call 'ncptl_fatal()'
     if memory allocation fails.  Therefore, unlike 'malloc()', there is
     no need to check the return value for 'NULL'.

 -- Function: void ncptl_free (void *POINTER)
     Free memory previously allocated by 'ncptl_malloc()'.  It is an
     error to pass 'ncptl_free()' memory not allocated by
     'ncptl_malloc()'.

 -- Function: void * ncptl_realloc (void *POINTER, ncptl_int NUMBYTES,
          ncptl_int ALIGNMENT)
     Given a pointer returned by 'ncptl_malloc()', change its size to
     NUMBYTES and byte-alignment to ALIGNMENT without altering the
     contents (except for truncation in the case of a smaller target
     size).  If ALIGNMENT is '0', 'ncptl_realloc()' will use whatever
     alignment is "natural" for the underlying architecture.
     'ncptl_realloc()' will automatically call 'ncptl_fatal()' if memory
     allocation fails.  Therefore, unlike 'realloc()', there is no need
     to check the return value for 'NULL'.

 -- Function: char * ncptl_strdup (const char *STRING)
     'ncptl_strdup()' copies a string as does the standard C 'strdup()'
     function.  However, 'ncptl_strdup()' uses 'ncptl_malloc()' instead
     of 'malloc()' to allocate memory for the copy, which must therefore
     be deallocated using 'ncptl_free()'.

 -- Function: void * ncptl_malloc_message (ncptl_int NUMBYTES, ncptl_int
          ALIGNMENT, ncptl_int OUTSTANDING, int MISALIGNED)
     Allocate NUMBYTES bytes of memory from the heap either aligned on
     an ALIGNMENT-byte boundary (if MISALIGNED is '0') or ALIGNMENT
     bytes past a page boundary (if MISALIGNED is '1').  All calls with
     the same value of OUTSTANDING will share a buffer.
     'ncptl_malloc_message()' is intended to be used in two passes.  The
     first time the function is called on a set of messages it merely
     determines how much memory to allocate.  The second time, it
     returns valid memory buffers.  Note that the returned pointer can
     be neither 'free()'d nor 'ncptl_free()'d.

 -- Function: void * ncptl_get_message_buffer (ncptl_int BUFFERNUM)
     Return a pointer to a message buffer previously allocated (and
     finalized) by 'ncptl_malloc_message()'.  The BUFFERNUM argument to
     'ncptl_get_message_buffer()', which corresponds to the OUTSTANDING
     argument to 'ncptl_malloc_message()', specifies the number of the
     buffer to return. 'ncptl_get_message_buffer()' returns 'NULL' if
     buffer BUFFERNUM is either unallocated or uninitialized.


File: conceptual.info,  Node: Message-buffer manipulation functions,  Next: Time-related functions,  Prev: Memory-allocation functions,  Up: Run-time library functions

6.3.4 Message-buffer manipulation functions
-------------------------------------------

The coNCePTuaL language facilitates verifying message contents and
touching every word in a message (*note Data touching::).  The following
functions implement those features.

 -- Function: void ncptl_fill_buffer (void *BUFFER, ncptl_int NUMBYTES,
          int VALIDITY)
     Fill a region of memory with known values.  If VALIDITY is '+1',
     'ncptl_fill_buffer()' will fill the first NUMBYTES bytes of BUFFER
     with a verifiable sequence of integers (*note Data touching::).  If
     VALIDITY is '-1', 'ncptl_fill_buffer()' will pollute the first
     NUMBYTES bytes of BUFFER.  Receive buffers should be polluted
     before reception to avoid false negatives caused, for example, by
     an inadvertently dropped message destined for a previously
     validated buffer.

 -- Function: ncptl_int ncptl_verify (void *BUFFER, ncptl_int NUMBYTES)
     Verify the contents of memory filled by 'ncptl_fill_buffer()'.  The
     function returns the number of erroneous bits. 'ncptl_verify()' is
     used to implement coNCePTuaL's 'WITH VERIFICATION' construct (*note
     Data touching::).

 -- Function: void ncptl_touch_data (void *BUFFER, ncptl_int NUMBYTES)
     Touch every byte in a given buffer.  'ncptl_touch_data()' is used
     to implement the 'WITH DATA TOUCHING' construct described in *note
     Data touching::.

   The following function, 'ncptl_touch_memory()', does not actually
manipulate message buffers.  It is included in this section because of
its similarity to 'ncptl_touch_data()'. 'ncptl_touch_data()' touches
message buffers to implement the 'WITH DATA TOUCHING' construct;
'ncptl_touch_memory()' touches a hidden memory region to implement the
'TOUCHES' statement.

 -- Function: void ncptl_touch_memory (void *BUFFER, ncptl_int
          BUFFERBYTES, ncptl_int WORDBYTES, ncptl_int FIRSTBYTE,
          ncptl_int NUMACCESSES, ncptl_int BYTESTRIDE)
     Walk a memory region BUFFER of size BUFFERBYTES bytes.  Each "word"
     to touch contains WORDBYTES bytes.  FIRSTBYTE indicates the byte
     index into BUFFER from which to start touching.  The function will
     read and write NUMACCESSES "words" with stride BYTESTRIDE bytes.
     For example, 'ncptl_touch_memory (mybuffer, 1048576, 64, 192,
     10000, 4096)' will read and write (but otherwise do nothing with)
     the 64 bytes that lie 192 bytes into a 1MB memory region, then the
     64 bytes starting at offset 4288, then the 64 bytes starting at
     192+4096*2, then at 192+4096*3, then at 192+4096*4, and so forth up
     to 192+4096*10000, wrapping around the 1MB region as necessary.

     A BYTESTRIDE of 'NCPTL_INT_MIN' implies a random stride.

     As an important special case, if FIRSTBYTE is '-1', then
     'ncptl_touch_memory()' will touch one or more message buffers (cf.
     'ncptl_malloc_message()' in *note Memory-allocation functions::)
     instead of the given BUFFER.  In that case, BUFFERBYTES stores the
     buffer number (a nonnegative number).  If BUFFERBYTES is '-1',
     however, then _all_ message buffers are touched.  Note that when
     FIRSTBYTE is '-1', all parameters to 'ncptl_touch_memory()' other
     than BUFFERBYTES are ignored.

     'ncptl_touch_memory()' is intended to to be used to implement the
     'TOUCHES' statement (*note Touching memory::).


File: conceptual.info,  Node: Time-related functions,  Next: Log-file functions,  Prev: Message-buffer manipulation functions,  Up: Run-time library functions

6.3.5 Time-related functions
----------------------------

An essential component of any benchmarking system is an accurate timer.
coNCePTuaL's 'ncptl_time()' function selects from a variety of timers at
configuration time, first favoring lower-overhead cycle-accurate timers,
then higher-overhead cycle-accurate, and finally non-cycle-accurate
timers.  'ncptl_init()' measures the actual timer overhead and
resolution and 'ncptl_log_write_prologue()' writes this information to
the log file.  Furthermore, the 'validatetimer' program (*note
Validating the coNCePTuaL timer::) can be used to verify that the timer
used by 'ncptl_init()' truly does correspond to wall-clock time.

   The coNCePTuaL language provides a few time-related functions.  These
are supported by the functions described below.

 -- Function: uint64_t ncptl_time (void)
     Return the time in microseconds.  The timer ticks even when the
     program is not currently scheduled.  No assumptions can be made
     about the relation of the value returned to the time of day;
     'ncptl_time()' is intended to be used strictly for computing
     elapsed time.  The timer's resolution and accuracy are logged to
     the log file by 'ncptl_log_write_prologue()' (more precisely, by
     the internal 'log_write_prologue_timer()' function, which is called
     by 'ncptl_log_write_prologue()').  Note that 'ncptl_time()' always
     returns a 64-bit unsigned value, regardless of how 'ncptl_int' is
     declared.

     The coNCePTuaL 'configure' script (*note configure::) searches for
     a number of high-resolution timers and selects the best timer
     mechanism from among the ones available.  The selection criteria is
     as follows:

       1. If './configure' was passed '--with-gettimeofday' (*note
          configure::) then 'ncptl_time()' uses 'gettimeofday()' as its
          timer mechanism.

       2. If './configure' was passed '--with-mpi-wtime' (*note
          configure::) then 'ncptl_time()' uses 'MPI_Wtime()' as its
          timer mechanism.

       3. If './configure' recognizes the CPU architecture, knows how to
          instruct the C compiler to insert inline assembly code, and
          can determine the number of clock cycles per second, then
          'ncptl_time()' reads the timer using inline assembly code.  If
          the cycle counter is likely to wrap around during a moderately
          long benchmark (i.e., because the cycle counter is a 32-bit
          register), 'ncptl_time()' augments the inline assembly code
          with calls to 'gettimeofday()' in an attempt to produce
          accurate timings that don't suffer from clock wraparound.

       4. If the Linux 'get_cycles()' function is available and
          './configure' can determine the number of clock cycles per
          second then 'ncptl_time()' uses 'get_cycles()' to measure
          execution time.

       5. If the PAPI library is available, 'ncptl_time()' becomes a
          call to PAPI's 'PAPI_get_real_usec()' function.

       6. If the System V 'clock_gettime()' function is available and
          the 'CLOCK_SGI_CYCLE' macro is defined, 'ncptl_time()' invokes
          'clock_gettime()' with the 'CLOCK_SGI_CYCLE' argument.  If
          'CLOCK_SGI_CYCLE' is not defined but 'CLOCK_REALTIME' is, then
          'ncptl_time()' invokes 'clock_gettime()' with the
          'CLOCK_REALTIME' argument.

       7. Intel's (now obsolete) supercomputers provide a 'dclock()'
          function for reading the time.  'ncptl_time()' makes use of
          'dclock()' if it's available.

       8. Microsoft Windows provides functions for reading a
          high-resolution timer ('QueryPerformanceCounter()') and for
          determining the number of ticks per second that the timer
          measures ('QueryPerformanceFrequency()').  If those functions
          are available, 'ncptl_time()' uses them.

       9. As a last resort, 'ncptl_time()' uses 'gettimeofday()' to
          measure execution time.

     Furthermore, coNCePTuaL makes use of the Timers (HPET)
     High-Precision Event Timers (HPET) device if and only if all of the
     following conditions hold at run time:

        * neither '--with-gettimeofday', '--with-mpi-wtime', nor
          '--disable-hpet' was specified to './configure'

        * '/dev/hpet'--or an alternative device specified at
          configuration time with '--enable-hpet'--exists, is readable,
          and can be memory-mapped into user space

        * the HPET device's main counter is a 64-bit value, not a 32-bit
          value

        * the period of the HPET counter is within the ranges required
          by the HPET specification, i.e., between 0 and 100 nanoseconds

     Failing any of those conditions, coNCePTuaL falls back to the timer
     selected at configuration time.  See the HPET specification
     (http://www.intel.com/hardwaredesign/hpetspec.htm) for more
     information on HPET.

 -- Function: void ncptl_set_flag_after_usecs (volatile int *FLAG,
          uint64_t DELAY)
     'ncptl_set_flag_after_usecs()' uses the operating system's interval
     timer to asynchronously set a variable to '1' after a given number
     of microseconds.  This function is intended to be used to support
     the ''FOR' TIME' construct (*note Timed loops::).  Note that DELAY
     is a 64-bit unsigned value, regardless of how 'ncptl_int' is
     declared.

     'ncptl_set_flag_after_usecs()' is implemented in terms of the
     'setitimer()' function and issues a run-time error if the
     'setitimer()' function is not available.

 -- Function: void ncptl_udelay (uint64_t DELAY, int SPIN0BLOCK1)
     If SPIN0BLOCK1 is '0', 'ncptl_udelay()' spins for DELAY
     microseconds (i.e., using the CPU).  If SPIN0BLOCK1 is '1',
     'ncptl_udelay()' sleeps for DELAY microseconds (i.e., relinquishing
     the CPU).  Note that DELAY is a 64-bit unsigned value, regardless
     of how 'ncptl_int' is declared.  'ncptl_udelay()' is intended to be
     used to support the coNCePTuaL language's 'SLEEPS' and 'COMPUTES'
     statements (*note Delaying execution::).

     When SPIN0BLOCK1 is '0', 'ncptl_udelay()' uses 'ncptl_time()' to
     determine when DELAY microseconds have elapsed.  Unless
     'ncptl_time()' is known to utilize an extremely low-overhead timer,
     'ncptl_udelay()' intersperses calls to 'ncptl_time()' with writes
     to a dummy variable.  When SPIN0BLOCK1 is '0', 'ncptl_udelay()'
     invokes 'nanosleep()' to introduce delays.  'ncptl_udelay()' issues
     a run-time error if the 'nanosleep()' function is not available.


File: conceptual.info,  Node: Log-file functions,  Next: Random-task functions,  Prev: Time-related functions,  Up: Run-time library functions

6.3.6 Log-file functions
------------------------

Benchmarking has limited value without a proper record of the
performance results.  The coNCePTuaL run-time library provides functions
for writing data to log files.  It takes care of much of the work needed
to calculate statistics on data columns and to log a thorough
experimental setup to every log file.

   The library treats a log file as a collection of tables of data.
Each table contains a number of rows, one per dynamic invocation of the
'LOGS' statement (*note Writing to a log file::).  Each row contains a
number of columns, one per aggregate expression (*note Aggregate
expressions::) expressed statically in a coNCePTuaL program.(1)
Log-file functions should be called only if the coNCePTuaL source code
accesses a log file (*note Writing to a log file::).

 -- Function: void ncptl_log_add_comment (const char *KEY, const char
          *VALUE)
     'ncptl_log_add_comment()' makes it possible for a backend to add
     backend-specific <KEY:VALUE> pairs to the set of prologue or
     epilogue comments that get written to a log file (*note Log-file
     format::). 'ncptl_log_add_comment()' can be called repeatedly.  All
     calls that precede 'ncptl_log_open()' are included in the log-file
     prologue.  All calls that follow 'ncptl_log_open()' are included in
     the log-file epilogue.  Note that 'ncptl_log_add_comment()' makes a
     copy of KEY and VALUE, so these need not be heap-allocated.

 -- Function: NCPTL_LOG_FILE_STATE * ncptl_log_open (char *TEMPLATE,
          ncptl_int PROCESSOR)
     Given a filename template containing a '%d' placeholder and a
     processor number (i.e., the process's physical rank in the
     computation), 'ncptl_log_open()' creates and opens a log file named
     by the template with '%d' replaced by PROCESSOR.  For example, if
     TEMPLATE is '/home/me/myprog-%d.log' and PROCESSOR is '3', the
     resulting filename will be '/home/me/myprog-3.log'.
     'ncptl_log_open()' must be called before any of the other
     'ncptl_log_SOMETHING()' functions--except for
     'ncptl_log_add_comment()', which should be called before
     'ncptl_log_open()'.  'ncptl_log_open()' returns a pointer to an
     opaque 'NCPTL_LOG_FILE_STATE' value; the backend will need to pass
     this pointer to nearly all of the other log-file functions
     described in this section.

     There are three special cases for TEMPLATE.  First, if TEMPLATE
     points to an empty string, all log-file output is sent to the null
     device (i.e., '/dev/null' on Unix and Unix-like operating systems).
     Second, if TEMPLATE is a single dash ('-'), all log-file output is
     sent to the standard output device.  Third, if TEMPLATE is a single
     dollar sign ('$'), all log-file output is buffered in a
     library-internal string.  The string can be retrieved using
     'ncptl_log_get_contents()'.

 -- Function: char * ncptl_log_generate_uuid (void)
     Return a random string of hexadecimal digits formatted as
     "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX" (36 bytes plus a 'NULL'
     byte) to pass to 'ncptl_log_write_prologue()'.  The caller should
     'ncptl_free()' the string when it is no longer needed (generally,
     as soon as 'ncptl_log_write_prologue()' returns).

 -- Function: void ncptl_log_write_prologue (NCPTL_LOG_FILE_STATE
          *LOGSTATE, char *PROGNAME, char *UUID, char *BACKEND_NAME,
          char *BACKEND_DESC, ncptl_int NUMTASKS, NCPTL_CMDLINE
          *ARGLIST, int NUMARGS, char **SOURCECODE)
     'ncptl_log_write_prologue()' standardizes the prologue with which
     all log files begin.  PROGNAME is the name of the program
     executable ('argv[0]' in C). UUID is a value returned by
     'ncptl_log_generate_uuid()'.  Note that every process in a program
     must pass the same value of UUID to 'ncptl_log_write_prologue()'.
     BACKEND_NAME is the name of the backend in 'LANGUAGE_LIBRARY'
     format (e.g., 'java_rmi').  BACKEND_DESC is a brief description of
     the backend (e.g., 'Java + RMI').  NUMTASKS is the total number of
     tasks in the program.  ARGLIST is the list of arguments passed to
     'ncptl_parse_command_line()' and NUMARGS is the number of entries
     in that list.  SOURCECODE is the complete coNCePTuaL source code
     stored as a 'NULL'-terminated list of 'NULL'-terminated strings.

 -- Function: char * ncptl_log_lookup_string (NCPTL_LOG_FILE_STATE
          *LOGSTATE, char *KEY)
     'ncptl_log_write_prologue()' stores every <KEY:VALUE> comment it
     writes into an in-memory database. 'ncptl_log_lookup_string()'
     searches the comment database for a key and returns the
     corresponding value.  The function returns the empty string if the
     key is not found in the database.  In either case, the caller
     should not deallocate the result. 'ncptl_log_lookup_string()' is
     intended to be used to implement coNCePTuaL's 'THE VALUE OF'
     construct (*note Utilizing log-file comments::).

 -- Function: void ncptl_log_write (NCPTL_LOG_FILE_STATE *LOGSTATE, int
          LOGCOLUMN, char *DESCRIPTION, LOG_AGGREGATE AGGREGATE, double
          AGGREGATE_PARAM, double VALUE)
     Push value VALUE onto column LOGCOLUMN of the current table.  Gaps
     between columns are automatically elided.  DESCRIPTION is used as
     the column header for column LOGCOLUMN.  AGGREGATE_PARAM is a
     parameter needed by certain aggregates.  Currently, it used only to
     represent the target percentile for 'NCPTL_FUNC_PERCENTILE'.
     Acceptable values for AGGREGATE are defined in *note Representing
     aggregate functions::.

 -- Function: void ncptl_log_compute_aggregates (NCPTL_LOG_FILE_STATE
          *LOGSTATE)
     'ncptl_log_compute_aggregates()' implements the 'COMPUTES
     AGGREGATES' construct described in *note Computing aggregates::.
     When 'ncptl_log_compute_aggregates()' is invoked, the coNCePTuaL
     run-time library uses the aggregate function specified by
     'ncptl_log_write()' to aggregate all of the data that accumulated
     in each column since the last invocation of
     'ncptl_log_compute_aggregates()'.  Note that
     'ncptl_log_compute_aggregates()' is called implicitly by
     'ncptl_log_commit_data()'.

 -- Function: void ncptl_log_commit_data (NCPTL_LOG_FILE_STATE
          *LOGSTATE)
     The coNCePTuaL run-time library keeps the current data table in
     memory and doesn't write anything to the log file until
     'ncptl_log_commit_data()' is called, at which point the run-time
     library writes all accumulated data to the log file and begins a
     new data table.  Note that 'ncptl_log_commit_data()' is called
     implicitly by 'ncptl_log_close()'.  Furthermore, a backend should
     call 'ncptl_log_commit_data()' when beginning execution of a new
     statement in a coNCePTuaL program.  For instance, the
     'codegen_c_generic.py' backend invokes 'ncptl_log_commit_data()'
     from 'code_def_main_newstmt'.

 -- Function: void ncptl_log_write_epilogue (NCPTL_LOG_FILE_STATE
          *LOGSTATE)
     Write a stock set of comments as an epilogue to the log file.

 -- Function: const char * ncptl_log_get_contents (NCPTL_LOG_FILE_STATE
          *LOGSTATE)
     Return the current contents of the log file as a string.  The
     caller must not use the string after the next run-time library call
     that modifies the log file, modify the string, or free the string.
     The caller should copy the string (e.g., with 'ncptl_strdup()') if
     any of those actions are necessary.  If the the log file does not
     support random access (because it goes to the standard-output
     device or the null device), 'NULL' is returned.

 -- Function: void ncptl_log_close (NCPTL_LOG_FILE_STATE *LOGSTATE)
     Close the log file.  No 'ncptl_log_SOMETHING()' function should be
     called after 'ncptl_log_close()' is invoked.

   ---------- Footnotes ----------

   (1) Writing 'A HISTOGRAM OF THE' <EXPR> produces two columns, one for
values and one for tallies.


File: conceptual.info,  Node: Random-task functions,  Next: Task-mapping functions,  Prev: Log-file functions,  Up: Run-time library functions

6.3.7 Random-task functions
---------------------------

Randomness appears in various forms in the coNCePTuaL language, such as
when assigning a task to 'A RANDOM PROCESSOR' (*note Reordering task
IDs::) or when let-binding 'A RANDOM TASK' or 'A RANDOM TASK OTHER THAN'
a given task ID to a variable (*note Binding variables::).  The
following functions are used to select tasks at random.  coNCePTuaL
currently uses the Mersenne Twister as its random-number generator.
Hence, given the same seed, a coNCePTuaL program will see the same
random-number sequence on every platform.

 -- Function: int ncptl_seed_random_task (int SEED, ncptl_int PROCID)
     Initialize the random-number generator needed by
     'ncptl_random_task()'.  If SEED is zero, 'ncptl_seed_random_task()'
     selects an arbitrary seed value. 'ncptl_seed_random_task()' returns
     the seed that was used.  PROCID specifies the (physical) processor
     ID of the calling task and is needed to seed the task-local
     random-number generators used by some of the functions in *note
     Language-visible functions::.

 -- Function: ncptl_int ncptl_random_task (ncptl_int LOWER_BOUND,
          ncptl_int UPPER_BOUND, ncptl_int EXCLUDED)
     Return a randomly selected task number from LOWER_BOUND to
     UPPER_BOUND (both inclusive).  If EXCLUDED is nonnegative then that
     task number will never be selected, even if it's within range.


File: conceptual.info,  Node: Task-mapping functions,  Next: Queue functions,  Prev: Random-task functions,  Up: Run-time library functions

6.3.8 Task-mapping functions
----------------------------

 -- Function: NCPTL_VIRT_PHYS_MAP * ncptl_allocate_task_map (ncptl_int
          NUMTASKS)
     Allocate and initialize an opaque 'NCPTL_VIRT_PHYS_MAP' object and
     return a pointer to it.

 -- Function: NCPTL_VIRT_PHYS_MAP * ncptl_point_to_task_map
          (NCPTL_VIRT_PHYS_MAP *OLDMAP)
     Store a pointer to a task map, and mark the task map as "live".

 -- Function: NCPTL_VIRT_PHYS_MAP * ncptl_conditionally_copy_task_map
          (NCPTL_VIRT_PHYS_MAP *OLDMAP)
     Replicate an existing task map if it is "live" (i.e., something
     points to it) or return the input parameter if not.

 -- Function: ncptl_int ncptl_virtual_to_physical (NCPTL_VIRT_PHYS_MAP
          *PROCMAP, ncptl_int VIRTID)
     Given a process map allocated by 'ncptl_allocate_task_map()' and a
     (virtual) task ID, return the corresponding (physical) process ID.

 -- Function: ncptl_int ncptl_physical_to_virtual (NCPTL_VIRT_PHYS_MAP
          *PROCMAP, ncptl_int PHYSID)
     Given a process map allocated by 'ncptl_allocate_task_map()' and a
     (physical) process ID, return the corresponding (virtual) task ID.

 -- Function: ncptl_int ncptl_assign_processor (ncptl_int VIRTID,
          ncptl_int PHYSID, NCPTL_VIRT_PHYS_MAP *PROCMAP, ncptl_int
          PHYSRANK)
     Assign a (physical) processor ID, PHYSID, to a (virtual) task ID,
     VIRTID given a virtual-to-physical mapping table, PROCMAP.  Return
     a new task ID for the caller's processor given its processor ID,
     PHYSRANK. 'ncptl_assign_processor()' is intended to implement the
     'IS ASSIGNED TO' construct (*note Reordering task IDs::).


File: conceptual.info,  Node: Queue functions,  Next: Unordered-set functions,  Prev: Task-mapping functions,  Up: Run-time library functions

6.3.9 Queue functions
---------------------

Because queues are a widely applicable construct, the run-time library
provides support for queues of arbitrary datatypes.  In the current
implementation, these can more precisely be termed "dynamically growing
lists" than "queues".  However, they may be extended in a future version
of the library to support more queue-like functionality.

 -- Function: NCPTL_QUEUE * ncptl_queue_init (ncptl_int ELTBYTES)
     'ncptl_queue_init()' creates and initializes a dynamically growing
     queue in which each element occupies ELTBYTES bytes of memory.

 -- Function: void * ncptl_queue_allocate (NCPTL_QUEUE *QUEUE)
     Allocate a new data element at the end of queue QUEUE.  The queue
     passed to 'ncptl_queue_allocate()' must be one returned by
     'ncptl_queue_init()'.  'ncptl_queue_allocate()' returns a pointer
     to the data element allocated.

 -- Function: void * ncptl_queue_push (NCPTL_QUEUE *QUEUE, void
          *ELEMENT)
     Push (via a memory copy) the element pointed to by ELEMENT onto the
     end of queue QUEUE and return a pointer to the copy in the queue.
     The queue passed to 'ncptl_queue_allocate()' must be one returned
     by 'ncptl_queue_init()'.  ('ncptl_queue_push()' is actually
     implemented in terms of 'ncptl_queue_allocate()'.)

 -- Function: void ncptl_queue_push_all (NCPTL_QUEUE *TARGET_QUEUE,
          NCPTL_QUEUE *SOURCE_QUEUE)
     Push (via a memory copy) all of the elements in SOURCE_QUEUE onto
     the end of TARGET_QUEUE.  A fatal error will occur if the two
     queues were not initialized with the same ELTBYTES argument to
     'ncptl_queue_init()'.  'ncptl_queue_push_all()' does not modify
     SOURCE_QUEUE.

 -- Function: void * ncptl_queue_pop (NCPTL_QUEUE *QUEUE)
     Pop a pointer to the element at the head of queue QUEUE.  If QUEUE
     is empty, return 'NULL'.  The pointer returned by
     'ncptl_queue_pop()' is guaranteed to be valid until the next
     invocation of 'ncptl_queue_empty()'.

 -- Function: void * ncptl_queue_pop_tail (NCPTL_QUEUE *QUEUE)
     Pop a pointer to the element at the tail of queue QUEUE.  If QUEUE
     is empty, return 'NULL'.  In essence, this lets the caller treat
     the queue as a stack.  The pointer returned by
     'ncptl_queue_pop_tail()' is guaranteed to be valid until the next
     invocation of 'ncptl_queue_empty()', 'ncptl_queue_allocate()' or
     'ncptl_queue_push()'.

 -- Function: void * ncptl_queue_contents (NCPTL_QUEUE *QUEUE, int
          COPYELTS)
     Return queue QUEUE as an array of elements.  If
     'ncptl_queue_contents()' is passed '1' for COPYELTS, a new array is
     allocated using 'ncptl_malloc()'; the queue's internal array is
     copied to the newly allocated array; and, this new array is
     returned to the caller.  It is the caller's responsibility to pass
     the result to 'ncptl_free()' when the array is no longer needed.
     If 'ncptl_queue_contents()' is passed '0' for COPYELTS, a pointer
     to the queue's internal array is returned without first copying it.
     This pointer should not be passed to 'ncptl_free()' as it is still
     needed by QUEUE.

 -- Function: ncptl_int ncptl_queue_length (NCPTL_QUEUE *QUEUE)
     Return the number of elements in queue QUEUE.

 -- Function: void ncptl_queue_empty (NCPTL_QUEUE *QUEUE)
     Empty a queue, freeing the memory that had been allocated for its
     elements.  Queue contents returned by 'ncptl_queue_contents()' with
     COPYELTS set to '0' are also invalidated.  The queue itself can
     continue to be used and should be deallocated with 'ncptl_free()'
     (*note Memory-allocation functions::) when no longer needed.


File: conceptual.info,  Node: Unordered-set functions,  Next: Language-visible functions,  Prev: Queue functions,  Up: Run-time library functions

6.3.10 Unordered-set functions
------------------------------

Because unordered collections of data are a widely applicable construct,
the run-time library provides support for sets.  A set contains zero or
more keys, each of which must be unique within the set.  Furthermore,
each key can be associated with a data value.  Sets are currently
implemented in the coNCePTuaL run-time library as hash tables.

 -- Function: NCPTL_SET * ncptl_set_init (ncptl_int NUMELTS, ncptl_int
          KEYBYTES, ncptl_int VALUEBYTES)
     Allocate and initialize a set object and return a pointer to it.
     Each element in the set maps a KEYBYTES-byte key to a
     VALUEBYTES-byte value.  The NUMELTS parameter is an estimate of the
     maximum number of elements in the set. 'ncptl_set_init()' returns a
     pointer to the set.

 -- Function: void * ncptl_set_find (NCPTL_SET *SET, void *KEY)
     Given a set and a pointer to a key, return a pointer to the
     associated value or 'NULL' if the key is not found in the set.

 -- Function: void ncptl_set_insert (NCPTL_SET *SET, void *KEY, void
          *VALUE)
     Insert a key into a set and associate a value with it.
     'ncptl_set_insert()' copies both KEY and VALUE so stack-allocated
     keys and values are acceptable inputs.  The run-time library aborts
     with an error message if the key is already in the set.

 -- Function: void ncptl_set_walk (NCPTL_SET *SET, void (*USERFUNC)(void
          *, void *))
     Execute function USERFUNC for every <KEY:VALUE> pair in a set.
     USERFUNC must take two 'void *' values as input: a pointer to a key
     and a pointer to a value.  The order in which keys and values are
     passed to the function is unspecified.

 -- Function: void ncptl_set_remove (NCPTL_SET *SET, void *KEY)
     Remove a key and its associated value from a set.  The run-time
     library aborts with an error message if the key is not found in the
     set.

 -- Function: void ncptl_set_empty (NCPTL_SET *SET)
     Empty a set, freeing the memory that had been allocated for its
     contents.  The set itself can continue to be used and should be
     deallocated with 'ncptl_free()' (*note Memory-allocation
     functions::) when no longer needed.

 -- Function: ncptl_int ncptl_set_length (NCPTL_SET *SET)
     Return the number of <KEY:VALUE> pairs in set SET.


File: conceptual.info,  Node: Language-visible functions,  Next: Finalization functions,  Prev: Unordered-set functions,  Up: Run-time library functions

6.3.11 Language-visible functions
---------------------------------

The coNCePTuaL language contains a number of built-in functions that
perform various operations on floating-point numbers (used when writing
to a log file or the standard output device) and integers (used at all
other times) and that determine the IDs of neighboring tasks on a
variety of topologies.  Each function occurs in two forms:
'ncptl_func_FUNCTION', which maps 'ncptl_int's to 'ncptl_int's, and
'ncptl_dfunc_FUNCTION', which maps 'double's to 'double's.  *Note
Built-in functions::, for additional details about each function's
semantics.

   Although some of the functions described in this section are fairly
simple, including them in the run-time library ensures that each
function returns the same value across different backends and across
different platforms.

* Menu:

* Integer-function descriptions::  Mapping one integer to another
* Floating-point-function descriptions::  Mapping one FP number to another
* Topology-function descriptions::  Locating nearby tasks
* Random-number-function descriptions::  Choosing numbers at random


File: conceptual.info,  Node: Integer-function descriptions,  Next: Floating-point-function descriptions,  Prev: Language-visible functions,  Up: Language-visible functions

Integer functions
.................

 -- Function: ncptl_int ncptl_func_sqrt (ncptl_int NUM)
 -- Function: double ncptl_dfunc_sqrt (double NUM)
     'ncptl_func_sqrt()' returns the unique integer x such that x*x <=
     NUM and (x+1)*(x+1) > NUM.  'ncptl_dfunc_sqrt()' returns the square
     root of NUM in double-precision arithmetic.

 -- Function: ncptl_int ncptl_func_cbrt (ncptl_int NUM)
 -- Function: double ncptl_dfunc_cbrt (double NUM)
     'ncptl_func_cbrt()' returns the unique integer x such that x*x*x <=
     NUM and (x+1)*(x+1)*(x+1) > NUM. 'ncptl_dfunc_cbrt()' returns the
     cube root of NUM in double-precision arithmetic.

 -- Function: ncptl_int ncptl_func_root (ncptl_int ROOT, ncptl_int NUM)
 -- Function: double ncptl_dfunc_root (double ROOT, double NUM)
     Return the ROOTth root of a number NUM. 'ncptl_func_root()' returns
     the largest-in-magnitude integer X with the same sign as NUM such
     that |X^ROOT| <= |NUM|.  Currently, NUM must be nonnegative but
     this may change in a future release of coNCePTuaL.

 -- Function: ncptl_int ncptl_func_bits (ncptl_int NUM)
 -- Function: double ncptl_dfunc_bits (double NUM)
     Return the minimum number of bits needed to represent a given
     integer.  (NUM is rounded up to the nearest integer in the case of
     'ncptl_dfunc_bits()'.)

 -- Function: ncptl_int ncptl_func_shift_left (ncptl_int NUM, ncptl_int
          BITS)
 -- Function: double ncptl_dfunc_shift_left (double NUM, double BITS)
     Shift a number to the left by BITS bits.  This corresponds to
     multiplying NUM by 2^bits.  In the case of
     'ncptl_dfunc_shift_left()', NUM and BITS are first converted to
     'ncptl_int' values.  There are no corresponding
     'ncptl_func_shift_right()' or 'ncptl_dfunc_shift_right()' functions
     because shifting right by x is defined to be equivalent to shifting
     left by -x.

 -- Function: ncptl_int ncptl_func_log10 (ncptl_int NUM)
 -- Function: double ncptl_dfunc_log10 (double NUM)
     Return the base-10 logarithm of NUM.  In the case of
     'ncptl_func_log10()', this value is rounded down to the nearest
     integer.

 -- Function: ncptl_int ncptl_func_factor10 (ncptl_int NUM)
 -- Function: double ncptl_dfunc_factor10 (double NUM)
     Return NUM rounded down to the nearest single-digit factor of a
     power of 10.

 -- Function: ncptl_int ncptl_func_abs (ncptl_int NUM)
 -- Function: double ncptl_dfunc_abs (double NUM)
     Return NUM's absolute value.  In the case of 'ncptl_func_log10()',
     this value is rounded down to the nearest integer.

 -- Function: ncptl_int ncptl_func_power (ncptl_int BASE, ncptl_int
          EXPONENT)
 -- Function: double ncptl_dfunc_power (double BASE, double EXPONENT)
     Return BASE raised to the power of EXPONENT.

 -- Function: ncptl_int ncptl_func_modulo (ncptl_int NUMERATOR,
          ncptl_int DENOMINATOR)
 -- Function: double ncptl_dfunc_modulo (double NUMERATOR, double
          DENOMINATOR)
     Return the remainder of dividing NUMERATOR by DENOMINATOR.  The
     result is guaranteed to be a nonnegative integer.
     'ncptl_dfunc_modulo()' rounds each of NUMERATOR and DENOMINATOR
     down to the nearest integer before dividing and taking the
     remainder.

 -- Function: ncptl_int ncptl_func_min (ncptl_int COUNT, ...)
 -- Function: double ncptl_dfunc_min (double COUNT, ...)
     Return the minimum of a list of numbers.  The first argument
     specifies the number of remaining arguments and must be a positive
     integer.

 -- Function: ncptl_int ncptl_func_max (ncptl_int COUNT, ...)
 -- Function: double ncptl_dfunc_max (double COUNT, ...)
     Return the maximum of a list of numbers.  The first argument
     specifies the number of remaining arguments and must be a positive
     integer.


File: conceptual.info,  Node: Floating-point-function descriptions,  Next: Topology-function descriptions,  Prev: Integer-function descriptions,  Up: Language-visible functions

Floating-point functions
........................

 -- Function: ncptl_int ncptl_func_floor (ncptl_int NUM)
 -- Function: double ncptl_dfunc_floor (double NUM)
     Return the floor of NUM.  (This is the identity function in the
     case of 'ncptl_func_floor()'.)

 -- Function: ncptl_int ncptl_func_ceiling (ncptl_int NUM)
 -- Function: double ncptl_dfunc_ceiling (double NUM)
     Return the ceiling of NUM.  (This is the identity function in the
     case of 'ncptl_func_ceiling()'.)

 -- Function: ncptl_int ncptl_func_round (ncptl_int NUM)
 -- Function: double ncptl_dfunc_round (double NUM)
     Return NUM rounded to the nearest integer.  (This is the identity
     function in the case of 'ncptl_func_round()'.)


File: conceptual.info,  Node: Topology-function descriptions,  Next: Random-number-function descriptions,  Prev: Floating-point-function descriptions,  Up: Language-visible functions

Topology functions
..................

In the following functions, the 'dfunc' versions merely cast their
arguments to 'ncptl_int's and call the corresponding 'func' versions.

 -- Function: ncptl_int ncptl_func_tree_parent (ncptl_int TASK,
          ncptl_int ARITY)
 -- Function: double ncptl_dfunc_tree_parent (double TASK, double ARITY)
     Return task TASK's parent in an ARITY-ary tree.

 -- Function: ncptl_int ncptl_func_tree_child (ncptl_int TASK, ncptl_int
          CHILD, ncptl_int ARITY)
 -- Function: double ncptl_dfunc_tree_child (double TASK, double CHILD,
          double ARITY)
     Return child CHILD of task TASK in an ARITY-ary tree.

 -- Function: ncptl_int ncptl_func_mesh_coord (ncptl_int vartask,
          ncptl_int COORD, ncptl_int WIDTH, ncptl_int HEIGHT, ncptl_int
          DEPTH)
 -- Function: double ncptl_dfunc_mesh_coord (double vartask, double
          COORD, double WIDTH, double HEIGHT, double DEPTH)
     Return task TASK's x coordinate (COORD=0), y coordinate (COORD=1),
     or z coordinate (COORD=2) on a WIDTH*HEIGHT*DEPTH mesh (or torus).

 -- Function: ncptl_int ncptl_func_mesh_neighbor (ncptl_int WIDTH,
          ncptl_int HEIGHT, ncptl_int DEPTH, ncptl_int XTORUS, ncptl_int
          YTORUS, ncptl_int ZTORUS, ncptl_int TASK, ncptl_int XDELTA,
          ncptl_int YDELTA, ncptl_int ZDELTA)
 -- Function: double ncptl_dfunc_mesh_neighbor (double WIDTH, double
          HEIGHT, double DEPTH, double XTORUS, double YTORUS, double
          ZTORUS, double TASK, double XDELTA, double YDELTA, double
          ZDELTA)
     Return one of task TASK's neighbors--not necessarily an immediate
     neighbor--on a 3-D mesh or torus.  For the following explanation,
     assume that task TASK lies at coordinates (x, y, z) on a
     WIDTH*HEIGHT*DEPTH mesh or torus.  In the mesh case
     (XTORUS=YTORUS=ZTORUS=0), the value returned is the task ID
     corresponding to coordinates (x+XDELTA, y+YDELTA, z+ZDELTA).  In
     the full-torus case (XTORUS=YTORUS=ZTORUS=1), the value returned is
     the task ID corresponding to coordinates ((x+XDELTA) mod WIDTH,
     (y+YDELTA) mod HEIGHT, (z+ZDELTA) mod DEPTH).

   Note that there are no 1-D or 2-D grid functions.  Instead, the
appropriate 3-D function should be used with DEPTH and--in the 1-D
case--HEIGHT set to '1'.

 -- Function: ncptl_int ncptl_func_knomial_parent (ncptl_int TASK,
          ncptl_int ARITY, ncptl_int NUMTASKS)
 -- Function: double ncptl_dfunc_knomial_parent (double TASK, double
          ARITY, double NUMTASKS)
     Return task TASK's parent in an ARITY-nomial tree of NUMTASKS
     tasks.

 -- Function: ncptl_int ncptl_func_knomial_child (ncptl_int TASK,
          ncptl_int CHILD, ncptl_int ARITY, ncptl_int NUMTASKS,
          ncptl_int COUNT_ONLY)
 -- Function: double ncptl_dfunc_knomial_child (double TASK, double
          CHILD, double ARITY, double NUMTASKS, double COUNT_ONLY)
     If COUNT_ONLY is '0', return task TASK's CHILDth child in an
     ARITY-nomial tree of NUMTASKS tasks.  If COUNT_ONLY is '1', return
     the number of children task TASK has in an ARITY-nomial tree of
     NUMTASKS tasks.


File: conceptual.info,  Node: Random-number-function descriptions,  Prev: Topology-function descriptions,  Up: Language-visible functions

Random-number functions
.......................

 -- Function: ncptl_int ncptl_func_random_uniform (ncptl_int
          LOWER_BOUND, ncptl_int UPPER_BOUND)
 -- Function: double ncptl_dfunc_random_uniform (double LOWER_BOUND,
          double UPPER_BOUND)
     Return a number in the interval [LOWER_BOUND, UPPER_BOUND) selected
     at random with a uniform distribution.

 -- Function: ncptl_int ncptl_func_random_gaussian (ncptl_int MEAN,
          ncptl_int STDDEV)
 -- Function: double ncptl_dfunc_random_gaussian (double MEAN, double
          STDDEV)
     Return a number selected at random from a Gaussian distribution
     with mean MEAN and standard deviation STDDEV.

 -- Function: ncptl_int ncptl_func_random_poisson (ncptl_int MEAN)
 -- Function: double ncptl_dfunc_random_poisson (double MEAN)
     Return an integer selected at random from a Poisson distribution
     with mean MEAN and standard deviation sqrt(MEAN).

 -- Function: ncptl_int ncptl_func_random_pareto (ncptl_int SHAPE,
          ncptl_int LOWER_BOUND, ncptl_int UPPER_BOUND)
 -- Function: double ncptl_dfunc_random_pareto (double SHAPE, double
          LOWER_BOUND, double UPPER_BOUND)
     If LOWER_BOUND=UPPER_BOUND, return a value selected at random from
     a Pareto distribution with shape SHAPE and scale LOWER_BOUND.  If
     LOWER_BOUND<>UPPER_BOUND, return a value selected at random from a
     bounded Pareto distribution with shape SHAPE and bounded by the
     range [LOWER_BOUND, UPPER_BOUND].


File: conceptual.info,  Node: Finalization functions,  Prev: Language-visible functions,  Up: Run-time library functions

6.3.12 Finalization functions
-----------------------------

The following function should be called towards the end of the generated
code's execution.

 -- Function: void ncptl_finalize (void)
     Shut down the coNCePTuaL run-time library.  No run-time library
     functions should be invoked after 'ncptl_finalize()'.

 -- Function: void ncptl_fatal (char *FORMAT, ...)
     Output an error message and abort the program.  'ncptl_fatal()'
     takes the same types of arguments as C's 'printf()' routine.


File: conceptual.info,  Node: Tips and Tricks,  Next: Troubleshooting,  Prev: Implementation,  Up: Top

7 Tips and Tricks
*****************

The following sections present some ways to make better use of
coNCePTuaL in terms of producing simpler, more efficient programs or
being able to run on complex computer systems.

* Menu:

* Using out-of-bound task IDs to simplify code::  Exploiting dropped messages
* Proper use of conditionals::  When and when not to use IF...THEN
* Memory efficiency::           Reducing programs' memory usage
* Cross-compilation::           Compiling on one architecture to run on another
* Implicit dynamic-library search paths::  Not needing to set LD_LIBRARY_PATH
* Running without installing::  Compiling right from the build directory
* Reporting configuration information::  Self-describing coNCePTuaL libraries


File: conceptual.info,  Node: Using out-of-bound task IDs to simplify code,  Next: Proper use of conditionals,  Prev: Tips and Tricks,  Up: Tips and Tricks

7.1 Using out-of-bound task IDs to simplify code
================================================

*Note Task descriptions::, mentions a language feature that can
substantially simplify coNCePTuaL programs: Operations involving
out-of-bound task IDs are silently ignored.  The beauty of this feature
is that it reduces the need for special cases at network boundaries.
Consider, for example, a simple pipeline pattern in which each task in
turn sends a message to the subsequent task:

     ALL TASKS t SEND A 64 DOUBLEWORD MESSAGE TO TASK t+1.

   Because implicit receives are posted before the corresponding sends
(*note Sending::), all tasks except task 0 start by posting a blocking
receive.  (No task is sending to task 0.)  Task 0 is therefore free to
send a message to task 1.  Receipt of that message unblocks task 1, who
then sends a message to task 2, thereby unblocking task 3, and so forth.
Without needing an explicit special case in the program, task
'num_tasks-1' receives a message from task 'num_tasks-2' but does not
attempt to send a message to nonexistent task 'num_tasks', thanks to the
rule that communication with nonexistent tasks turns into a no-op (i.e.,
is elided from the program).

   As a more complex variation of the same program, consider a wavefront
communication pattern that progresses from the upper-left corner of a
mesh to the lower-right corner.  Such a pattern can be expressed in just
four lines of coNCePTuaL (receive left, receive up, send right, send
down) by relying on the property that communication with a nonexistent
task is simply not executed:

     TASK MESH_NEIGHBOR(src, xsize, +1, ysize,  0) RECEIVES A
       64 DOUBLEWORD MESSAGE FROM ALL TASKS src THEN
     TASK MESH_NEIGHBOR(src, xsize,  0, ysize, +1) RECEIVES A
       64 DOUBLEWORD MESSAGE FROM ALL TASKS src THEN
     ALL TASKS src SEND A 64 DOUBLEWORD MESSAGE TO
       UNSUSPECTING TASK MESH_NEIGHBOR(src, xsize, +1, ysize,  0) THEN
     ALL TASKS src SEND A 64 DOUBLEWORD MESSAGE TO
       UNSUSPECTING TASK MESH_NEIGHBOR(src, xsize,  0, ysize, +1).

   To understand the preceding program recall that 'MESH_NEIGHBOR'
returns '-1' for nonexistent neighbors.  Because '-1' is outside of the
range [0, 'num_tasks') communication with a nonexistent neighbor is
ignored.  To help the reader understand the preceding program, we
present a trace of the events it posts as it runs with a 2 by 2
arrangement of tasks:

     [TRACE] phys: 0 | virt: 0 | action: SEND | event: 1 / 2 | lines: 3 - 3
     [TRACE] phys: 1 | virt: 1 | action: RECV | event: 1 / 2 | lines: 1 - 1
     [TRACE] phys: 2 | virt: 2 | action: RECV | event: 1 / 2 | lines: 2 - 2
     [TRACE] phys: 3 | virt: 3 | action: RECV | event: 1 / 2 | lines: 1 - 1

     [TRACE] phys: 0 | virt: 0 | action: SEND | event: 2 / 2 | lines: 4 - 4
     [TRACE] phys: 1 | virt: 1 | action: SEND | event: 2 / 2 | lines: 4 - 4

     [TRACE] phys: 2 | virt: 2 | action: SEND | event: 2 / 2 | lines: 3 - 3

     [TRACE] phys: 3 | virt: 3 | action: RECV | event: 2 / 2 | lines: 2 - 2

   The 'c_trace' backend (*note The c_trace backend::) was used to
produce that trace.  To increase clarity, we manually added blank lines
to group concurrent events (i.e., there is no significance to the order
of the 'TRACE' lines within each group).  The important thing to notice
is that there are exactly four receives and exactly four sends:

   * Although all tasks are instructed to receive a message from the
     left, only tasks 1 and 3 actually do so;

   * although all tasks are instructed to receive a message from above,
     only tasks 2 and 3 actually do so;

   * although all tasks are instructed to send a message to the right,
     only tasks 0 and 2 actually do so; and,

   * although all tasks are instructed to send a message downwards, only
     tasks 0 and 1 actually do so.

Because communication with nonexistent tasks is elided at program
initialization time there is no run-time cost for such operations--as
evidenced by the 'c_trace' output presented above.  Furthermore, there
is no reliance on the backend to drop messages from nonexistent senders
or to nonexistent receivers; it is perfectly safe to utilize no-op'ed
communcation in any coNCePTuaL program and when using any backend.


File: conceptual.info,  Node: Proper use of conditionals,  Next: Memory efficiency,  Prev: Using out-of-bound task IDs to simplify code,  Up: Tips and Tricks

7.2 Proper use of conditionals
==============================

coNCePTuaL supports two forms of conditional execution: conditional
expressions (*note Arithmetic expressions::) and conditional statements
(*note Conditional execution::).  From the perspective of code
readability and "thinking in coNCePTuaL" it is generally preferable to
use restricted identifiers (*note Restricted identifiers::) to select
groups of tasks rather than a loop with a conditional as would be
typical in other programming languages.  For example, consider the
following code in which certain even-numbered tasks each send a message
to the right:

     FOR EACH evtask IN {0, ..., num_tasks-1}
       IF evtask IS EVEN /\ evtask MOD 3 <> 2 THEN
         TASK evtask SENDS A 64 BYTE MESSAGE TO TASK evtask+1

While the preceding control flow is representative of that in other
programming languages, coNCePTuaL can express the same communication
pattern without needing either a loop or an explicit conditional
statement:

     TASK evtask SUCH THAT evtask IS EVEN /\ evtask MOD 3 <> 2 SENDS A 64
     BYTE MESSAGE TO TASK evtask+1

   One situation in which conditional statements do not have a
convenient analogue is when a program selects among multiple disparate
subprograms based on a command-line parameter:

     func IS "Operation to perform (1=OP1; 2=OP2; 3=OP3)" AND COMES FROM
     "--function" OR "-f" WITH DEFAULT 1.

     ASSERT THAT "the function must be 1, 2, or 3" WITH func>=1 /\ func<=3.

     IF func = 1 THEN {
       Perform operation OP1.
     }
     OTHERWISE IF func = 2 THEN {
       Perform operation OP2.
     }
     OTHERWISE IF func = 3 THEN {
       Perform operation OP3.
     }


File: conceptual.info,  Node: Memory efficiency,  Next: Cross-compilation,  Prev: Proper use of conditionals,  Up: Tips and Tricks

7.3 Memory efficiency
=====================

As described in *note Generated code::, the 'c_generic' backend (and
therefore all derived backends) generates programs that run by executing
a sequence of events in an event list.  While this form of program
execution makes it possible to hoist a significant amount of computation
out of the timing loop, it does imply that a program's memory
requirements are proportional to the number of statements that the
program executes.

   coNCePTuaL's memory usage can be reduced by taking advantage of
repeat counts within statements that support such a construct.  The
language's <SEND_STMT> (*note Sending::), <RECEIVE_STMT> (*note
Receiving::), and <TOUCH_STMT> (*note Touching memory::) are all
examples of statements that accept repeat counts.  For other statements
and for groups of statements that repeat, the 'FOR'...'REPETITIONS'
statement produces a single 'EV_REPEAT' event followed by a single
instance of the events in the loop body.  This technique is valid
because coNCePTuaL knows a priori that every iteration is identical to
every other iteration.  In contrast, the more general 'FOR EACH'
statement can induce different behavior each iteration based on the
value of the loop variable so programs must conservatively instantiate
the events in the loop body for every iteration.  Consider the following
examples:

_Least efficient:_
     'FOR EACH i IN {1, ..., 1000} TASK 0 TOUCHES A 1 WORD MEMORY
     REGION'
     (1000 'EV_TOUCH' events on task 0)

_More efficient:_
     'FOR 1000 REPETITIONS TASK 0 TOUCHES A 1 WORD MEMORY REGION'
     (an 'EV_REPEAT' event and an 'EV_TOUCH' event on task 0)

_Most efficient:_
     'TASK 0 TOUCHES A 1 WORD MEMORY REGION 1000 TIMES'
     (one 'EV_TOUCH' event on task 0)


_Least efficient:_
     'FOR EACH i IN {1, ..., 1000} TASK 0 SENDS A 32 KILOBYTE MESSAGE TO
     TASK 1'
     (1000 'EV_SEND' events on task 0 and 1000 'EV_RECV' events on
     task 1)

_More efficient:_
     'FOR 1000 REPETITIONS TASK 0 SENDS A 32 KILOBYTE MESSAGE TO TASK 1'

     (an 'EV_REPEAT' event and an 'EV_SEND' event on task 0 plus an
     'EV_REPEAT' event and an 'EV_RECV' event on task 1)

_Most efficient:_
     'TASK 0 SENDS 1000 32 KILOBYTE MESSAGES TO TASK 1'
     (currently the same as the above although a future release of
     coNCePTuaL may reduce this to a single 'EV_SEND' event on task 0
     and a single 'EV_RECV' event on task 1)


File: conceptual.info,  Node: Cross-compilation,  Next: Implicit dynamic-library search paths,  Prev: Memory efficiency,  Up: Tips and Tricks

7.4 Cross-compilation
=====================

Some experimental architectures lack native compilers and therefore
require programs to be compiled on an architecturally distinct front-end
machine.  coNCePTuaL can be configured to support such an arrangement.
As an example, we follow how coNCePTuaL was recently configured to run
on a Cray/SNL Red Storm prototype.  The Red Storm prototype requires
programs to be cross-compiled from a compile server then launched from
an execution server to run on the compute nodes.  The CPUs in all three
node types use the x86-64 architecture but the compile server and
execution server run Linux while the compute nodes run the lightweight
Catamount kernel.  Cross-compilation is necessary to prevent the
'./configure' script that runs on the compile server from attempting to
execute small programs to test run-time features--these would be
guaranteed to fail.

   './configure' (*note configure::) enters cross-compilation mode if
the build system--specified with '--build'--has a different CPU, comes
from a different vendor, or runs a different operating system from the
execution system--specified with '--host'.  The 'config.guess' script
outputs the build-system type in the form CPU-VENDOR-OPERATING SYSTEM:

     % ./config.guess
     x86_64-unknown-linux-gnu

(That is, the CPU architecture is 'x86_64'; the computer vendor is
'unknown'; and, the operating system is 'linux-gnu'.)

   As a special case of cross-compilation, if the build system and
execution system utilize the same CPU and operating system(1) (but
presumably differ in terms of other feature), './configure' provides a
'--with-cross-compilation' option to force a cross-compile.  The
alternative is to modify one of the build-system name components; best
is to modify the vendor component as that's used solely for
informational purposes.  For our Red Storm configuration (which predated
the '--with-cross-compilation' option) we renamed VENDOR from 'unknown'
to 'cray'.

   Because 'configure' assumes it cannot execute small test programs on
the execution system, it is unable to determine valid memory-buffer
alignments.  Consequently, the '--with-alignment' option must also be
passed to 'configure' to specify explicitly the minimum number of bytes
at which data must be aligned.  (If not specified, the minimum alignment
defaults to '8'.)  We know a priori that the x86-64 architecture can
support byte-aligned data.  Hence, we specify '--with-alignment=1'.

   A command line like the following was used to configure coNCePTuaL
for the Red Storm prototype:

     % ./configure --build=x86_64-unknown-linux-gnu --host=x86_64-cray-linux-gnu
         --with-alignment=1 CC=mpicc

   Once coNCePTuaL is configured to cross-compile, there is nothing
special about performing the compilation itself.  The 'make' command
runs unmodified from its description in *note make::.

   Running 'make check' can be tricky because it involves both
compilation and execution.  As stated previously, these cannot be
performed on the same servers in the Red Storm prototype.  The solution
is first to run 'make check' on the compile server.  This compiles all
of the coNCePTuaL regression tests--and unsuccessfully attempts to run
them.  Then, when 'make check' is run on the execution server it does
not need to compile any of the tests (which it can't do successfully,
anyway) but can simply run each of them.

   One catch is that the Red Storm execution server cannot directly run
compute-node programs.  Rather, it needs to spawn a job launcher ('yod')
for each test program.  The mechanism for doing this is the
'TESTS_ENVIRONMENT' variable, which 'make check' prepends to every
command it executes.  We were therefore able to regression-test the
coNCePTuaL run-time library on the Red Storm prototype with the
following command:

     % make TESTS_ENVIRONMENT="yod -list 4" check

   If the system for which you're cross-compiling is unable to run
Python or unable to build the interpreter-based backends, you might
consider building coNCePTuaL twice--cross-compiled for the target system
and compiled regularly for the front-end system.  The '--prefix' option
to 'configure' (*note configure::) specifies the top-level directory for
the coNCePTuaL installation.

   ---------- Footnotes ----------

   (1) As long as the host and build operating systems have moderately
similar interfaces (e.g., both are Unix-like) and the same CPU
architecture (e.g., both are x86-64 variants),
'--with-cross-compilation' should be applicable.


File: conceptual.info,  Node: Implicit dynamic-library search paths,  Next: Running without installing,  Prev: Cross-compilation,  Up: Tips and Tricks

7.5 Implicit dynamic-library search paths
=========================================

By default, coNCePTuaL installs both a static and dynamic library with
the dynamic library taking precedence (at least on most Unix and
Unix-like operating systems).  While dynamic libraries offer a number of
benefits--such as not requiring applications to be relinked every time a
library is upgraded--one inconvenience is the need to set the
'LD_LIBRARY_PATH' environment variable to point to the coNCePTuaL
library directory if the coNCePTuaL run-time library is not installed in
a standard location (e.g., '/usr/lib').

   An alternative to setting 'LD_LIBRARY_PATH' is to specify the target
library directory at configuration time via the 'LDFLAGS' variable and
let the linker embed that directory into the coNCePTuaL run-time
library's dynamic search path.  Many linkers accept a '-rpath' option
for exactly that purpose.  With the GNU C compiler and linker the
appropriate option is 'LDFLAGS="-Wl,-rpath,DIRECTORY"' (e.g.,
'LDFLAGS="-Wl,-rpath,/usr/local/ncptl/lib"').  Other compilers may have
analogous mechanisms for passing flags directly to the linker.


File: conceptual.info,  Node: Running without installing,  Next: Reporting configuration information,  Prev: Implicit dynamic-library search paths,  Up: Tips and Tricks

7.6 Running without installing
==============================

You can compile coNCePTuaL programs without having first to do a
'make install' by using the same mechanism as was discussed in *note
Implicit dynamic-library search paths::.

   First, Libtool builds the coNCePTuaL run-time library in the '.libs'
subdirectory.  Hence, you should add 'LDFLAGS="-L`pwd`/.libs
-Wl,-rpath,`pwd`/.libs"' to the './configure' command line (*note
configure::) to point both the static and dynamic linkers to the
coNCePTuaL build directory.

   Second, coNCePTuaL-generated C code specifies '#include
<ncptl/ncptl.h>'.  To ensure that the generated code can find 'ncptl.h'
you should add 'CPPFLAGS="-I`pwd`"' to the './configure' command line to
point the C compiler to the coNCePTuaL build directory.  Then, create a
symbolic link from the coNCePTuaL build directory to an 'ncptl'
directory by running 'ln -s `pwd` ncptl' from the build directory.

   After running './configure' and 'make', you can compile coNCePTuaL
programs by invoking the compiler as './ncptl.py' instead of the usual
'ncptl'.


File: conceptual.info,  Node: Reporting configuration information,  Prev: Running without installing,  Up: Tips and Tricks

7.7 Reporting configuration information
=======================================

On platforms that support it, the coNCePTuaL run-time library is also an
executable program that can be run from the command line.  Executing the
library outputs to the standard output device a complete log-file
prologue and epilogue but no data.(1)  This feature makes it quite
convenient to determine all of the configuration options, compiler
features, etc. that were used to build the run-time library.

   ---------- Footnotes ----------

   (1) This is the same information produced by 'make empty.log' (*note
make::).


File: conceptual.info,  Node: Troubleshooting,  Next: Reserved Words,  Prev: Tips and Tricks,  Up: Top

8 Troubleshooting
*****************

In any complex system, things are bound to go wrong.  The following
sections present solutions to various problems that have been
encountered when building coNCePTuaL and running coNCePTuaL programs.

* Menu:

* Problems with configure::     What to do when configure fails
* Problems with make::          What to do when make fails
* Problems running::            What to do when a generated program fails
* When all else fails::         Contacting the coNCePTuaL developers


File: conceptual.info,  Node: Problems with configure,  Next: Problems with make,  Prev: Troubleshooting,  Up: Troubleshooting

8.1 Problems with configure
===========================

For typical coNCePTuaL usage, the most important function of the
'configure' script is to prepare the system to build the coNCePTuaL
run-time library.  coNCePTuaL's functionality is severely restricted
without that library.  This section provides information to help ensure
that configuration succeeds.

* Menu:

* Interpreting configure warnings::  General problem-solving instructions
* PRId64 is not a valid printf conversion specifier::  A common problem on BSD
* present but cannot be compiled::  Warning messages involving header files
* Checking maximum line length is slow::  A pathologically slow configure test
* configure is slow::           All configure tests are pathologically slow
* Problems with ``C compiler used for Python extension modules''::  Can't link
* Manual configuration::        Bypassing configure entirely


File: conceptual.info,  Node: Interpreting configure warnings,  Next: PRId64 is not a valid printf conversion specifier,  Prev: Problems with configure,  Up: Problems with configure

8.1.1 Interpreting configure warnings
-------------------------------------

The 'configure' script performs a large number of tests to ensure that
coNCePTuaL will compile properly and function as expected.  In
particular, any missing or improperly functioning feature upon which the
C run-time library relies causes './configure' to issue a 'not building
the C run-time library' warning.  Without its run-time library,
coNCePTuaL's functionality is severely limited so it's worth every
effort to get './configure' to build that.

   Like all Autoconf scripts, 'configure' logs detailed information to a
'config.log' file.  As a general diagnostic technique one should search
for puzzling output in 'config.log' and examine the surrounding context.
For instance, on one particular system, './configure' output 'no'
following 'checking if we can run a trivial program linked with "-lrt
-lm -lpopt "' and then refused to build the run-time library.  The
following relevant lines appeared in 'config.log':

     configure:12845: checking if we can run a trivial program linked with "-lrt
     -lm -lpopt "
     configure:12862: /usr/local/bin/gcc  -o conftest -g -O2   conftest.c -lrt
     -lm -lpopt  >&5
     configure:12865: $? = 0
     configure:12867: ./conftest
     ld.so.1: ./conftest: fatal: libpopt.so.0: open failed: No such file or
     directory
     ./configure: line 1:  5264 Killed                  ./conftest$ac_exeext
     configure:12870: $? = 137
     configure: program exited with status 137
     configure: failed program was:
     ##include "confdefs.h"

     int
     main (int argc, char *argv[])
     {
       return 0;
     }
     configure:12879: result: no

   Note the error message from 'ld.so.1' about 'libpopt.so.0' not being
found.  Further investigation revealed that although
'/usr/local/bin/gcc' knew to look in '/usr/local/lib/' for shared
libraries, that directory was not in the search path utilized by
'ld.so.1'.  Consequently, it couldn't find
'/usr/local/lib/libpopt.so.0'.  The solution in this case was to add
'/usr/local/lib/' to the 'LD_LIBRARY_PATH' environment variable before
running './configure'.

   In general, 'config.log' should be the first place to look when
trying to interpret warnings issued by './configure'.  Furthermore, note
that certain command-line options to './configure' (*note configure::)
may help bypass problematic operations that the script stumbles over.


File: conceptual.info,  Node: PRId64 is not a valid printf conversion specifier,  Next: present but cannot be compiled,  Prev: Interpreting configure warnings,  Up: Problems with configure

8.1.2 'PRId64 is not a valid printf conversion specifier'
---------------------------------------------------------

The following configuration warning was encountered on various BSD Unix
systems (OpenBSD 3.4 and FreeBSD 4.10-BETA, both IA-32) and inhibited
the building of the coNCePTuaL run-time library:

     PRId64 is not a valid printf conversion specifier for values of type int64_t

   The 'config.log' file indicated the source of the problem was a
'syntax error before `PRId64'' that was reported when compiling a sample
program.  A brief search revealed that the 'PRId64' macro is not defined
in any of the standard C header files on the systems in question.  The
solution turned out to be to configure with './configure
--with-printf-format='"lld"'' to instruct the C compiler to use
'printf()' format strings such as '%lld' when outputting 64-bit signed
integers.  The extra pair of double quotes is required because the
conversion specifier is used in constructs like the following:

     printf ("The number is %10" CONVERSION-SPECIFIER "!\n", num);

Most--but apparently not all--C compilers define the 'PRId64' macro
("'PRI'nt signed 'd'ecimal number of length '64' bits") in one the
standard header files.  Typical values of 'PRId64' include the strings
'"lld"' and '"ld"'.


File: conceptual.info,  Node: present but cannot be compiled,  Next: Checking maximum line length is slow,  Prev: PRId64 is not a valid printf conversion specifier,  Up: Problems with configure

8.1.3 Header is 'present but cannot be compiled'
------------------------------------------------

On some platforms './configure' may output one or more warnings of the
following form:

     WARNING: FILENAME.h: present but cannot be compiled
     WARNING: FILENAME.h:     check for missing prerequisite headers?
     WARNING: FILENAME.h: see the Autoconf documentation
     WARNING: FILENAME.h:     section "Present But Cannot Be Compiled"
     WARNING: FILENAME.h: proceeding with the preprocessor's result
     WARNING: FILENAME.h: in the future, the compiler will take precedence
     WARNING:     ## ----------------------------- ##
     WARNING:     ## Report this to pakin@lanl.gov ##
     WARNING:     ## ----------------------------- ##

   Typically, such warnings indicate that the header file in question
was written for one compiler but a different compiler is being used to
build coNCePTuaL.  Unless the header file in question poses problems
during the run of 'make', the 'present but cannot be compiled' warnings
can be ignored and there is no need to report the compiler-preprocessor
mismatch to the e-mail address shown.


File: conceptual.info,  Node: Checking maximum line length is slow,  Next: configure is slow,  Prev: present but cannot be compiled,  Up: Problems with configure

8.1.4 Slow 'checking the maximum length of command line arguments...'
---------------------------------------------------------------------

Recent versions of Libtool need to know the maximum supported
command-line length.  Normally, 'configure' determines this value by
invoking a test script with successively longer command lines until such
an invocation fails.  On most platforms, the maximum command-line length
is determined almost instantaneously.  However, on one test system, a
600MHz x86 running the original--not GNU--Bourne shell under Solaris,
'./configure' was stuck 'checking the maximum length of command line
arguments...' for approximately 45 _minutes_.

   Inspecting the 'configure' script revealed that the result of
executing the length-checking code in 'configure' is an assignment to
the 'lt_cv_sys_max_cmd_len' shell variable.  Consequently, running
'./configure lt_cv_sys_max_cmd_len=8192' (or some other conservative
estimate of the maximum command-line length) caused './configure' to
skip the unduly slow length-checking test and use the given value
instead.


File: conceptual.info,  Node: configure is slow,  Next: Problems with ``C compiler used for Python extension modules'',  Prev: Checking maximum line length is slow,  Up: Problems with configure

8.1.5 'configure' is slow
-------------------------

On a few systems, './configure' has been observed to take an extremely
long time to run.  A common source of the problem is a slow filesystem.
During the course of its execution the 'configure' script creates and
compiles a large number of small files.  If the current directory
resides in a filesystem that exhibits poor small-file performance, then
this may explain why './configure' runs slowly.  Try to configure
coNCePTuaL from a local filesystem (e.g., '/tmp') and see if it runs
faster.

   A second source of poor coNCePTuaL configuration speed regards poor
implementations of the Bourne shell.  One test system, a 1.9GHz PowerPC
running the original--not GNU--Bourne shell under AIX, took several
_hours_ to run './configure' to completion.  Fortunately, the system
adminstrator had installed the GNU Bourne Again shell ('bash'), which
does not exhibit the same poor performance as the default Bourne shell.
'./configure' can be instructed to use 'bash'--or any Bourne-compatible
shell--by setting the 'CONFIG_SHELL' environment variable:

     env CONFIG_SHELL=/usr/local/bin/bash ./configure

   The preceding command reduced configuration time from over two hours
to under two minutes.


File: conceptual.info,  Node: Problems with ``C compiler used for Python extension modules'',  Next: Manual configuration,  Prev: configure is slow,  Up: Problems with configure

8.1.6 Problems with 'C compiler used for Python extension modules'
------------------------------------------------------------------

The following message from 'configure' is not uncommon:

      * Not building the Python interface to the coNCePTuaL run-time
        library because the C compiler used for Python extension modules
        (gcc -pthread) can't link against the output of gcc

Without the Python interface, none of the Python-based backends can be
built, either:

      * Not installing the coNCePTuaL interpreter because it depends upon
        the Python interface to the coNCePTuaL run-time library
      * Not installing the statistics backend because it depends upon the
        coNCePTuaL interpreter
      * Not installing the PICL backend because it depends upon the
        coNCePTuaL interpreter
      * Not installing the Paraver backend because it depends upon the
        coNCePTuaL interpreter
      * Not installing the LaTeX visualization backend because it depends
        upon the coNCePTuaL interpreter

   Note that coNCePTuaL is still quite usable without the Python-based
backends; the C+MPI backend (*note The c_mpi backend::), for example,
does not rely on Python.

   A typical cause of the 'can't link' message is that the 'configure'
script is unable to locate the Python development files that are needed
to build a Python module.  Most Python installations exclude the
development files by default, requiring that they be installed
separately.  In some Linux distributions these files are provided by a
package with a name like 'python-dev'.  A key file to look for is
'Python.h'.  If './configure' cannot find 'Python.h', the 'can't link'
message will almost certainly appear.


File: conceptual.info,  Node: Manual configuration,  Prev: Problems with ``C compiler used for Python extension modules'',  Up: Problems with configure

8.1.7 Manual configuration
--------------------------

One of the most important by-products of running './configure' is a
'config.h' file that is used to build the coNCePTuaL run-time library.
If the approach outlined in *note Interpreting configure warnings::
proves unable to convince coNCePTuaL to build the library or other
component, it may be possible to address the failed tests manually by
editing any incorrect definitions in 'config.h'.  In addition, running
'./configure' with the '--enable-broken-components' option will force
'make' to attempt to build and install _everything_, no matter how
unlikely the prospects of success are.  You may need to 'make'
individual rules from the makefile in order to skip over unsalvageable
parts of the build process.

   The '--with-header-code' option to 'configure' lets you specify a
single line of C code to insert into every test file that 'configure'
generates and also into the header files used to build the run-time
library.  This extra line of code can be used to make up for missing
functionality or to load nonstandard header files.  If you need to
inject more than one line of code use './configure
--with-header=code='#include "myheaders.h"'' and create an appropriate
'myheaders.h' file.

   Like all Autoconf scripts, 'configure' runs a large number of small
test programs to characterize the user's system.  It keeps track of the
results of these tests in a set of "variables cache variables".  If a
cache variable is assigned a value on the command line, 'configure' will
skip the associated test and simply assume that the cache variable's
value represents the test result.  Thus, cache variables provide a fine
level of control over the behavior of the 'configure' script and are a
useful mechanism for working around the idiosyncrasies of any given
system.  *Note Cache Variables::, for a list of many of the variables
cache variables recognized by the coNCePTuaL 'configure' script.

   It is highly unlikely that './configure' will fail completely.  If it
does, a working coNCePTuaL system may still be possible.  Manually edit
'config.h' for your system.  (If 'config.h' could not be created, copy
'config.h.in' to 'config.h'.)  Do likewise for 'ncptl.h'.  Finally, copy
'Makefile.simple.in' to 'Makefile.simple' if necessary and replace all
text bracketed by at signs with appropriate values or blanks.  In
particular, '@DEFS@' should be replaced by the string '-DHAVE_CONFIG_H'
as this instructs the various C files to include 'config.h'.  *Note
Building on problematic platforms::, for more information about
'Makefile.simple'.  Although 'Makefile.in' can be copied to 'Makefile'
and edited, doing so requires many more string replacements.  The
advantage is that the result will support all of the options described
in *note make::.


File: conceptual.info,  Node: Problems with make,  Next: Problems running,  Prev: Problems with configure,  Up: Troubleshooting

8.2 Problems with make
======================

Once coNCePTuaL is configured, the next step is to build the various
components.  This section explains what to do if a compile fails or
'make' is otherwise unable to perform all of its operations.

* Menu:

* Failure following "missing" check::  Spurious rebuilding of Autotools files
* Too many columns in multitable item::  Building Emacs info files
* Can't find compiler_version.h::  Running 'make install' properly
* Could not read symbols::      Linking with the correct libraries
* Incorrect tools/flags are utilized::  ncptl ignores configure variables
* Compaq compilers on Alpha CPUs::  Dealing with compiler idiosyncrasies
* undefined type found DEFINE____::  Thwarting an excessively "smart" cpp
* "makehelper.py config" fails::  Using Cygwin Python with a non-Cygwin cpp
* Building on problematic platforms::  Hacking makefiles by hand


File: conceptual.info,  Node: Failure following "missing" check,  Next: Too many columns in multitable item,  Prev: Problems with make,  Up: Problems with make

8.2.1 Failure following 'missing' check
---------------------------------------

The 'Makefile' produced by './configure' sometimes gets confused into
thinking that it needs to recreate one or more of the GNU Autotools
build files such as 'aclocal.m4', 'config.h.in', 'configure', or
'Makefile.in'.  A symptom of this confusion is an error message
following an invocation of the 'missing' script:

     $ make
     cd . && /bin/sh ./config.status ncptl.h
     config.status: creating ncptl.h
     config.status: ncptl.h is unchanged
     cd . && /bin/sh /home/me/conceptual-1.5.1/missing --run autoheader
                     [Error message appears here.]

   The source of the problem is usually an incongruous timestamp on some
file relative to that of some other file.  Unfortunately, identifying
the files in question can be difficult.  The quick fix is to edit the
'missing' script, putting 'exit 0' at the beginning of the file, right
after the '#! /bin/sh' line.  This tells the 'Makefile' that none of the
GNU Autotools build files need to be recreated.


File: conceptual.info,  Node: Too many columns in multitable item,  Next: Can't find compiler_version.h,  Prev: Failure following "missing" check,  Up: Problems with make

8.2.2 'Too many columns in multitable item'
-------------------------------------------

Very old versions of 'makeinfo' are unable to process 'conceptual.texi'
into Emacs 'info'-format documentation; instead, they fail with a large
number of 'Too many columns in multitable item (max 1)' errors.  Simply
re-running 'make' should bypass the failing documentation-building step.


File: conceptual.info,  Node: Can't find compiler_version.h,  Next: Could not read symbols,  Prev: Too many columns in multitable item,  Up: Problems with make

8.2.3 Can't find 'compiler_version.h'
-------------------------------------

The coNCePTuaL build process currently requires 'make' to be executed
before 'make install'.  Skipping the 'make' step results in a
'compiler_version.h' error resembling the following:

     logfilefuncs.c:18:30: compiler_version.h: No such file or directory

   Ergo, make sure always to run 'make' before running 'make install'.


File: conceptual.info,  Node: Could not read symbols,  Next: Incorrect tools/flags are utilized,  Prev: Can't find compiler_version.h,  Up: Problems with make

8.2.4 'could not read symbols'
------------------------------

An attempt to link the coNCePTuaL run-time library on one x86-64 Linux
platform aborted with the following error:

     /usr/lib/libpopt.so: could not read symbols: File in wrong format

An attempt on another x86-64 Linux platform aborted with a similar
error:

     /usr/lib/libpopt.so: could not read symbols: Invalid operation

   The problem on both platforms turned out to be that the
'/usr/lib/libpopt.so' is a 32-bit binary and could not be linked with a
64-bit library.  The solution was to configure with './configure
LDFLAGS=-L/usr/lib64' to indicate that libraries should be read from
'/usr/lib64' instead of the default of '/usr/lib64'.


File: conceptual.info,  Node: Incorrect tools/flags are utilized,  Next: Compaq compilers on Alpha CPUs,  Prev: Could not read symbols,  Up: Problems with make

8.2.5 Incorrect tools/flags are utilized
----------------------------------------

You might find that although you specified a particular tool or flag at
configuration time (e.g., with 'MPICC=mympicompiler'; see *note
configure::), the 'ncptl' compiler seems to ignore it.  A likely culprit
is that an environment variable with the same name as the configuration
parameter is set (e.g., the 'MPICC' environment variable may be set to
'othermpicompiler') and therefore overrides all prior settings.  This
situation sometimes arises when a compiler or MPI library is made
available using the Environment Modules system (e.g., with the
'module load' command).

   The solution is simply to undefine or properly redefine the offending
environment variable.  In most Unix environments the 'env' command can
be used to redefine an environment variable for the duration of a single
command:

     env MPICC=mympicompiler ncptl --backend=c_mpi myprogram.ncptl


File: conceptual.info,  Node: Compaq compilers on Alpha CPUs,  Next: undefined type found DEFINE____,  Prev: Incorrect tools/flags are utilized,  Up: Problems with make

8.2.6 Compaq compilers on Alpha CPUs
------------------------------------

Although coNCePTuaL builds fine on Alpha-based systems when using a
'gcc' compiler, Compaq's C compilers are sometimes problematic.  For
instance, the 'libncptl_wrap.c' source file fails to compile on a system
with the following versions of the operating system, C compiler, and
Python interpreter:

     % uname -a
     OSF1 qsc14 V5.1 2650 alpha
     % cc -V
     Compaq C V6.5-011 on Compaq Tru64 UNIX V5.1B (Rev. 2650)
     Compiler Driver V6.5-003 (sys) cc Driver
     % python -V
     Python 2.3

   On the system that was tested, 'cc' aborts with a set of 'Missing
type specifier or type qualifier' messages.  The problem appears to be
that some of Compaq's standard C header files fail to '#include' various
header files they depend upon.  A workaround is to insert the following
C preprocessor directives in 'libncptl_wrap.c' before the line reading
'#include "Python.h"':

     #include <sys/types.h>
     #include <sys/time.h>
     #include <sys/stat.h>


   A second problem with Compaq compilers on Alpha-based systems occurs
under Linux when using Compaq's 'ccc' compiler:

     % uname -a
     Linux wi 2.4.21-3.7qsnet #2 SMP Fri Oct 17 14:08:00 MDT 2003 alpha unknown
     % ccc -V
     Compaq C T6.5-002 on Linux 2.4.21-3.7qsnet alpha
     Compiler Driver T6.5-001 (Linux) cc Driver
     Installed as ccc-6.5.6.002-1
     Red Hat Linux release 7.2 (Enigma)
     Using /usr/lib/gcc-lib/alpha-redhat-linux/2.96 (4).

When linking files into a shared object, 'ccc' aborts with a
'[...]/.libs: file not recognized: Is a directory' error message.  The
problem appears to be that 'libtool' is confused about the arguments
it's supposed to pass to the linker; 'libtool' uses '--rpath' (two
hyphens) where the Compaq linker expects '-rpath' (one hyphen).  As a
workaround, you can edit the 'libtool' file after running './configure'
but before running 'make'.  Simply replace '--rpath' with '-rpath' in
the following 'libtool' line and the problem should go away:

     hardcode_libdir_flag_spec="\${wl}--rpath \${wl}\$libdir"


File: conceptual.info,  Node: undefined type found DEFINE____,  Next: "makehelper.py config" fails,  Prev: Compaq compilers on Alpha CPUs,  Up: Problems with make

8.2.7 'undefined type, found `DEFINE_____''
-------------------------------------------

The GCC 2.95.2 compiler on at least one MacOS 10.1 system complains
repeatedly about an 'undefined type, found `DEFINE_____'' while trying
to preprocess a data file generated by 'makehelper.py' and based upon
the contents of 'config.h' 'substitutions.dat'.  Fortunately, the
complaint is only a warning and can be ignored.  The problem is that the
C preprocessor performs "smart preprocessing" if given a filename on the
command line (as is the case here) but "basic preprocessing" when
reading from the standard input device.  Because the input does not
represent syntactically correct C code--the C preprocessor is used only
as a convenient device for performing macro substitutions--the
syntax-aware smart preprocessing fails.  However, the C preprocessor
then reprocesses the file with basic preprocessing (as indicated by the
message 'cpp-precomp: warning: errors during smart preprocessing,
retrying in basic mode') and succeeds.


File: conceptual.info,  Node: "makehelper.py config" fails,  Next: Building on problematic platforms,  Prev: undefined type found DEFINE____,  Up: Problems with make

8.2.8 'makehelper.py config' fails
----------------------------------

When 'makehelper.py' is run with the 'config' option, it generates a
temporary '.c' file that it runs through the C preprocessor.  Problems
(e.g., a 'gcc.exe: no input files' error message) may occur when running
under Cygwin (a Unix-like user environment for Microsoft Windows) with a
Cygwin Python interpreter but a non-Cygwin C preprocessor
(e.g., MinGW's) because 'makehelper.py' may try to pass a Unix-style
filename to the C preprocessor, which expects to receive a Windows-style
filename.

   A workaround is to specify explicitly a temporary directory for
'makehelper.py' to use.  Use forward slashes and filenames without
spaces (e.g., DOS-style 8.3 filenames) as in the following example:

     make TEMP=C:/DOCUME~1/user/LOCALS~1/Temp


File: conceptual.info,  Node: Building on problematic platforms,  Prev: "makehelper.py config" fails,  Up: Problems with make

8.2.9 Building on problematic platforms
---------------------------------------

Some experimental systems require rather specialized build procedures
that thwart coNCePTuaL's standard makefile.  Unfortunately, 'Makefile'
is complex and difficult to edit by hand.  Users comfortable with
Automake should edit 'Makefile.am'--which is used to generate
'Makefile'--and re-run 'automake', 'autoconf', and './configure' as
described in *note make::.

   coNCePTuaL includes an alternate Makefile called 'Makefile.simple'
(generated at configuration time from 'Makefile.simple.in').
'Makefile.simple' is a stripped-down version of 'Makefile' that is
designed to be easy to edit by hand.  'make -f Makefile.simple' builds a
static version of the coNCePTuaL run-time library in the current
directory.  'make -f Makefile.simple clean' deletes the run-time library
and all of the object files used to build it. 'Makefile.simple' supports
no other features.  The intention is to provide the bare minimum needed
to get backends such as 'c_mpi' to produce executable programs even when
running in unusual environments.


File: conceptual.info,  Node: Problems running,  Next: When all else fails,  Prev: Problems with make,  Up: Troubleshooting

8.3 Problems running
====================

After coNCePTuaL is configured, compiled, built, and installed, there is
still the chance that coNCePTuaL-generated executables fail to run.
This section addresses some common problems and presents their
solutions.

   As a quick tip, a very conservative way to run a coNCePTuaL program
is with the 'NCPTL_NOFORK' environment variable set to '1', the
'NCPTL_CHECKPOINT' environment variable set to '0', and with
'--no-trap=1-63' on the command line.  Such usage should work around
some of the most common--and some of the hardest to diagnose--problems
that may impact a coNCePTuaL program.  Read the corresponding sections
(*note Miscellaneous mysterious hangs or crashes::; *note Extremely
noisy measurements::; and, *note Keeping programs from dying on a
signal::) for information about the drawbacks of each of the preceding
settings.

* Menu:

* ``cannot open shared object file''::  Preventing problems with libncptl.so
* Miscellaneous mysterious hangs or crashes::  Programs die inexplicably
* Extremely noisy measurements::  Data exhibits excessive variability
* Keeping programs from dying on a signal::  Handling unexpected terminations
* ``Unaligned access'' warnings::  What these mean and how to prevent them
* ``Unable to determine the OS page size''::  Specifying page sizes
* Invalid timing measurements::  coNCePTuaL's timer is completely wrong
* ``TeX capacity exceeded''::   Problems drawing complex diagrams with latex_vis
* Bad bounding boxes from latex_vis::  Generated pictures are truncated


File: conceptual.info,  Node: ``cannot open shared object file'',  Next: Miscellaneous mysterious hangs or crashes,  Prev: Problems running,  Up: Problems running

8.3.1 'cannot open shared object file'
--------------------------------------

A common problem on many workstation clusters is that the head node (on
which './configure' is run) has more libraries installed than do the
compute nodes (on which coNCePTuaL programs themselves are run).
Consequently, coNCePTuaL programs that compile and link properly on the
head node will fail with a 'cannot open shared object file' error if
they try to dynamically link a shared object that is absent on the
compute nodes.

   Ideally, the missing shared objects should be installed on each of
the compute nodes.  If they cannot be installed in their standard
locations (e.g., '/usr/lib'), they can be installed elsewhere (e.g., in
the user's home directory) and that location can be pointed to using
'-rpath' or 'LD_LIBRARY_PATH', as described below.  Alternatively,
'configure' can be instructed to disregard certain libraries--even if
they exist on the head node--by passing the '--with-ignored-libs' option
to 'configure' (*note configure::).  For example, if 'libpopt.so' is not
installed on the compute nodes one can run './configure
--with-ignored-libs=popt' to prevent 'libpopt.so' from being used.

   The '--with-ignored-libs' option is of little use if the coNCePTuaL
library itself cannot be found at run time.  By default, 'make' will
build and 'make install' will install both a static and a dynamic
version of the coNCePTuaL run-time library.  Most linkers give
precedence to the dynamic library over the static library unless the
static library is requested explicitly.  As a consequence, the dynamic
version of the coNCePTuaL run-time library needs to be available at
program-load time in order to avoid error messages like the following:

     a.out: error while loading shared libraries: libncptl.so.0: cannot open
     shared object file: No such file or directory

   There are a few alternatives for pointing the dynamic loader to the
coNCePTuaL run-time library.  On systems that support it, the best
option is the '-rpath' approach described in *note Implicit
dynamic-library search paths::.  The second-best option is to add the
directory in which 'libncptl.so' was installed (by default,
'/usr/local/lib') to your 'LD_LIBRARY_PATH' environment variable.
Finally, as a last resort, you can use the '--disable-shared'
configuration option (*note configure::) to prevent coNCePTuaL from
building the dynamic version of the run-time library altogether, thereby
forcing the linker to use the static version:

     make uninstall
     make clean
     ./configure --disable-shared ...
     make
     make install

As mentioned in *note configure::, however, 'libncptlmodule.so' can't be
built when '--disable-shared' is in effect.


File: conceptual.info,  Node: Miscellaneous mysterious hangs or crashes,  Next: Extremely noisy measurements,  Prev: ``cannot open shared object file'',  Up: Problems running

8.3.2 Miscellaneous mysterious hangs or crashes
-----------------------------------------------

In some implementations of the software stack for InfiniBand--and
possibly for some other networks as well--invocations of the 'fork()'
system call made while the network device is open can corrupt process
memory and hang or crash the corresponding process.  (On Unix and
Unix-like operating systems this is typically via a segmentation fault.)

   The workaround is to build coNCePTuaL using the '--without-fork'
option (*note configure::).  Alternatively, you can set the
'NCPTL_NOFORK' environment variable when running a coNCePTuaL program.
Either option suppresses the coNCePTuaL run-time library's use of all
process-spawning functions.  *Note Environment Variables::, for a
description of 'NCPTL_NOFORK''s side effects.  The same description also
applies to '--without-fork'.


   The C library that comes bundled with a lightweight run-time kernel
or other custom operating system may provide broken versions of some of
the functions on which the coNCePTuaL run-time library relies.  If a
debugger or crash-analysis tool indicates that a particular function is
problematic it may be possible to disable that function at configuration
time.  For example, the current (at the time of this writing) release of
Red Storm's software stack includes a faulty 'getrusage()' function that
crashes consistently.  Observing that 'configure' checks for
'getrusage()' we searched the generated 'config.log' file and
encountered the corresponding shell variable, 'ac_cv_func_getrusage',
which was set to 'yes'.  Rerunning './configure' with
'ac_cv_func_getrusage=no' on the command line disabled the coNCePTuaL
run-time library's use of 'getrusage()' and thereby resulted in
crash-free execution of coNCePTuaL programs.


File: conceptual.info,  Node: Extremely noisy measurements,  Next: Keeping programs from dying on a signal,  Prev: Miscellaneous mysterious hangs or crashes,  Up: Problems running

8.3.3 Extremely noisy measurements
----------------------------------

Sometimes a coNCePTuaL program runs to completion but the data written
to the log files exhibit high levels of variability across runs or even
across trials within a single run.  A possible source of this
variability--especially for long-running programs running on a large
number of processors--is the run-time library's log-file checkpointing
mechanism.  Because each process in a coNCePTuaL programs writes its own
log file, poorly scalable shared filesystems, limited spare network
bandwidth, and asynchronous operating-system buffer flushes may each
impact program performance in an unpredictable manner and at
unpredictable times.

   Setting the 'NCPTL_CHECKPOINT' environment variable to '0' disables
log-file checkpointing and may thereby reduce some of the data
variability.  The caveat is that a program that aborts abnormally will
leave behind _no_ data in its log files.  *Note Environment Variables::,
for more information about 'NCPTL_CHECKPOINT'.


File: conceptual.info,  Node: Keeping programs from dying on a signal,  Next: ``Unaligned access'' warnings,  Prev: Extremely noisy measurements,  Up: Problems running

8.3.4 Keeping programs from dying on a signal
---------------------------------------------

By default, coNCePTuaL programs terminate upon receiving _any_
unexpected signal.  The error message list the signal number and, if
available, a human-readable signal name:

     myprogram: Received signal 28 (Window changed); specify --no-trap=28 to
     ignore

   The motivation behind this decision to abort on unexpected signals is
that signal-handling adversely affects a program's performance.  Hence,
by running to completion, a program indicates that it did not receive
any unexpected signals.  However, some messaging layers use signals
internally (most commonly 'SIGUSR1' and 'SIGUSR2') to coordinate helper
processes.  To permit a program to deliver such signals to the messaging
layer a user should use the program's '--no-trap' command-line option as
described in *note Running coNCePTuaL programs::.


File: conceptual.info,  Node: ``Unaligned access'' warnings,  Next: ``Unable to determine the OS page size'',  Prev: Keeping programs from dying on a signal,  Up: Problems running

8.3.5 'Unaligned access' warnings
---------------------------------

On some platforms you may encounter messages like the following written
to the console and/or various system log files (e.g.,
'/var/log/messages'):

     myprog(25044): unaligned access to 0x6000000000001022,
     ip=0x40000000000009e1

Alternatively:

     Unaligned access pid=7890104 <myprog> va=0x140004221 pc=0x1200012b4
     ra=0x1200012a4 inst=0xb449fff8

   What's happening is that some CPUs require n-byte-wide data to be
aligned on an n-byte boundary.  For example, a 64-bit datatype can be
accessed properly only from memory locations whose address is a multiple
of 64 bits (8 bytes).  On some platforms, misaligned accesses abnormally
terminate the program, typically with a 'SIGBUS' signal.  On other
platforms, misaligned accesses interrupt the operating system.  The
operating system fixes the access by splitting it into multiple aligned
accesses plus some bit masking and shifting and then notifying the user
and/or system administrator that a fixup occurred.

   coNCePTuaL's 'configure' script automatically determines what data
alignments are allowed by the architecture but it has no way to
determine if fixups occurred as these are transparent to programs.  The
result is annoying "unaligned access" messages such as those quoted
above.  One solution is to use the '--with-alignment' option to
'configure' to specify explicitly the minimum data alignment that
coNCePTuaL should be permitted to use.  Alternatively, some operating
systems provide a mechanism to cause misaligned accesses to result in a
'SIGBUS' signal instead of a fixup and notification message.  On
Linux/IA-64 this is achieved with the command 'prctl
--unaligned=signal'.  On OSF1/Alpha the equivalent command is 'uac p
sigbus'.  Be sure to rerun 'configure' after issuing those commands to
make it reexamine the set of valid data alignments.


File: conceptual.info,  Node: ``Unable to determine the OS page size'',  Next: Invalid timing measurements,  Prev: ``Unaligned access'' warnings,  Up: Problems running

8.3.6 'Unable to determine the OS page size'
--------------------------------------------

To implement 'PAGE ALIGNED' messages (*note Message alignment::) a
program needs to be able to query the operating system's page size.  The
coNCePTuaL run-time library performs this query using one of the
'getpagesize()' or 'sysconf()' operating-system calls.  If neither call
is available or functional the run-time library aborts with an 'Unable
to determine the OS page size' error.

   As a workaround, 'configure' provides a '--with-page-size' option
that enables the user to manually specify the page size.  Because any
manually specified value is prone to error, coNCePTuaL log files include
a 'Page size was specified manually at configuration time' warning if
the run-time library was configured using '--with-page-size'.


File: conceptual.info,  Node: Invalid timing measurements,  Next: ``TeX capacity exceeded'',  Prev: ``Unable to determine the OS page size'',  Up: Problems running

8.3.7 Invalid timing measurements
---------------------------------

Although the coNCePTuaL 'configure' script is usually good at selecting
a mechanism for measuring elapsed time, there are a few systems that
confuse the script.  For example, different Intel processors use
different mechanisms for mapping cycle counts to time (cf.
<http://en.wikipedia.org/wiki/RDTSC>); the correct mapping cannot always
be determined at configuration time and may require administrator
privileges to calculate.  Consequently, if 'configure' determines that
the coNCePTuaL timer should read the cycle counter directly, incorrect
times may be reported.

   The best way to test the timer quality is to run the 'validatetimer'
program (*note Validating the coNCePTuaL timer::).  If the difference
between wall-clock time and coNCePTuaL-reported time is great, the
'--with-gettimeofday' configuration option (*note configure::) is
usually a safe bet for improving accuracy, albeit at a slight cost in
measurement overhead.


File: conceptual.info,  Node: ``TeX capacity exceeded'',  Next: Bad bounding boxes from latex_vis,  Prev: Invalid timing measurements,  Up: Problems running

8.3.8 'TeX capacity exceeded'
-----------------------------

TeX--and by consequence, LaTeX--does not use dynamically allocated
memory.  Therefore, attempting to produce a very large diagram with the
'latex_vis' backend (*note The latex_vis backend::) will likely exceed
TeX's hardwired memory capacity:

     ! TeX capacity exceeded, sorry [main memory size=350001].
     \psm@endnode@i ... \endgroup \psm@endmath \egroup
                                                       \use@par \@psttrue
     l.489 \task
                {0} & \task{1} \\
     No pages of output.

TeX/LaTeX's memory capacity can be increased but the mechanism for doing
so varies from one TeX distribution to another and is rarely
straightforward.  See
<http://www.tex.ac.uk/cgi-bin/texfaq2html?label=enlarge> for a few terse
pointers.  In general, it is best to try to minimize the number of loop
repetitions when running programs through the 'latex_vis' backend.

   An alternative is to use a prebuilt large-memory 'latex'.  Some TeX
distributions come with a 'hugelatex' executable, which is just like
'latex' but compiled with larger memory limits.  'ncptl' can be told to
use 'hugelatex' by setting the 'LATEX' environment variable (e.g., with
'env LATEX=hugelatex ncptl ...').  This may be the most convenient way
to produce complex diagrams with 'latex_vis' when simplifying the run is
not an option.


File: conceptual.info,  Node: Bad bounding boxes from latex_vis,  Prev: ``TeX capacity exceeded'',  Up: Problems running

8.3.9 Bad bounding boxes from 'latex_vis'
-----------------------------------------

Very tall program visualizations are susceptible to Ghostscript
bug #202735, "bbox device doesn't allow min coords < 0".  'latex_vis'
attempts to work around that bug by defining a large PostScript
'ImagingBBox' as described in
<http://bugs.ghostscript.com/show_bug.cgi?id=202735>.  While no problems
with the 'latex_vis' workaround have yet been reported, if problems do
occur it should be sufficient to set the 'GS' environment variable to
':' or the name of a program known not to exist.  'latex_vis' will then
issue a warning message and generate an EPS file with an acceptable but
slightly loose bounding box, as mentioned in *note The latex_vis
backend::.


File: conceptual.info,  Node: When all else fails,  Prev: Problems running,  Up: Troubleshooting

8.4 When all else fails
=======================

The coNCePTuaL project pages on SourceForge.net
(http://sourceforge.net/) provide a variety of mechanisms for providing
feedback to the coNCePTuaL developers:

Mailing lists
     Read and post messages on the coNCePTuaL mailing lists at
     <http://sourceforge.net/mail/?group_id=117615>.

Trackers
     Search for old or post new bug reports
     (http://sourceforge.net/tracker/?group_id=117615&atid=678627),
     feature requests
     (http://sourceforge.net/tracker/?group_id=117615&atid=678630), or
     code patches
     (http://sourceforge.net/tracker/?group_id=117615&atid=678629) at
     <http://sourceforge.net/tracker/?group_id=117615>.


File: conceptual.info,  Node: Reserved Words,  Next: Backend Developer's Reference,  Prev: Troubleshooting,  Up: Top

Appendix A Reserved Words
*************************

As mentioned in *note Primitives::, not all identifiers can be used as
variables.  The following sections provide a complete list of
identifiers that are forbidden as variable names.  These identifiers
fall into two categories: keywords, which are never allowed as variable
names, and predeclared variables, which are "read-only" variables; they
can be utilized just like any other variables but cannot be redeclared.

* Menu:

* Keywords::                    List of coNCePTuaL keywords
* Predeclared variables::       List of variables made available to programs


File: conceptual.info,  Node: Keywords,  Next: Predeclared variables,  Prev: Reserved Words,  Up: Reserved Words

A.1 Keywords
============

The following is a list of all currently defined keywords in the
coNCePTuaL language.  It is an error to try to use any of these as
identifiers.

   * 'A'

   * 'ABS'

   * 'ABSOLUTE'

   * 'AGGREGATES'

   * 'ALIGNED'

   * 'ALL'

   * 'AN'

   * 'AND'

   * 'ARE'

   * 'ARITHMETIC'

   * 'AS'

   * 'ASSERT'

   * 'ASSIGNED'

   * 'ASYNCHRONOUSLY'

   * 'AWAIT'

   * 'AWAITS'

   * 'BACKEND'

   * 'BE'

   * 'BIT'

   * 'BITS'

   * 'BUFFER'

   * 'BUFFERS'

   * 'BUT'

   * 'BYTE'

   * 'BYTES'

   * 'CBRT'

   * 'CEILING'

   * 'COMES'

   * 'COMPLETION'

   * 'COMPLETIONS'

   * 'COMPUTE'

   * 'COMPUTES'

   * 'COUNTERS'

   * 'CURRENT'

   * 'DATA'

   * 'DAY'

   * 'DAYS'

   * 'DECLARES'

   * 'DEFAULT'

   * 'DEVIATION'

   * 'DIVIDES'

   * 'DOUBLEWORD'

   * 'DOUBLEWORDS'

   * 'EACH'

   * 'EVEN'

   * 'EXECUTE'

   * 'EXECUTES'

   * 'FACTOR10'

   * 'FILE_DATA'

   * 'FINAL'

   * 'FLOOR'

   * 'FOR'

   * 'FROM'

   * 'GEOMETRIC'

   * 'GIGABYTE'

   * 'GREATER'

   * 'GROUP'

   * 'HALFWORD'

   * 'HALFWORDS'

   * 'HARMONIC'

   * 'HISTOGRAM'

   * 'HOUR'

   * 'HOURS'

   * 'IF'

   * 'IN'

   * 'INTEGER'

   * 'INTEGERS'

   * 'INTO'

   * 'IS'

   * 'IT'

   * 'ITS'

   * 'KILOBYTE'

   * 'KNOMIAL_CHILD'

   * 'KNOMIAL_CHILDREN'

   * 'KNOMIAL_PARENT'

   * 'LANGUAGE'

   * 'LESS'

   * 'LET'

   * 'LOG'

   * 'LOG10'

   * 'LOGS'

   * 'MAX'

   * 'MAXIMUM'

   * 'MEAN'

   * 'MEDIAN'

   * 'MEGABYTE'

   * 'MEMORY'

   * 'MESH_COORDINATE'

   * 'MESH_DISTANCE'

   * 'MESH_NEIGHBOR'

   * 'MESSAGE'

   * 'MESSAGES'

   * 'MICROSECOND'

   * 'MICROSECONDS'

   * 'MILLISECOND'

   * 'MILLISECONDS'

   * 'MIN'

   * 'MINIMUM'

   * 'MINUTE'

   * 'MINUTES'

   * 'MISALIGNED'

   * 'MOD'

   * 'MULTICAST'

   * 'MULTICASTS'

   * 'MY'

   * 'NONUNIQUE'

   * 'NOT'

   * 'ODD'

   * 'OF'

   * 'OR'

   * 'OTHER'

   * 'OTHERWISE'

   * 'OUTPUT'

   * 'OUTPUTS'

   * 'PAGE'

   * 'PAGES'

   * 'PERCENTILE'

   * 'PLUS'

   * 'PROCESSOR'

   * 'PROCESSOR_OF'

   * 'PROCESSORS'

   * 'QUADWORD'

   * 'QUADWORDS'

   * 'RANDOM'

   * 'RANDOM_GAUSSIAN'

   * 'RANDOM_PARETO'

   * 'RANDOM_POISSON'

   * 'RANDOM_UNIFORM'

   * 'REAL'

   * 'RECEIVE'

   * 'RECEIVES'

   * 'REDUCE'

   * 'REDUCES'

   * 'REGION'

   * 'REPETITION'

   * 'REPETITIONS'

   * 'REQUIRE'

   * 'RESET'

   * 'RESETS'

   * 'RESTORE'

   * 'RESTORES'

   * 'RESULT'

   * 'RESULTS'

   * 'ROOT'

   * 'ROUND'

   * 'SECOND'

   * 'SECONDS'

   * 'SEND'

   * 'SENDS'

   * 'SIZED'

   * 'SLEEP'

   * 'SLEEPS'

   * 'SQRT'

   * 'STANDARD'

   * 'STATIC_FILE_DATA'

   * 'STORE'

   * 'STORES'

   * 'STRIDE'

   * 'SUCH'

   * 'SUM'

   * 'SYNCHRONIZATION'

   * 'SYNCHRONIZE'

   * 'SYNCHRONIZES'

   * 'SYNCHRONOUSLY'

   * 'TAG'

   * 'TASK'

   * 'TASK_OF'

   * 'TASKS'

   * 'THAN'

   * 'THAT'

   * 'THE'

   * 'THEIR'

   * 'THEM'

   * 'THEN'

   * 'TIME'

   * 'TIMES'

   * 'TO'

   * 'TOUCH'

   * 'TOUCHES'

   * 'TOUCHING'

   * 'TREE_CHILD'

   * 'TREE_PARENT'

   * 'UNALIGNED'

   * 'UNIQUE'

   * 'UNSUSPECTING'

   * 'USING'

   * 'VALUE'

   * 'VARIANCE'

   * 'VERIFICATION'

   * 'VERSION'

   * 'WARMUP'

   * 'WHERE'

   * 'WHILE'

   * 'WHO'

   * 'WITH'

   * 'WITHOUT'

   * 'WORD'

   * 'WORDS'

   * 'XOR'


File: conceptual.info,  Node: Predeclared variables,  Prev: Keywords,  Up: Reserved Words

A.2 Predeclared variables
=========================

coNCePTuaL predeclares a set of variables that programs can use but not
redeclare.  These variables and their descriptions are listed below.

     'bit_errors' Total number of bit errors observed

     'bytes_received' Total number of bytes received

     'bytes_sent' Total number of bytes sent

     'elapsed_usecs' Elapsed time in microseconds

     'msgs_received' Total number of messages received

     'msgs_sent' Total number of messages sent

     'num_tasks' Number of tasks running the program

     'total_bytes' Sum of bytes sent and bytes received

     'total_msgs' Sum of messages sent and messages received

   As should be evident from their descriptions, coNCePTuaL's
predeclared variables are updated dynamically.  Each access can
potentially return a different result.  Furthermore, unlike
user-declared variables, predeclared variables in can have a different
value on each task.

   The following notes clarify the semantics that relate to the updating
of some of the preceding variables:

     'ASYNCHRONOUSLY' (*note Blocking semantics::) A message that is
     _sent_ 'ASYNCHRONOUSLY' immediately increments each of 'msgs_sent'
     and 'total_msgs' by 1 and each of 'bytes_sent' and 'total_bytes' by
     the message size.  A message that is _received_ 'ASYNCHRONOUSLY'
     increments none of the predeclared variables.  However, after the
     receiving task 'AWAITS COMPLETION' (*note Awaiting completion::) it
     increments each of 'msgs_received' and 'total_msgs' by 1 and each
     of 'bytes_received' and 'total_bytes' by the message size.

     'MULTICASTS' (*note Multicasting::) None of the byte or message
     variables are updated as part of a multicast operation, regardless
     of how the underlying messaging layer implements multicasts.

     'SYNCHRONIZES' (*note Synchronizing::) None of the byte or message
     variables are updated as part of a barrier synchronization,
     regardless of how the underlying messaging layer implements
     barriers.


File: conceptual.info,  Node: Backend Developer's Reference,  Next: Environment Variables,  Prev: Reserved Words,  Up: Top

Appendix B Backend Developer's Reference
****************************************

Programmers wishing to develop their own coNCePTuaL backends can refer
to the information presented in this appendix as a complement to the
more tutorial-in-nature *note Implementation::.

* Menu:

* Method calls::                Methods a backend must implement
* C hooks::                     Methods a C-based backend may implement
* Event types::                 Types of events defined by c_generic programs
* Representing aggregate functions::  An enumerated type of aggregates


File: conceptual.info,  Node: Method calls,  Next: C hooks,  Prev: Backend Developer's Reference,  Up: Backend Developer's Reference

B.1 Method calls
================

The following method calls must be defined when writing a coNCePTuaL
backend from scratch.  They are invoked indirectly as part of PLY's AST
traversal.  *Note Backend creation::, for more information.

   * 'n_add_expr'

   * 'n_aggregate_expr'

   * 'n_aggregate_func'

   * 'n_an'

   * 'n_assert_stmt'

   * 'n_awaits_completion'

   * 'n_backend_decl'

   * 'n_backend_stmt'

   * 'n_buffer_number'

   * 'n_buffer_offset'

   * 'n_computes_for'

   * 'n_data_multiplier'

   * 'n_data_type'

   * 'n_dimension'

   * 'n_dimension_list'

   * 'n_empty_stmt'

   * 'n_eq_expr'

   * 'n_expr_list'

   * 'n_for_count'

   * 'n_for_each'

   * 'n_for_each_expr'

   * 'n_for_time'

   * 'n_func_call'

   * 'n_ident'

   * 'n_if_stmt'

   * 'n_ifelse_expr'

   * 'n_integer'

   * 'n_item_size'

   * 'n_let_binding'

   * 'n_let_binding_list'

   * 'n_let_stmt'

   * 'n_log_expr_list'

   * 'n_log_expr_list_elt'

   * 'n_log_flush_stmt'

   * 'n_log_stmt'

   * 'n_mcast_stmt'

   * 'n_message_alignment'

   * 'n_message_spec'

   * 'n_mult_expr'

   * 'n_my_task'

   * 'n_no_touching'

   * 'n_output_stmt'

   * 'n_param_decl'

   * 'n_power_expr'

   * 'n_processor_stmt'

   * 'n_program'

   * 'n_range'

   * 'n_range_list'

   * 'n_real'

   * 'n_receive_attrs'

   * 'n_receive_stmt'

   * 'n_recv_buffer_number'

   * 'n_reduce_message_spec'

   * 'n_reduce_stmt'

   * 'n_rel_conj_expr'

   * 'n_rel_disj_expr'

   * 'n_reset_stmt'

   * 'n_restore_stmt'

   * 'n_send_attrs'

   * 'n_send_stmt'

   * 'n_simple_stmt_list'

   * 'n_sleeps_for'

   * 'n_store_stmt'

   * 'n_stride'

   * 'n_string'

   * 'n_string_or_expr_list'

   * 'n_string_or_log_comment'

   * 'n_sync_stmt'

   * 'n_tag'

   * 'n_task_expr'

   * 'n_time_unit'

   * 'n_top_level_stmt'

   * 'n_touch_buffer_stmt'

   * 'n_touch_repeat_count'

   * 'n_touch_stmt'

   * 'n_touching'

   * 'n_trivial_node'

   * 'n_unary_expr'

   * 'n_unique'

   * 'n_verification'

   * 'n_version_decl'

   * 'n_where_expr'


File: conceptual.info,  Node: C hooks,  Next: Event types,  Prev: Method calls,  Up: Backend Developer's Reference

B.2 C hooks
===========

To save the backend developer from having to implement coNCePTuaL
backends entirely from scratch, coNCePTuaL provides a
'codegen_c_generic.py' module that defines a base class for code
generators that output C code.  The base class handles the features that
are specific to C but independent of any messaging library.  Derived
classes need only define those "hook" functions that are needed to
implement library-specific functionality.

   Hooks are named after the method from which they're called but with
an all-uppercase tag appended.  The following list shows each
hook-calling method in 'codegen_c_generic.py' and the set of hooks it
calls.  *Note Hook methods::, for more information.

   * 'code_declare_datatypes'
        - 'code_declare_datatypes_EXTRA_EVENTS'
        - 'code_declare_datatypes_EXTRA_EVENT_STATE'
        - 'code_declare_datatypes_EXTRA_EVS'
        - 'code_declare_datatypes_MCAST_STATE'
        - 'code_declare_datatypes_POST'
        - 'code_declare_datatypes_PRE'
        - 'code_declare_datatypes_RECV_STATE'
        - 'code_declare_datatypes_REDUCE_STATE'
        - 'code_declare_datatypes_SEND_STATE'
        - 'code_declare_datatypes_SYNC_STATE'
        - 'code_declare_datatypes_WAIT_STATE'

   * 'code_declare_globals'
        - 'code_declare_globals_DUMMY_VAR'
        - 'code_declare_globals_EXTRA'

   * 'code_def_alloc_event'
        - 'code_def_alloc_event_DECLS'
        - 'code_def_alloc_event_POST'
        - 'code_def_alloc_event_PRE'

   * 'code_def_exit_handler'
        - 'code_def_exit_handler_BODY'

   * 'code_def_finalize'
        - 'code_def_finalize_DECL'
        - 'code_def_finalize_POST'
        - 'code_def_finalize_PRE'

   * 'code_def_init_check_pending'
        - 'code_def_init_check_pending_POST'
        - 'code_def_init_check_pending_PRE'

   * 'code_def_init_cmd_line'
        - 'code_def_init_cmd_line_POST_ARGS'
        - 'code_def_init_cmd_line_POST_PARSE'
        - 'code_def_init_cmd_line_PRE_ARGS'
        - 'code_def_init_cmd_line_PRE_PARSE'

   * 'code_def_init_decls'
        - 'code_def_init_decls_POST'
        - 'code_def_init_decls_PRE'

   * 'code_def_init_init'
        - 'code_def_init_init_POST'
        - 'code_def_init_init_PRE'

   * 'code_def_init_misc'
        - 'code_def_init_misc_EXTRA'
        - 'code_def_init_misc_PRE_LOG_OPEN'

   * 'code_def_init_msg_mem'
        - 'code_def_init_msg_mem_EACH_TAG'
        - 'code_def_init_msg_mem_POST'
        - 'code_def_init_msg_mem_PRE'

   * 'code_def_init_reseed'
        - 'code_def_init_reseed_BCAST'

   * 'code_def_init_seed'
        - 'code_def_init_seed_POST'
        - 'code_def_init_seed_PRE'

   * 'code_def_init_uuid'
        - 'code_def_init_uuid_BCAST'

   * 'code_def_mark_used'
        - 'code_def_mark_used_POST'
        - 'code_def_mark_used_PRE'

   * 'code_def_procev'
        - 'code_def_procev_DECL'
        - 'code_def_procev_EVENTS_DECL'
        - 'code_def_procev_EXTRA_EVENTS'
        - 'code_def_procev_POST'
        - 'code_def_procev_POST_SWITCH'
        - 'code_def_procev_PRE'
        - 'code_def_procev_PRE_SWITCH'

   * 'code_def_procev_arecv'
        - 'code_def_procev_arecv_BODY'

   * 'code_def_procev_asend'
        - 'code_def_procev_asend_BODY'

   * 'code_def_procev_etime'
        - 'code_def_procev_etime_REDUCE_MIN'

   * 'code_def_procev_mcast'
        - 'code_def_procev_mcast_BODY'

   * 'code_def_procev_newstmt'
        - 'code_def_procev_newstmt_BODY'

   * 'code_def_procev_recv'
        - 'code_def_procev_recv_BODY'

   * 'code_def_procev_reduce'
        - 'code_def_procev_reduce_BODY'

   * 'code_def_procev_repeat'
        - 'code_def_procev_repeat_BODY'

   * 'code_def_procev_send'
        - 'code_def_procev_send_BODY'

   * 'code_def_procev_sync'
        - 'code_def_procev_sync_BODY'

   * 'code_def_procev_wait'
        - 'code_def_procev_wait_BODY_RECVS'
        - 'code_def_procev_wait_BODY_SENDS'

   * 'code_def_small_funcs'
        - 'code_def_small_funcs_POST'
        - 'code_def_small_funcs_PRE'

   * 'code_define_functions'
        - 'code_define_functions_INIT_COMM_1'
        - 'code_define_functions_INIT_COMM_2'
        - 'code_define_functions_INIT_COMM_3'
        - 'code_define_functions_POST'
        - 'code_define_functions_PRE'

   * 'code_define_macros'
        - 'code_define_macros_POST'
        - 'code_define_macros_PRE'

   * 'code_define_main'
        - 'code_define_main_DECL'
        - 'code_define_main_POST_EVENTS'
        - 'code_define_main_POST_INIT'
        - 'code_define_main_PRE_EVENTS'
        - 'code_define_main_PRE_INIT'

   * 'code_output_header_comments'
        - 'code_output_header_comments_EXTRA'

   * 'code_specify_include_files'
        - 'code_specify_include_files_POST'
        - 'code_specify_include_files_PRE'

   * 'code_synchronize_all'
        - 'code_synchronize_all_BODY'

   * 'n_for_count'
        - 'n_for_count_SYNC_ALL'

   * 'n_mcast_stmt'
        - 'n_mcast_stmt_DECL'
        - 'n_mcast_stmt_INIT'
        - 'n_mcast_stmt_MANY_MANY'
        - 'n_mcast_stmt_POST'
        - 'n_mcast_stmt_PRE'

   * 'n_recv_stmt'
        - 'n_recv_stmt_BODY'

   * 'n_reduce_stmt'
        - 'n_reduce_stmt_DECL'
        - 'n_reduce_stmt_HAVE_PEERS'
        - 'n_reduce_stmt_INIT'
        - 'n_reduce_stmt_INIT2'
        - 'n_reduce_stmt_POST'
        - 'n_reduce_stmt_PRE'

   * 'n_send_stmt'
        - 'n_send_stmt_BODY'

   * 'n_sync_stmt'
        - 'n_sync_stmt_DECL'
        - 'n_sync_stmt_INIT'
        - 'n_sync_stmt_POST'
        - 'n_sync_stmt_PRE'


File: conceptual.info,  Node: Event types,  Next: Representing aggregate functions,  Prev: C hooks,  Up: Backend Developer's Reference

B.3 Event types
===============

Programs generated by 'codegen_c_generic.py' define the following event
types:

     'EV_ARECV' Asynchronous receive

     'EV_ASEND' Asynchronous send

     'EV_BTIME' Beginning of a timed loop

     'EV_DELAY' Spin or sleep

     'EV_ETIME' Ending of a timed loop

     'EV_FLUSH' Compute aggregate functions for log-file columns

     'EV_MCAST' Synchronous multicast

     'EV_NEWSTMT' Beginning of a new top-level statement

     'EV_RECV' Synchronous receive

     'EV_REDUCE' Reduction with or without a subsequent multicast

     'EV_REPEAT' Repeatedly process the next N events

     'EV_RESET' Reset counters

     'EV_RESTORE' Restore the previously pushed counter values

     'EV_SEND' Synchronous send

     'EV_STORE' Store all counters' current values

     'EV_SUPPRESS' Suppress writing to the log and standard output

     'EV_SYNC' Barrier synchronization

     'EV_TOUCH' Touch a region of memory

     'EV_WAIT' Wait for all asynchronous sends/receives to complete

EV_CODE
     None of the above

   *note Generated code::, motivates the use of event-based execution
for coNCePTuaL programs.


File: conceptual.info,  Node: Representing aggregate functions,  Prev: Event types,  Up: Backend Developer's Reference

B.4 Representing aggregate functions
====================================

The 'LOG_AGGREGATE' enumerated type, defined in 'ncptl.h', accepts the
following values:

     'NCPTL_FUNC_NO_AGGREGATE' Log all data points.

     'NCPTL_FUNC_MEAN' Log only the arithmetic mean.

     'NCPTL_FUNC_HARMONIC_MEAN' Log only the harmonic mean.

     'NCPTL_FUNC_GEOMETRIC_MEAN' Log only the geometric mean.

     'NCPTL_FUNC_MEDIAN' Log only the median.

     'NCPTL_FUNC_MAD' Log only the median absolute deviation.

     'NCPTL_FUNC_STDEV' Log only the standard deviation.

     'NCPTL_FUNC_VARIANCE' Log only the variance.

     'NCPTL_FUNC_SUM' Log only the sum.

     'NCPTL_FUNC_MINIMUM' Log only the minimum.

     'NCPTL_FUNC_MAXIMUM' Log only the maximum.

     'NCPTL_FUNC_FINAL' Log only the final measurement.

     'NCPTL_FUNC_PERCENTILE' Log only the nth percentile.

     'NCPTL_FUNC_ONLY' Log any data point, aborting if they're not all
     identical.

     'NCPTL_FUNC_HISTOGRAM' Log a histogram of the data points


File: conceptual.info,  Node: Environment Variables,  Next: Cache Variables,  Prev: Backend Developer's Reference,  Up: Top

Appendix C Environment Variables
********************************

The coNCePTuaL compiler ('ncptl') honors the following environment
variables:

'NCPTL_BACKEND'
     Name a default backend for the compiler to use.  For example,
     setting 'NCPTL_BACKEND' to 'c_udgram' tells 'ncptl' to use the
     'c_udgram' backend unless the '--backend' compiler option
     designates a different backend.  *Note Compiling coNCePTuaL
     programs::, for more information.

'NCPTL_PATH'
     Specify a colon-separated list of directories in which to search
     for compiler backends.  *Note Compiling coNCePTuaL programs::, for
     more information.

   The following environment variables are honored when running a
coNCePTuaL program (any backend):

'NCPTL_CHECKPOINT'
     Specify the minimum number of seconds between log-file checkpoints
     (default: 60).  The coNCePTuaL run-time library buffers logged data
     in memory because coNCePTuaL programs are not restricted to writing
     data in a top-to-bottom, left-to-right format.  The following
     program, for example, writes row 9, column 2 before writing row 5,
     column 1:

          FOR EACH i IN {1, ..., 10} {IF i IS EVEN THEN TASK 0 LOGS i
          AS "Even numbers" THEN TASK 0 LOGS i AS "All numbers"}

     Buffering data in memory enables that sort of "two-dimensional"
     logging.  However, it is not robust to computer crashes or
     uncatchable signals (e.g., 'SIGKILL').  Consequently, every 'LOGS'
     statement (*note Writing to a log file::) that is executed at least
     'NCPTL_CHECKPOINT' seconds after the previous one forces the
     coNCePTuaL run-time library to write its partial data to the log
     file.  Specifically, the library flushes its partial-data buffers
     then rewinds the write pointer to the beginning of that partial
     data.  Hence, the partial data is overwritten by a later checkpoint
     or by the complete data set.

     Smaller values of 'NCPTL_CHECKPOINT' provide more robustness to
     crashes and uncatchable signals.  Larger values put less stress on
     the filesystem.  As a special case, if 'NCPTL_CHECKPOINT' is set to
     '0' then log-file checkpointing is disabled altogether.

'NCPTL_FAST_INIT'
     If set to '1', more quickly initialize the run-time library by
     skipping the timer calibration and measurement steps.  As a
     consequence, all timing measurements will be meaningless.
     'NCPTL_FAST_INIT' may be useful during the development of a
     coNCePTuaL program or compiler backend to enable shorter turnaround
     times.  If set to '0', 'NCPTL_FAST_INIT' forces a thorough
     initialization even for backends that do not rely on timing
     measurements, for instance the 'picl' backend (*note The picl
     backend::).  *Note Variables and data types::, for more
     information.

'NCPTL_LOG_DELAY'
     Artificially delay each log-file open and flush operation by a
     random number of milliseconds in the range 0...'NCPTL_LOG_DELAY'
     (default: '0').  For example, if 1000 CPUs share a single
     filesystem, an 'NCPTL_LOG_DELAY' of '2000' (i.e., 2 seconds) will
     probabilistically ensure that a log-file creation request will be
     issued only once every 2000/1000 = 2 milliseconds instead of all at
     once. 'NCPTL_LOG_DELAY' is intended to help coNCePTuaL programs run
     atop broken filesystems that are unable to handle large numbers of
     concurrent accesses--an all-too-common problem on large-scale
     workstation clusters and parallel computers in which hundreds or
     thousands of diskless compute nodes compete for access to the same
     filesystem.

'NCPTL_LOG_ONLY'
     Limit the set of processes that produce log files. 'NCPTL_LOG_ONLY'
     accepts a comma-separated list of dash-separated process ranges
     such as '0-3,12-16,24,25,32-48'.  Only processes included in the
     list produce log files.  *Note Running coNCePTuaL programs::, for
     more information.

'NCPTL_NOFORK'
     If set, inhibit the use of 'fork()', 'system()', 'popen()', and
     other process-spawning functions.  The result is that some
     information will be omitted from the log-file prologue.
     'NCPTL_NOFORK' is intended to be used on systems in which such
     functions corrupt messaging-layer state, hang or crash processes,
     or wreak other such havoc.


File: conceptual.info,  Node: Cache Variables,  Next: Referenced Applications,  Prev: Environment Variables,  Up: Top

Appendix D 'configure' Cache Variables
**************************************

The 'configure' script that is used to build coNCePTuaL internally uses
a number of Autoconf cache variables to store configuration information
that it discovers while it runs.  If these variables are set on the
'./configure' command line, the given value will be used instead of an
automatically determined value.  This feature gives the user precise
control over many aspects of coNCePTuaL configuration.  For example, to
prevent the coNCePTuaL run-time library from using the 'gethostbyname()'
function you can specify 'ac_cv_func_gethostbyname=no' on the
'./configure' command line to convince 'configure' that
'gethostbyname()' does not exist.

   The variables and descriptions in the following list were extracted
mechanically from 'configure.ac' and 'config.log'.  Consequently, some
variables may be missing, and some descriptions may be inaccurate or
hard to understand.

     'ac_cv_func__strtoi64' the '_strtoi64()' function is available
     ('yes' or 'no')

     'ac_cv_func_cbrt' the 'cbrt()' function is available ('yes' or
     'no')

     'ac_cv_func_floor' the 'floor()' function is available ('yes' or
     'no')

     'ac_cv_func_fmod' the 'fmod()' function is available ('yes' or
     'no')

     'ac_cv_func_fork' the 'fork()' function is available ('yes' or
     'no')

     'ac_cv_func_fork_works' the 'fork_works()' function is available
     ('yes' or 'no')

     'ac_cv_func_getaddrinfo' the 'getaddrinfo()' function is available
     ('yes' or 'no')

     'ac_cv_func_getcwd' the 'getcwd()' function is available ('yes' or
     'no')

     'ac_cv_func_geteuid' the 'geteuid()' function is available ('yes'
     or 'no')

     'ac_cv_func_gethostbyname' the 'gethostbyname()' function is
     available ('yes' or 'no')

     'ac_cv_func_getinvent' the 'getinvent()' function is available
     ('yes' or 'no')

     'ac_cv_func_getopt_long' the 'getopt_long()' function is available
     ('yes' or 'no')

     'ac_cv_func_getpagesize' the 'getpagesize()' function is available
     ('yes' or 'no')

     'ac_cv_func_getpwuid' the 'getpwuid()' function is available ('yes'
     or 'no')

     'ac_cv_func_getrusage' the 'getrusage()' function is available
     ('yes' or 'no')

     'ac_cv_func_getuid' the 'getuid()' function is available ('yes' or
     'no')

     'ac_cv_func_glob' the 'glob()' function is available ('yes' or
     'no')

     'ac_cv_func_ibv_get_device_list' the 'ibv_get_device_list()'
     function is available ('yes' or 'no')

     'ac_cv_func_ibv_get_devices' the 'ibv_get_devices()' function is
     available ('yes' or 'no')

     'ac_cv_func_kill' the 'kill()' function is available ('yes' or
     'no')

     'ac_cv_func_llabs' the 'llabs()' function is available ('yes' or
     'no')

     'ac_cv_func_nanosleep' the 'nanosleep()' function is available
     ('yes' or 'no')

     'ac_cv_func_nearbyint' the 'nearbyint()' function is available
     ('yes' or 'no')

     'ac_cv_func_popen' the 'popen()' function is available ('yes' or
     'no')

     'ac_cv_func_realpath' the 'realpath()' function is available ('yes'
     or 'no')

     'ac_cv_func_rint' the 'rint()' function is available ('yes' or
     'no')

     'ac_cv_func_round' the 'round()' function is available ('yes' or
     'no')

     'ac_cv_func_sched_getaffinity' the 'sched_getaffinity()' function
     is available ('yes' or 'no')

     'ac_cv_func_setitimer' the 'setitimer()' function is available
     ('yes' or 'no')

     'ac_cv_func_sigaction' the 'sigaction()' function is available
     ('yes' or 'no')

     'ac_cv_func_signal' the 'signal()' function is available ('yes' or
     'no')

     'ac_cv_func_sleep' the 'sleep()' function is available ('yes' or
     'no')

     'ac_cv_func_strcasestr' the 'strcasestr()' function is available
     ('yes' or 'no')

     'ac_cv_func_strerror' the 'strerror()' function is available ('yes'
     or 'no')

     'ac_cv_func_strsignal' the 'strsignal()' function is available
     ('yes' or 'no')

     'ac_cv_func_strtok' the 'strtok()' function is available ('yes' or
     'no')

     'ac_cv_func_strtoll' the 'strtoll()' function is available ('yes'
     or 'no')

     'ac_cv_func_strtoq' the 'strtoq()' function is available ('yes' or
     'no')

     'ac_cv_func_sysconf' the 'sysconf()' function is available ('yes'
     or 'no')

     'ac_cv_func_sysctl' the 'sysctl()' function is available ('yes' or
     'no')

     'ac_cv_func_sysmp' the 'sysmp()' function is available ('yes' or
     'no')

     'ac_cv_func_syssgi' the 'syssgi()' function is available ('yes' or
     'no')

     'ac_cv_func_time' the 'time()' function is available ('yes' or
     'no')

     'ac_cv_func_trunc' the 'trunc()' function is available ('yes' or
     'no')

     'ac_cv_func_uname' the 'uname()' function is available ('yes' or
     'no')

     'ac_cv_func_vfork' the 'vfork()' function is available ('yes' or
     'no')

     'ac_cv_func_vfork_works' the 'vfork_works()' function is available
     ('yes' or 'no')

     'ac_cv_func_vfprintf' the 'vfprintf()' function is available ('yes'
     or 'no')

     'ac_cv_func_vsnprintf' the 'vsnprintf()' function is available
     ('yes' or 'no')

     'ac_cv_func_vsprintf' the 'vsprintf()' function is available ('yes'
     or 'no')

     'ac_cv_header_bglpersonality_h' the 'bglpersonality.h' header file
     is available ('yes' or 'no')

     'ac_cv_header_cf_h' the 'cf.h' header file is available ('yes' or
     'no')

     'ac_cv_header_common_bgp_personality_h' the
     'common/bgp_personality.h' header file is available ('yes' or 'no')

     'ac_cv_header_dlfcn_h' the 'dlfcn.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_errno_h' the 'errno.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_getopt_h' the 'getopt.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_glob_h' the 'glob.h' header file is available ('yes'
     or 'no')

     'ac_cv_header_gnugetopt_h' the 'gnugetopt.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_ieeefp_h' the 'ieeefp.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_infiniband_verbs_h' the 'infiniband/verbs.h' header
     file is available ('yes' or 'no')

     'ac_cv_header_inttypes_h' the 'inttypes.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_invent_h' the 'invent.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_libhal_h' the 'libhal.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_machine_hal_sysinfo_h' the 'machine/hal_sysinfo.h'
     header file is available ('yes' or 'no')

     'ac_cv_header_memory_h' the 'memory.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_mpi_h' the 'mpi.h' header file is available ('yes' or
     'no')

     'ac_cv_header_netdb_h' the 'netdb.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_odmi_h' the 'odmi.h' header file is available ('yes'
     or 'no')

     'ac_cv_header_papi_h' the 'papi.h' header file is available ('yes'
     or 'no')

     'ac_cv_header_pci_pci_h' the 'pci/pci.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_popt_h' the 'popt.h' header file is available ('yes'
     or 'no')

     'ac_cv_header_pwd_h' the 'pwd.h' header file is available ('yes' or
     'no')

     'ac_cv_header_rms_rmscall_h' the 'rms/rmscall.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_sched_h' the 'sched.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_signal_h' the 'signal.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_stdint_h' the 'stdint.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_stdlib_h' the 'stdlib.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_string_h' the 'string.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_strings_h' the 'strings.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_sys_cfgodm_h' the 'sys/cfgodm.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_sys_mman_h' the 'sys/mman.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_sys_param_h' the 'sys/param.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_sys_resource_h' the 'sys/resource.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_sys_select_h' the 'sys/select.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_sys_stat_h' the 'sys/stat.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_sys_sysctl_h' the 'sys/sysctl.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_sys_sysinfo_h' the 'sys/sysinfo.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_sys_sysmp_h' the 'sys/sysmp.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_sys_syssgi_h' the 'sys/syssgi.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_sys_time_h' the 'sys/time.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_sys_types_h' the 'sys/types.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_sys_utsname_h' the 'sys/utsname.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_sys_wait_h' the 'sys/wait.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_time_h' the 'time.h' header file is available ('yes'
     or 'no')

     'ac_cv_header_unistd_h' the 'unistd.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_uuid_uuid_h' the 'uuid/uuid.h' header file is
     available ('yes' or 'no')

     'ac_cv_header_vfork_h' the 'vfork.h' header file is available
     ('yes' or 'no')

     'ac_cv_header_windows_h' the 'windows.h' header file is available
     ('yes' or 'no')

     'ac_cv_lib_gnugetopt_getopt_long' 'libgnugetopt.a' contains a
     function called 'getopt_long()' ('yes' or 'no')

     'ac_cv_lib_ibverbs_ibv_query_device' 'libibverbs.a' contains a
     function called 'ibv_query_device()' ('yes' or 'no')

     'ac_cv_lib_m_fmod' 'libm.a' contains a function called 'fmod()'
     ('yes' or 'no')

     'ac_cv_lib_sysfs_sysfs_open_class' 'libsysfs.a' contains a function
     called 'sysfs_open_class()' ('yes' or 'no')

     'ac_cv_member_struct_CuAt_name' the 'CuAt' 'struct' contains a
     field called 'name' ('yes' or 'no')

     'ac_cv_member_struct_addrinfo_ai_canonname' the 'addrinfo' 'struct'
     contains a field called 'ai_canonname' ('yes' or 'no')

     'ac_cv_member_struct_hostent_h_name' the 'hostent' 'struct'
     contains a field called 'h_name' ('yes' or 'no')

     'ac_cv_path_ASY' the fully qualified filename for 'asy'

     'ac_cv_path_DOT' the fully qualified filename for 'dot'

     'ac_cv_path_EGREP' the fully qualified filename for 'egrep'

     'ac_cv_path_FGREP' the fully qualified filename for 'fgrep'

     'ac_cv_path_GIMP' the fully qualified filename for 'gimp'

     'ac_cv_path_GPERF' the fully qualified filename for 'gperf'

     'ac_cv_path_GREP' the fully qualified filename for 'grep'

     'ac_cv_path_GS' the fully qualified filename for 'gs'

     'ac_cv_path_HTMLTIDY' the fully qualified filename for 'htmltidy'

     'ac_cv_path_JYTHONC' the fully qualified filename for 'jythonc'

     'ac_cv_path_LDD' the fully qualified filename for 'ldd'

     'ac_cv_path_PERL' the fully qualified filename for 'perl'

     'ac_cv_path_PYTHON' the fully qualified filename for 'python'

     'ac_cv_path_SED' the fully qualified filename for 'sed'

     'ac_cv_path_SWIG' the fully qualified filename for 'swig'

     'ac_cv_prog_AWK' command line for running 'awk'

     'ac_cv_prog_CPP' command line for running 'cpp'

     'ac_cv_prog_EMACS' command line for running 'emacs'

     'ac_cv_prog_JAR' command line for running 'jar'

     'ac_cv_prog_JAVAC' command line for running 'javac'

     'ac_cv_prog_MAKE' command line for running 'make'

     'ac_cv_prog_MSGDIGEST' command line for running 'msgdigest'

     'ac_cv_prog_PKGCONFIG' command line for running 'pkgconfig'

     'ac_cv_search_clock_gettime' linker flags/libraries needed to use
     the 'clock_gettime()' function or 'none required'

     'ac_cv_search_kstat_data_lookup' linker flags/libraries needed to
     use the 'kstat_data_lookup()' function or 'none required'

     'ac_cv_search_nanosleep' linker flags/libraries needed to use the
     'nanosleep()' function or 'none required'

     'ac_cv_sizeof_u_int128_t' size in bytes of the 'u_int128_t'
     datatype

     'ac_cv_sizeof_unsigned___int128' size in bytes of the 'unsigned
     __int128' datatype

     'ac_cv_sizeof_unsigned_long_long_long' size in bytes of the
     'unsigned long long long' datatype

     'ac_cv_type_int64_t' the 'int64_t' datatype exists ('yes' or 'no')

     'ac_cv_type_pid_t' the 'pid_t' datatype exists ('yes' or 'no')

     'ac_cv_type_signal' the 'signal' datatype exists ('yes' or 'no')

     'ac_cv_type_ssize_t' the 'ssize_t' datatype exists ('yes' or 'no')

     'ac_cv_type_uid_t' the 'uid_t' datatype exists ('yes' or 'no')

     'ac_cv_type_uint128_t' the 'uint128_t' datatype exists ('yes' or
     'no')

     'ac_cv_type_uint16_t' the 'uint16_t' datatype exists ('yes' or
     'no')

     'ac_cv_type_uint32_t' the 'uint32_t' datatype exists ('yes' or
     'no')

     'ac_cv_type_uint64_t' the 'uint64_t' datatype exists ('yes' or
     'no')

     'ac_cv_type_uint8_t' the 'uint8_t' datatype exists ('yes' or 'no')

     'ac_cv_type_uintptr_t' the 'uintptr_t' datatype exists ('yes' or
     'no')

     'ax_cv_const_nics_valid' '$NICS' is a valid printf conversion
     specifier for 'ncptl_int'

     'ax_cv_decl_double_smallest' a definition of the largest double
     value

     'ax_cv_decl_suffix_valid' '$NCPTL_INT_SUFFIX' is a valid suffix for
     an 'ncptl_int' constant

     'ax_cv_file_cray_xc_cname' node coordinates appear in a file

     'ax_cv_file_cray_xt_nid' '_my_pnid' is definable from a file

     'ax_cv_func_mpicc_requires_libm' '$MPICC' wants the math library to
     be linked explicitly

     'ax_cv_func_round_works' 'round' is likely to work

     'ax_cv_prog_cc_ansic' '$CC' supports some basic ANSI C features

     'ax_cv_prog_eval_break_works' 'eval break' successfully breaks out
     of a loop

     'ax_cv_prog_gperf_recent' 'gperf' is sufficiently recent

     'ax_cv_prog_jar_e' '$JAR' supports '-e'

     'ax_cv_prog_ld_interp' we can store symbols in '.interp'

     'ax_cv_prog_ld_so' the name of the dynamic linker

     'ax_cv_prog_make_RM' '$am_make' predefines \$(RM)

     'ax_cv_prog_make_RM_qeq' '$am_make' supports '?='

     'ax_cv_prog_perl_logextract' '$PERL' can run 'ncptl-logextract'

     'ax_cv_prog_swig_version' 'swig' version number

     'ax_cv_prog_swig_works' 'swig' works

     'ax_cv_sys_null_device' the null device is called

     'ax_cv_type_MT_STATE_size' number of words of
     random-number-generator state

     'ax_cv_type_long_big_enough' a long can hold both an 'int64_t' and
     an 'ncptl_int' type

     'ax_cv_type_ncptl_int_max' we can find the maximum 'ncptl_int'
     value

     'ax_cv_type_ncptl_int_min' we can find the minimum 'ncptl_int'
     value

     'ax_cv_var___cpu_mhz' '__cpu_mhz' is defined

     'ax_cv_var__my_pnid' '_my_pnid' is defined


File: conceptual.info,  Node: Referenced Applications,  Next: License,  Prev: Cache Variables,  Up: Top

Referenced Applications
***********************

A number of third-party applications are mentioned throughout this
document.  For your convenience, the following list states the URL of
each application's home page.

     a2ps <http://www.gnu.org/software/a2ps/>

     Dimemas See Paraver.

     dot See Graphviz.

     Emacs <http://www.gnu.org/software/emacs/>

     Extrae See Paraver.

Environment Modules
     <http://modules.sourceforge.net/>

     GeSHi <http://qbnz.com/highlighter/>

     Graphviz <http://www.graphviz.org/>

     LaTeX <http://www.latex-project.org/>

     LibSea <http://www.caida.org/tools/visualization/libsea/>

     Mediawiki <http://www.mediawiki.org/>

     MPICL <http://www.csm.ornl.gov/picl/>

     ParaGraph <http://www.csar.uiuc.edu/software/paragraph/>

     Paraver <http://www.bsc.es/paraver>

     PICL See MPICL.

     pkg-config <http://pkg-config.freedesktop.org/wiki/>

     PSTricks <http://www.tug.org/applications/PSTricks/>

     Python <http://www.python.org/>

     SLOCCount <http://www.dwheeler.com/sloccount/>

     Source-highlight <http://www.gnu.org/software/src-highlite/>

     TeX See LaTeX.

     Vim <http://www.vim.org/>

     Walrus <http://www.caida.org/tools/visualization/walrus/>


File: conceptual.info,  Node: License,  Next: Index,  Prev: Referenced Applications,  Up: Top

License
*******

Copyright (C) 2015, Los Alamos National Security, LLC
All rights reserved.


   Copyright (2015).  Los Alamos National Security, LLC. This software
was produced under U.S. Government contract DE-AC52-06NA25396 for Los
Alamos National Laboratory (LANL), which is operated by Los Alamos
National Security, LLC (LANS) for the U.S. Department of Energy.  The
U.S. Government has rights to use, reproduce, and distribute this
software.  NEITHER THE GOVERNMENT NOR LANS MAKES ANY WARRANTY, EXPRESS
OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If
software is modified to produce derivative works, such modified software
should be clearly marked, so as not to confuse it with the version
available from LANL.

   Additionally, redistribution and use in source and binary forms, with
or without modification, are permitted provided that the following
conditions are met:

   * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

   * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the
     distribution.

   * Neither the name of Los Alamos National Security, LLC, Los Alamos
     National Laboratory, the U.S. Government, nor the names of its
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.

   THIS SOFTWARE IS PROVIDED BY LANS AND CONTRIBUTORS "AS IS" AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LANS OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.

Summary
.......

This is a BSD license with the additional proviso that modified versions
of coNCePTuaL must indicate that they are, in fact, modified.


File: conceptual.info,  Node: Index,  Prev: License,  Up: Top

Index
*****

 [index ]
* Menu:

* #include:                              Hook methods.       (line   37)
* #include <1>:                          Hook methods.       (line   77)
* --:                                    Compiling coNCePTuaL programs.
                                                             (line  148)
* -- <1>:                                Supplied backends.  (line   89)
* --after:                               ncptl-logextract manual page.
                                                             (line   16)
* --all-events:                          The picl backend.   (line   66)
* --all-events <1>:                      The picl backend.   (line   69)
* --annotate:                            The latex_vis backend.
                                                             (line   97)
* --annotate <1>:                        The latex_vis backend.
                                                             (line  102)
* --annotate <2>:                        The latex_vis backend.
                                                             (line  103)
* --annotate <3>:                        The latex_vis backend.
                                                             (line  105)
* --annotate <4>:                        The latex_vis backend.
                                                             (line  136)
* --arrow-width:                         The latex_vis backend.
                                                             (line  142)
* --arrow-width <1>:                     The latex_vis backend.
                                                             (line  146)
* --arrow-width <2>:                     The latex_vis backend.
                                                             (line  150)
* --arrow-width <3>:                     The latex_vis backend.
                                                             (line  153)
* --backend:                             Compiling coNCePTuaL programs.
                                                             (line   24)
* --backend <1>:                         Compiling coNCePTuaL programs.
                                                             (line   26)
* --backend <2>:                         Compiling coNCePTuaL programs.
                                                             (line  132)
* --backend <3>:                         Compiling coNCePTuaL programs.
                                                             (line  151)
* --backend <4>:                         Command-line options for c_mpi.
                                                             (line    6)
* --backend <5>:                         Command-line options for c_trace.
                                                             (line    6)
* --backend <6>:                         Environment Variables.
                                                             (line   13)
* --before:                              ncptl-logextract manual page.
                                                             (line   16)
* --binary-tasks:                        The latex_vis backend.
                                                             (line  113)
* --binary-tasks <1>:                    The latex_vis backend.
                                                             (line  116)
* --booktabs:                            ncptl-logextract manual page.
                                                             (line  766)
* --booktabs <1>:                        ncptl-logextract manual page.
                                                             (line  870)
* --breakpoint:                          c_trace tracing with curses.
                                                             (line   18)
* --breakpoint <1>:                      c_trace tracing with curses.
                                                             (line   75)
* --breakpoint <2>:                      Offline tracing with curses.
                                                             (line   34)
* --build:                               Cross-compilation.  (line   21)
* --chdir:                               ncptl-logextract manual page.
                                                             (line  899)
* --chdir <1>:                           ncptl-logextract manual page.
                                                             (line  912)
* --chdir <2>:                           ncptl-logextract manual page.
                                                             (line  924)
* --chdir <3>:                           ncptl-logextract manual page.
                                                             (line  936)
* --chdir <4>:                           ncptl-logextract manual page.
                                                             (line  948)
* --chdir <5>:                           ncptl-logextract manual page.
                                                             (line  960)
* --chdir <6>:                           ncptl-logextract manual page.
                                                             (line  972)
* --colbegin:                            ncptl-logextract manual page.
                                                             (line  185)
* --colbegin <1>:                        ncptl-logextract manual page.
                                                             (line  284)
* --colbegin <2>:                        ncptl-logextract manual page.
                                                             (line  383)
* --colbegin <3>:                        ncptl-logextract manual page.
                                                             (line  478)
* --colbegin <4>:                        ncptl-logextract manual page.
                                                             (line  574)
* --colbegin <5>:                        ncptl-logextract manual page.
                                                             (line  669)
* --colend:                              ncptl-logextract manual page.
                                                             (line  194)
* --colend <1>:                          ncptl-logextract manual page.
                                                             (line  293)
* --colend <2>:                          ncptl-logextract manual page.
                                                             (line  392)
* --colend <3>:                          ncptl-logextract manual page.
                                                             (line  487)
* --colend <4>:                          ncptl-logextract manual page.
                                                             (line  583)
* --colend <5>:                          ncptl-logextract manual page.
                                                             (line  678)
* --colsep:                              ncptl-logextract manual page.
                                                             (line  190)
* --colsep <1>:                          ncptl-logextract manual page.
                                                             (line  289)
* --colsep <2>:                          ncptl-logextract manual page.
                                                             (line  388)
* --colsep <3>:                          ncptl-logextract manual page.
                                                             (line  483)
* --colsep <4>:                          ncptl-logextract manual page.
                                                             (line  579)
* --colsep <5>:                          ncptl-logextract manual page.
                                                             (line  674)
* --colsep <6>:                          ncptl-logextract manual page.
                                                             (line  816)
* --columns:                             ncptl-logextract manual page.
                                                             (line  812)
* --columns <1>:                         ncptl-logextract manual page.
                                                             (line 1094)
* --columns <2>:                         ncptl-logextract manual page.
                                                             (line 1098)
* --columns <3>:                         ncptl-logextract manual page.
                                                             (line 1105)
* --columns <4>:                         ncptl-logextract manual page.
                                                             (line 1112)
* --combegin:                            ncptl-logextract manual page.
                                                             (line 1007)
* --comend:                              ncptl-logextract manual page.
                                                             (line 1012)
* --comment:                             Running coNCePTuaL programs.
                                                             (line   26)
* --comment <1>:                         Running coNCePTuaL programs.
                                                             (line   43)
* --comment <2>:                         Running coNCePTuaL programs.
                                                             (line   47)
* --comment <3>:                         Running coNCePTuaL programs.
                                                             (line   47)
* --comment <4>:                         Running coNCePTuaL programs.
                                                             (line  106)
* --comment <5>:                         Running coNCePTuaL programs.
                                                             (line  107)
* --comment <6>:                         Running coNCePTuaL programs.
                                                             (line  120)
* --comp-time:                           The paraver backend.
                                                             (line   73)
* --compress:                            The dot_ast backend.
                                                             (line  169)
* --compress <1>:                        The dot_ast backend.
                                                             (line  169)
* --compress <2>:                        The dot_ast backend.
                                                             (line  171)
* --conc-events:                         The paraver backend.
                                                             (line   84)
* --conc-events <1>:                     The paraver backend.
                                                             (line   95)
* --conc-source:                         The paraver backend.
                                                             (line   83)
* --conc-source <1>:                     The paraver backend.
                                                             (line   86)
* --curses:                              Command-line options for c_trace.
                                                             (line   20)
* --curses <1>:                          Default c_trace tracing.
                                                             (line    6)
* --curses <2>:                          c_trace tracing with curses.
                                                             (line    6)
* --curses <3>:                          c_trace tracing with curses.
                                                             (line   52)
* --curses <4>:                          Offline tracing with curses.
                                                             (line   10)
* --curses <5>:                          Offline tracing with curses.
                                                             (line   18)
* --curses <6>:                          Offline tracing with curses.
                                                             (line   43)
* --dcolumn:                             ncptl-logextract manual page.
                                                             (line  762)
* --delay:                               c_trace tracing with curses.
                                                             (line   13)
* --delay <1>:                           Offline tracing with curses.
                                                             (line   26)
* --dimemas-events:                      The paraver backend.
                                                             (line  106)
* --disable-hpet:                        Time-related functions.
                                                             (line  101)
* --disable-proc-interrupts:             Log-file format.    (line  243)
* --disable-shared:                      configure.          (line   17)
* --disable-shared <1>:                  configure.          (line   20)
* --disable-shared <2>:                  configure.          (line   26)
* --disable-shared <3>:                  ``cannot open shared object file''.
                                                             (line   49)
* --disable-shared <4>:                  ``cannot open shared object file''.
                                                             (line   62)
* --dumpkeys:                            ncptl-logextract manual page.
                                                             (line 1118)
* --enable-broken-components:            Manual configuration.
                                                             (line   13)
* --enable-hpet:                         Time-related functions.
                                                             (line  105)
* --enable-maintainer-mode:              Build process.      (line   17)
* --enable-maintainer-mode <1>:          Build process.      (line   25)
* --envformat:                           ncptl-logextract manual page.
                                                             (line  807)
* --envformat <1>:                       ncptl-logextract manual page.
                                                             (line  839)
* --envformat <2>:                       ncptl-logextract manual page.
                                                             (line  862)
* --event-time:                          The paraver backend.
                                                             (line   79)
* --every-event:                         The latex_vis backend.
                                                             (line  121)
* --excel:                               ncptl-logextract manual page.
                                                             (line  262)
* --excel <1>:                           ncptl-logextract manual page.
                                                             (line  361)
* --excel <2>:                           ncptl-logextract manual page.
                                                             (line  743)
* --exclude:                             The stats backend.  (line  145)
* --exclude <1>:                         The stats backend.  (line  148)
* --exclude <2>:                         The stats backend.  (line  151)
* --exclude <3>:                         ncptl-logextract manual page.
                                                             (line  795)
* --exclude <4>:                         ncptl-logextract manual page.
                                                             (line  836)
* --exclude <5>:                         ncptl-logextract manual page.
                                                             (line  859)
* --exclude <6>:                         ncptl-logextract manual page.
                                                             (line 1120)
* --expand-lists:                        The stats backend.  (line  108)
* --extra-dot:                           The dot_ast backend.
                                                             (line  160)
* --extra-dot <1>:                       The dot_ast backend.
                                                             (line  160)
* --extra-dot <2>:                       The dot_ast backend.
                                                             (line  164)
* --extract:                             ncptl-logextract manual page.
                                                             (line   15)
* --extract <1>:                         ncptl-logextract manual page.
                                                             (line   94)
* --extract <2>:                         ncptl-logextract manual page.
                                                             (line  149)
* --extract <3>:                         ncptl-logextract manual page.
                                                             (line  159)
* --extract <4>:                         ncptl-logextract manual page.
                                                             (line  163)
* --extract <5>:                         ncptl-logextract manual page.
                                                             (line  171)
* --extract <6>:                         ncptl-logextract manual page.
                                                             (line  176)
* --extract <7>:                         ncptl-logextract manual page.
                                                             (line  786)
* --extract <8>:                         ncptl-logextract manual page.
                                                             (line  887)
* --extract <9>:                         ncptl-logextract manual page.
                                                             (line  975)
* --extract <10>:                        ncptl-logextract manual page.
                                                             (line 1023)
* --extract <11>:                        ncptl-logextract manual page.
                                                             (line 1260)
* --filter:                              Compiling coNCePTuaL programs.
                                                             (line   93)
* --filter <1>:                          Compiling coNCePTuaL programs.
                                                             (line   93)
* --filter <2>:                          Compiling coNCePTuaL programs.
                                                             (line   97)
* --filter <3>:                          Compiling coNCePTuaL programs.
                                                             (line  108)
* --filter <4>:                          Compiling coNCePTuaL programs.
                                                             (line  110)
* --filter <5>:                          Further customizations.
                                                             (line    6)
* --filter <6>:                          Further customizations.
                                                             (line    9)
* --filter <7>:                          Further customizations.
                                                             (line   16)
* --filter <8>:                          Further customizations.
                                                             (line   19)
* --filter <9>:                          Further customizations.
                                                             (line   22)
* --filter <10>:                         Further customizations.
                                                             (line   69)
* --force-merge:                         ncptl-logextract manual page.
                                                             (line   17)
* --force-merge <1>:                     ncptl-logextract manual page.
                                                             (line  113)
* --force-merge <2>:                     ncptl-logextract manual page.
                                                             (line  115)
* --force-merge <3>:                     ncptl-logextract manual page.
                                                             (line  116)
* --force-merge <4>:                     ncptl-logextract manual page.
                                                             (line 1139)
* --format:                              The stats backend.  (line  112)
* --format <1>:                          The stats backend.  (line  114)
* --format <2>:                          The stats backend.  (line  119)
* --format <3>:                          The stats backend.  (line  129)
* --format <4>:                          The stats backend.  (line  129)
* --format <5>:                          The stats backend.  (line  138)
* --format <6>:                          The dot_ast backend.
                                                             (line  136)
* --format <7>:                          The dot_ast backend.
                                                             (line  138)
* --format <8>:                          The dot_ast backend.
                                                             (line  238)
* --format <9>:                          ncptl-logextract manual page.
                                                             (line   15)
* --format <10>:                         ncptl-logextract manual page.
                                                             (line  150)
* --format <11>:                         ncptl-logextract manual page.
                                                             (line  161)
* --format <12>:                         ncptl-logextract manual page.
                                                             (line  162)
* --format <13>:                         ncptl-logextract manual page.
                                                             (line  172)
* --format <14>:                         ncptl-logextract manual page.
                                                             (line  179)
* --format <15>:                         ncptl-logextract manual page.
                                                             (line  278)
* --format <16>:                         ncptl-logextract manual page.
                                                             (line  377)
* --format <17>:                         ncptl-logextract manual page.
                                                             (line  472)
* --format <18>:                         ncptl-logextract manual page.
                                                             (line  568)
* --format <19>:                         ncptl-logextract manual page.
                                                             (line  663)
* --format <20>:                         ncptl-logextract manual page.
                                                             (line  759)
* --format <21>:                         ncptl-logextract manual page.
                                                             (line  789)
* --format <22>:                         ncptl-logextract manual page.
                                                             (line  830)
* --format <23>:                         ncptl-logextract manual page.
                                                             (line  853)
* --format <24>:                         ncptl-logextract manual page.
                                                             (line  890)
* --format <25>:                         ncptl-logextract manual page.
                                                             (line  902)
* --format <26>:                         ncptl-logextract manual page.
                                                             (line  915)
* --format <27>:                         ncptl-logextract manual page.
                                                             (line  927)
* --format <28>:                         ncptl-logextract manual page.
                                                             (line  939)
* --format <29>:                         ncptl-logextract manual page.
                                                             (line  951)
* --format <30>:                         ncptl-logextract manual page.
                                                             (line  963)
* --format <31>:                         ncptl-logextract manual page.
                                                             (line  978)
* --format <32>:                         ncptl-logextract manual page.
                                                             (line 1026)
* --format <33>:                         ncptl-logextract manual page.
                                                             (line 1046)
* --format <34>:                         ncptl-logextract manual page.
                                                             (line 1066)
* --format <35>:                         ncptl-logextract manual page.
                                                             (line 1192)
* --format <36>:                         ncptl-logextract manual page.
                                                             (line 1302)
* --frequency:                           The picl backend.   (line   79)
* --frequency <1>:                       The picl backend.   (line   85)
* --hcolbegin:                           ncptl-logextract manual page.
                                                             (line  214)
* --hcolbegin <1>:                       ncptl-logextract manual page.
                                                             (line  313)
* --hcolbegin <2>:                       ncptl-logextract manual page.
                                                             (line  412)
* --hcolbegin <3>:                       ncptl-logextract manual page.
                                                             (line  507)
* --hcolbegin <4>:                       ncptl-logextract manual page.
                                                             (line  598)
* --hcolbegin <5>:                       ncptl-logextract manual page.
                                                             (line  698)
* --hcolend:                             ncptl-logextract manual page.
                                                             (line  222)
* --hcolend <1>:                         ncptl-logextract manual page.
                                                             (line  321)
* --hcolend <2>:                         ncptl-logextract manual page.
                                                             (line  421)
* --hcolend <3>:                         ncptl-logextract manual page.
                                                             (line  515)
* --hcolend <4>:                         ncptl-logextract manual page.
                                                             (line  608)
* --hcolend <5>:                         ncptl-logextract manual page.
                                                             (line  706)
* --hcolsep:                             ncptl-logextract manual page.
                                                             (line  218)
* --hcolsep <1>:                         ncptl-logextract manual page.
                                                             (line  317)
* --hcolsep <2>:                         ncptl-logextract manual page.
                                                             (line  417)
* --hcolsep <3>:                         ncptl-logextract manual page.
                                                             (line  511)
* --hcolsep <4>:                         ncptl-logextract manual page.
                                                             (line  603)
* --hcolsep <5>:                         ncptl-logextract manual page.
                                                             (line  702)
* --help:                                Typesetting conventions.
                                                             (line   12)
* --help <1>:                            configure.          (line   11)
* --help <2>:                            configure.          (line  143)
* --help <3>:                            Compiling coNCePTuaL programs.
                                                             (line    7)
* --help <4>:                            Supplied backends.  (line   87)
* --help <5>:                            Supplied backends.  (line   91)
* --help <6>:                            Running coNCePTuaL programs.
                                                             (line   19)
* --help <7>:                            Running coNCePTuaL programs.
                                                             (line   26)
* --help <8>:                            Running coNCePTuaL programs.
                                                             (line   43)
* --help <9>:                            ncptl-logextract.   (line   18)
* --help <10>:                           ncptl-logextract manual page.
                                                             (line   12)
* --help <11>:                           ncptl-logmerge.     (line   26)
* --help <12>:                           ncptl-logmerge manual page.
                                                             (line   11)
* --help <13>:                           ncptl-logunmerge.   (line   16)
* --help <14>:                           ncptl-logunmerge manual page.
                                                             (line   12)
* --help <15>:                           Command-line arguments.
                                                             (line   16)
* --help <16>:                           Command-line arguments.
                                                             (line   31)
* --help <17>:                           Initialization functions.
                                                             (line   43)
* --help <18>:                           Initialization functions.
                                                             (line   55)
* --help-backend:                        Compiling coNCePTuaL programs.
                                                             (line  131)
* --help-backend <1>:                    Compiling coNCePTuaL programs.
                                                             (line  133)
* --help-backend <2>:                    Compiling coNCePTuaL programs.
                                                             (line  158)
* --help-backend <3>:                    Compiling coNCePTuaL programs.
                                                             (line  159)
* --hierarchy:                           The interpret backend.
                                                             (line   49)
* --hierarchy <1>:                       The interpret backend.
                                                             (line   52)
* --hierarchy <2>:                       Task latency hierarchies.
                                                             (line    7)
* --hierarchy <3>:                       Task latency hierarchies.
                                                             (line   12)
* --hierarchy <4>:                       Task latency hierarchies.
                                                             (line   20)
* --hierarchy <5>:                       Task latency hierarchies.
                                                             (line   20)
* --hierarchy <6>:                       Task latency hierarchies.
                                                             (line   38)
* --hierarchy <7>:                       Task latency hierarchies.
                                                             (line   39)
* --host:                                Cross-compilation.  (line   23)
* --hrowbegin:                           ncptl-logextract manual page.
                                                             (line  226)
* --hrowbegin <1>:                       ncptl-logextract manual page.
                                                             (line  325)
* --hrowbegin <2>:                       ncptl-logextract manual page.
                                                             (line  426)
* --hrowbegin <3>:                       ncptl-logextract manual page.
                                                             (line  519)
* --hrowbegin <4>:                       ncptl-logextract manual page.
                                                             (line  613)
* --hrowbegin <5>:                       ncptl-logextract manual page.
                                                             (line  710)
* --hrowend:                             ncptl-logextract manual page.
                                                             (line  234)
* --hrowend <1>:                         ncptl-logextract manual page.
                                                             (line  333)
* --hrowend <2>:                         ncptl-logextract manual page.
                                                             (line  434)
* --hrowend <3>:                         ncptl-logextract manual page.
                                                             (line  528)
* --hrowend <4>:                         ncptl-logextract manual page.
                                                             (line  622)
* --hrowend <5>:                         ncptl-logextract manual page.
                                                             (line  718)
* --hrowsep:                             ncptl-logextract manual page.
                                                             (line  230)
* --hrowsep <1>:                         ncptl-logextract manual page.
                                                             (line  329)
* --hrowsep <2>:                         ncptl-logextract manual page.
                                                             (line  430)
* --hrowsep <3>:                         ncptl-logextract manual page.
                                                             (line  524)
* --hrowsep <4>:                         ncptl-logextract manual page.
                                                             (line  618)
* --hrowsep <5>:                         ncptl-logextract manual page.
                                                             (line  714)
* --include:                             ncptl-logextract manual page.
                                                             (line  792)
* --include <1>:                         ncptl-logextract manual page.
                                                             (line  833)
* --include <2>:                         ncptl-logextract manual page.
                                                             (line  856)
* --include <3>:                         ncptl-logextract manual page.
                                                             (line 1118)
* --indent:                              ncptl-logextract manual page.
                                                             (line 1016)
* --indent <1>:                          ncptl-logextract manual page.
                                                             (line 1088)
* --itembegin:                           ncptl-logextract manual page.
                                                             (line 1038)
* --itembegin <1>:                       ncptl-logextract manual page.
                                                             (line 1058)
* --itembegin <2>:                       ncptl-logextract manual page.
                                                             (line 1078)
* --itemend:                             ncptl-logextract manual page.
                                                             (line 1042)
* --itemend <1>:                         ncptl-logextract manual page.
                                                             (line 1062)
* --itemend <2>:                         ncptl-logextract manual page.
                                                             (line 1082)
* --keep-columns:                        ncptl-logextract manual page.
                                                             (line  265)
* --keep-columns <1>:                    ncptl-logextract manual page.
                                                             (line  364)
* --keep-columns <2>:                    ncptl-logextract manual page.
                                                             (line  459)
* --keep-columns <3>:                    ncptl-logextract manual page.
                                                             (line  555)
* --keep-columns <4>:                    ncptl-logextract manual page.
                                                             (line  650)
* --keep-columns <5>:                    ncptl-logextract manual page.
                                                             (line  746)
* --keep-columns <6>:                    ncptl-logextract manual page.
                                                             (line  773)
* --keep-columns <7>:                    ncptl-logextract manual page.
                                                             (line 1122)
* --keep-columns <8>:                    ncptl-logextract manual page.
                                                             (line 1123)
* --keep-columns <9>:                    ncptl-logextract manual page.
                                                             (line 1149)
* --keep-columns <10>:                   ncptl-logextract manual page.
                                                             (line 1149)
* --keep-ints:                           Compiling coNCePTuaL programs.
                                                             (line   68)
* --keep-ints <1>:                       Compiling coNCePTuaL programs.
                                                             (line   69)
* --keep-ints <2>:                       The latex_vis backend.
                                                             (line  108)
* --keep-ints <3>:                       Further customizations.
                                                             (line   71)
* --keep-ints <4>:                       Backend creation.   (line   75)
* --kill-reps:                           The interpret backend.
                                                             (line   56)
* --kill-reps <1>:                       The latex_vis backend.
                                                             (line   63)
* --kwbegin:                             ncptl-logextract manual page.
                                                             (line  991)
* --kwend:                               ncptl-logextract manual page.
                                                             (line  996)
* --lenient:                             Compiling coNCePTuaL programs.
                                                             (line   73)
* --lenient <1>:                         Compiling coNCePTuaL programs.
                                                             (line   73)
* --lenient <2>:                         Compiling coNCePTuaL programs.
                                                             (line   79)
* --lenient <3>:                         Compiling coNCePTuaL programs.
                                                             (line   84)
* --lenient <4>:                         Compiling coNCePTuaL programs.
                                                             (line  152)
* --linebegin:                           ncptl-logextract manual page.
                                                             (line  981)
* --lineend:                             ncptl-logextract manual page.
                                                             (line  986)
* --listbegin:                           ncptl-logextract manual page.
                                                             (line 1029)
* --listbegin <1>:                       ncptl-logextract manual page.
                                                             (line 1049)
* --listbegin <2>:                       ncptl-logextract manual page.
                                                             (line 1069)
* --listend:                             ncptl-logextract manual page.
                                                             (line 1034)
* --listend <1>:                         ncptl-logextract manual page.
                                                             (line 1054)
* --listend <2>:                         ncptl-logextract manual page.
                                                             (line 1074)
* --logfile:                             The stats backend.  (line   97)
* --logfile <1>:                         The picl backend.   (line   57)
* --logfile <2>:                         The paraver backend.
                                                             (line   58)
* --logfile <3>:                         The latex_vis backend.
                                                             (line   66)
* --logfile <4>:                         Running coNCePTuaL programs.
                                                             (line   26)
* --logfile <5>:                         Running coNCePTuaL programs.
                                                             (line   43)
* --logfile <6>:                         Running coNCePTuaL programs.
                                                             (line  125)
* --logfile <7>:                         Running coNCePTuaL programs.
                                                             (line  125)
* --logfile <8>:                         Running coNCePTuaL programs.
                                                             (line  138)
* --logfile <9>:                         ncptl-logunmerge manual page.
                                                             (line   15)
* --logfile <10>:                        ncptl-logunmerge manual page.
                                                             (line   73)
* --longtable:                           ncptl-logextract manual page.
                                                             (line  770)
* --longtable <1>:                       ncptl-logextract manual page.
                                                             (line  878)
* --longtable <2>:                       ncptl-logextract manual page.
                                                             (line 1192)
* --man:                                 ncptl-logextract.   (line   20)
* --man <1>:                             ncptl-logextract.   (line   22)
* --man <2>:                             ncptl-logextract manual page.
                                                             (line   12)
* --man <3>:                             ncptl-logmerge.     (line   28)
* --man <4>:                             ncptl-logmerge.     (line   31)
* --man <5>:                             ncptl-logmerge manual page.
                                                             (line   11)
* --man <6>:                             ncptl-logunmerge.   (line   18)
* --man <7>:                             ncptl-logunmerge.   (line   20)
* --man <8>:                             ncptl-logunmerge manual page.
                                                             (line   12)
* --mcastsync:                           The interpret backend.
                                                             (line   63)
* --mcastsync <1>:                       The picl backend.   (line   54)
* --mcastsync <2>:                       The paraver backend.
                                                             (line   55)
* --mcastsync <3>:                       The latex_vis backend.
                                                             (line   61)
* --memcache:                            ncptl-logunmerge manual page.
                                                             (line   16)
* --memcache <1>:                        ncptl-logunmerge manual page.
                                                             (line   94)
* --memcache <2>:                        ncptl-logunmerge manual page.
                                                             (line   95)
* --merge:                               ncptl-logextract manual page.
                                                             (line  269)
* --merge <1>:                           ncptl-logextract manual page.
                                                             (line  368)
* --merge <2>:                           ncptl-logextract manual page.
                                                             (line  463)
* --merge <3>:                           ncptl-logextract manual page.
                                                             (line  559)
* --merge <4>:                           ncptl-logextract manual page.
                                                             (line  654)
* --merge <5>:                           ncptl-logextract manual page.
                                                             (line  750)
* --merge <6>:                           ncptl-logextract manual page.
                                                             (line  777)
* --merge <7>:                           ncptl-logextract manual page.
                                                             (line 1128)
* --merge <8>:                           ncptl-logextract manual page.
                                                             (line 1132)
* --merge <9>:                           ncptl-logextract manual page.
                                                             (line 1135)
* --merge <10>:                          ncptl-logextract manual page.
                                                             (line 1143)
* --merge <11>:                          ncptl-logextract manual page.
                                                             (line 1144)
* --merge <12>:                          ncptl-logextract manual page.
                                                             (line 1149)
* --merge <13>:                          ncptl-logextract manual page.
                                                             (line 1150)
* --merge <14>:                          ncptl-logextract manual page.
                                                             (line 1157)
* --merge <15>:                          ncptl-logextract manual page.
                                                             (line 1207)
* --messages:                            Command-line arguments.
                                                             (line   29)
* --monitor:                             c_trace tracing with curses.
                                                             (line   16)
* --monitor <1>:                         Offline tracing with curses.
                                                             (line   30)
* --newlines:                            ncptl-logextract manual page.
                                                             (line  893)
* --newlines <1>:                        ncptl-logextract manual page.
                                                             (line  906)
* --newlines <2>:                        ncptl-logextract manual page.
                                                             (line  918)
* --newlines <3>:                        ncptl-logextract manual page.
                                                             (line  930)
* --newlines <4>:                        ncptl-logextract manual page.
                                                             (line  942)
* --newlines <5>:                        ncptl-logextract manual page.
                                                             (line  954)
* --newlines <6>:                        ncptl-logextract manual page.
                                                             (line  966)
* --no-attrs:                            The dot_ast backend.
                                                             (line  223)
* --no-attrs <1>:                        The dot_ast backend.
                                                             (line  224)
* --no-compile:                          Compiling coNCePTuaL programs.
                                                             (line   61)
* --no-compile <1>:                      Compiling coNCePTuaL programs.
                                                             (line   62)
* --no-compile <2>:                      The c_mpi backend.  (line   16)
* --no-compile <3>:                      The c_udgram backend.
                                                             (line   22)
* --no-compile <4>:                      The latex_vis backend.
                                                             (line   23)
* --no-compile <5>:                      The dot_ast backend.
                                                             (line  240)
* --no-lines:                            The dot_ast backend.
                                                             (line  217)
* --no-lines <1>:                        The dot_ast backend.
                                                             (line  218)
* --no-link:                             Compiling coNCePTuaL programs.
                                                             (line   54)
* --no-link <1>:                         Compiling coNCePTuaL programs.
                                                             (line   55)
* --no-link <2>:                         The c_mpi backend.  (line   14)
* --no-link <3>:                         The c_udgram backend.
                                                             (line   17)
* --no-link <4>:                         The dot_ast backend.
                                                             (line  239)
* --no-source:                           The dot_ast backend.
                                                             (line  228)
* --no-source <1>:                       The dot_ast backend.
                                                             (line  229)
* --no-trap:                             Running coNCePTuaL programs.
                                                             (line   26)
* --no-trap <1>:                         Running coNCePTuaL programs.
                                                             (line   43)
* --no-trap <2>:                         Running coNCePTuaL programs.
                                                             (line  150)
* --no-trap <3>:                         Running coNCePTuaL programs.
                                                             (line  150)
* --no-trap <4>:                         Running coNCePTuaL programs.
                                                             (line  160)
* --no-trap <5>:                         Initialization functions.
                                                             (line   27)
* --no-trap <6>:                         Problems running.   (line   13)
* --no-trap <7>:                         Keeping programs from dying on a signal.
                                                             (line   19)
* --node-code:                           The dot_ast backend.
                                                             (line  148)
* --node-code <1>:                       The dot_ast backend.
                                                             (line  149)
* --node-code <2>:                       The dot_ast backend.
                                                             (line  151)
* --node-code <3>:                       The libsea_ast backend.
                                                             (line   34)
* --node-code <4>:                       The libsea_ast backend.
                                                             (line   40)
* --noenv:                               ncptl-logextract manual page.
                                                             (line  801)
* --noenv <1>:                           ncptl-logextract manual page.
                                                             (line  847)
* --noenv <2>:                           ncptl-logextract manual page.
                                                             (line  881)
* --noheaders:                           ncptl-logextract manual page.
                                                             (line  182)
* --noheaders <1>:                       ncptl-logextract manual page.
                                                             (line  281)
* --noheaders <2>:                       ncptl-logextract manual page.
                                                             (line  380)
* --noheaders <3>:                       ncptl-logextract manual page.
                                                             (line  475)
* --noheaders <4>:                       ncptl-logextract manual page.
                                                             (line  571)
* --noheaders <5>:                       ncptl-logextract manual page.
                                                             (line  666)
* --noparams:                            ncptl-logextract manual page.
                                                             (line  804)
* --noparams <1>:                        ncptl-logextract manual page.
                                                             (line  850)
* --noparams <2>:                        ncptl-logextract manual page.
                                                             (line  884)
* --output:                              Compiling coNCePTuaL programs.
                                                             (line  116)
* --output <1>:                          Compiling coNCePTuaL programs.
                                                             (line  120)
* --output <2>:                          The interpret backend.
                                                             (line   80)
* --output <3>:                          The interpret backend.
                                                             (line   81)
* --output <4>:                          ncptl-logextract manual page.
                                                             (line   18)
* --output <5>:                          ncptl-logmerge manual page.
                                                             (line   14)
* --output <6>:                          ncptl-logmerge manual page.
                                                             (line   90)
* --output <7>:                          Backend creation.   (line   68)
* --output <8>:                          Backend creation.   (line   69)
* --prefix:                              configure.          (line   31)
* --prefix <1>:                          configure.          (line   32)
* --prefix <2>:                          configure.          (line   34)
* --prefix <3>:                          make install.       (line   19)
* --prefix <4>:                          Cross-compilation.  (line   88)
* --procs:                               ncptl-logextract manual page.
                                                             (line   17)
* --procs <1>:                           ncptl-logextract manual page.
                                                             (line  122)
* --procs <2>:                           ncptl-logunmerge manual page.
                                                             (line   15)
* --profile:                             The c_profile backend.
                                                             (line   14)
* --program:                             Compiling coNCePTuaL programs.
                                                             (line   88)
* --program <1>:                         Compiling coNCePTuaL programs.
                                                             (line  119)
* --program <2>:                         Compiling coNCePTuaL programs.
                                                             (line  124)
* --program <3>:                         Compiling coNCePTuaL programs.
                                                             (line  124)
* --program <4>:                         Compiling coNCePTuaL programs.
                                                             (line  126)
* --program <5>:                         Compiling coNCePTuaL programs.
                                                             (line  152)
* --program <6>:                         Compiling coNCePTuaL programs.
                                                             (line  153)
* --program <7>:                         Backend creation.   (line   63)
* --quiet:                               Compiling coNCePTuaL programs.
                                                             (line   50)
* --quiet <1>:                           Compiling coNCePTuaL programs.
                                                             (line   50)
* --quiet <2>:                           ncptl-logextract manual page.
                                                             (line   17)
* --quiet <3>:                           ncptl-logextract manual page.
                                                             (line  130)
* --quiet <4>:                           ncptl-logunmerge manual page.
                                                             (line   15)
* --quiet <5>:                           ncptl-logunmerge manual page.
                                                             (line   86)
* --quiet <6>:                           Backend creation.   (line   73)
* --quote:                               ncptl-logextract manual page.
                                                             (line  253)
* --quote <1>:                           ncptl-logextract manual page.
                                                             (line  352)
* --quote <2>:                           ncptl-logextract manual page.
                                                             (line  451)
* --quote <3>:                           ncptl-logextract manual page.
                                                             (line  546)
* --quote <4>:                           ncptl-logextract manual page.
                                                             (line  642)
* --quote <5>:                           ncptl-logextract manual page.
                                                             (line  735)
* --reduce:                              Command-line options for c_mpi.
                                                             (line   25)
* --reduce <1>:                          Command-line options for c_mpi.
                                                             (line   26)
* --rowbegin:                            ncptl-logextract manual page.
                                                             (line  199)
* --rowbegin <1>:                        ncptl-logextract manual page.
                                                             (line  298)
* --rowbegin <2>:                        ncptl-logextract manual page.
                                                             (line  397)
* --rowbegin <3>:                        ncptl-logextract manual page.
                                                             (line  492)
* --rowbegin <4>:                        ncptl-logextract manual page.
                                                             (line  588)
* --rowbegin <5>:                        ncptl-logextract manual page.
                                                             (line  683)
* --rowbegin <6>:                        ncptl-logextract manual page.
                                                             (line  820)
* --rowend:                              ncptl-logextract manual page.
                                                             (line  209)
* --rowend <1>:                          ncptl-logextract manual page.
                                                             (line  308)
* --rowend <2>:                          ncptl-logextract manual page.
                                                             (line  407)
* --rowend <3>:                          ncptl-logextract manual page.
                                                             (line  502)
* --rowend <4>:                          ncptl-logextract manual page.
                                                             (line  593)
* --rowend <5>:                          ncptl-logextract manual page.
                                                             (line  693)
* --rowend <6>:                          ncptl-logextract manual page.
                                                             (line  825)
* --rowsep:                              ncptl-logextract manual page.
                                                             (line  204)
* --rowsep <1>:                          ncptl-logextract manual page.
                                                             (line  303)
* --rowsep <2>:                          ncptl-logextract manual page.
                                                             (line  402)
* --rowsep <3>:                          ncptl-logextract manual page.
                                                             (line  497)
* --rowsep <4>:                          ncptl-logextract manual page.
                                                             (line  688)
* --seed:                                Running coNCePTuaL programs.
                                                             (line   26)
* --seed <1>:                            Running coNCePTuaL programs.
                                                             (line   44)
* --seed <2>:                            Running coNCePTuaL programs.
                                                             (line  166)
* --seed <3>:                            Running coNCePTuaL programs.
                                                             (line  166)
* --seed <4>:                            Initialization functions.
                                                             (line   54)
* --showfnames:                          ncptl-logextract manual page.
                                                             (line  273)
* --showfnames <1>:                      ncptl-logextract manual page.
                                                             (line  372)
* --showfnames <2>:                      ncptl-logextract manual page.
                                                             (line  467)
* --showfnames <3>:                      ncptl-logextract manual page.
                                                             (line  563)
* --showfnames <4>:                      ncptl-logextract manual page.
                                                             (line  658)
* --showfnames <5>:                      ncptl-logextract manual page.
                                                             (line  754)
* --showfnames <6>:                      ncptl-logextract manual page.
                                                             (line  781)
* --showfnames <7>:                      ncptl-logextract manual page.
                                                             (line 1154)
* --showfnames <8>:                      ncptl-logextract manual page.
                                                             (line 1157)
* --showfnames <9>:                      ncptl-logextract manual page.
                                                             (line 1163)
* --simplify:                            ncptl-logmerge manual page.
                                                             (line   14)
* --simplify <1>:                        ncptl-logmerge manual page.
                                                             (line   97)
* --simplify <2>:                        ncptl-logmerge manual page.
                                                             (line  120)
* --simplify <3>:                        ncptl-logmerge manual page.
                                                             (line  121)
* --simplify <4>:                        ncptl-logmerge manual page.
                                                             (line  166)
* --simplify <5>:                        ncptl-logmerge manual page.
                                                             (line  166)
* --simplify <6>:                        ncptl-logmerge manual page.
                                                             (line  166)
* --simplify <7>:                        ncptl-logmerge manual page.
                                                             (line  167)
* --sort:                                ncptl-logextract manual page.
                                                             (line  798)
* --sort <1>:                            ncptl-logextract manual page.
                                                             (line  844)
* --sort <2>:                            ncptl-logextract manual page.
                                                             (line  867)
* --source-lines:                        The latex_vis backend.
                                                             (line  136)
* --ssend:                               Command-line options for c_mpi.
                                                             (line   10)
* --ssend <1>:                           Command-line options for c_mpi.
                                                             (line   14)
* --stagger:                             The latex_vis backend.
                                                             (line  128)
* --strbegin:                            ncptl-logextract manual page.
                                                             (line 1000)
* --strend:                              ncptl-logextract manual page.
                                                             (line 1004)
* --tablebegin:                          ncptl-logextract manual page.
                                                             (line  238)
* --tablebegin <1>:                      ncptl-logextract manual page.
                                                             (line  337)
* --tablebegin <2>:                      ncptl-logextract manual page.
                                                             (line  438)
* --tablebegin <3>:                      ncptl-logextract manual page.
                                                             (line  532)
* --tablebegin <4>:                      ncptl-logextract manual page.
                                                             (line  627)
* --tablebegin <5>:                      ncptl-logextract manual page.
                                                             (line  722)
* --tableend:                            ncptl-logextract manual page.
                                                             (line  248)
* --tableend <1>:                        ncptl-logextract manual page.
                                                             (line  347)
* --tableend <2>:                        ncptl-logextract manual page.
                                                             (line  446)
* --tableend <3>:                        ncptl-logextract manual page.
                                                             (line  541)
* --tableend <4>:                        ncptl-logextract manual page.
                                                             (line  637)
* --tableend <5>:                        ncptl-logextract manual page.
                                                             (line  730)
* --tablesep:                            ncptl-logextract manual page.
                                                             (line  243)
* --tablesep <1>:                        ncptl-logextract manual page.
                                                             (line  342)
* --tablesep <2>:                        ncptl-logextract manual page.
                                                             (line  443)
* --tablesep <3>:                        ncptl-logextract manual page.
                                                             (line  537)
* --tablesep <4>:                        ncptl-logextract manual page.
                                                             (line  632)
* --tablesep <5>:                        ncptl-logextract manual page.
                                                             (line  727)
* --tabularx:                            ncptl-logextract manual page.
                                                             (line  874)
* --tabularx <1>:                        ncptl-logextract manual page.
                                                             (line 1192)
* --tasks:                               The c_udgram backend.
                                                             (line   31)
* --tasks <1>:                           The interpret backend.
                                                             (line   68)
* --tasks <2>:                           The picl backend.   (line   54)
* --tasks <3>:                           The paraver backend.
                                                             (line   55)
* --tasks <4>:                           The latex_vis backend.
                                                             (line   60)
* --this:                                ncptl-logextract manual page.
                                                             (line 1242)
* --this <1>:                            ncptl-logextract manual page.
                                                             (line 1245)
* --this <2>:                            ncptl-logextract manual page.
                                                             (line 1248)
* --trace:                               Command-line options for c_trace.
                                                             (line   10)
* --trace <1>:                           Command-line options for c_trace.
                                                             (line   11)
* --trace <2>:                           Command-line options for c_trace.
                                                             (line   13)
* --trace <3>:                           Offline tracing with curses.
                                                             (line   22)
* --unquote:                             ncptl-logextract manual page.
                                                             (line  258)
* --unquote <1>:                         ncptl-logextract manual page.
                                                             (line  357)
* --unquote <2>:                         ncptl-logextract manual page.
                                                             (line  455)
* --unquote <3>:                         ncptl-logextract manual page.
                                                             (line  551)
* --unquote <4>:                         ncptl-logextract manual page.
                                                             (line  646)
* --unquote <5>:                         ncptl-logextract manual page.
                                                             (line  739)
* --unset:                               ncptl-logextract manual page.
                                                             (line  896)
* --unset <1>:                           ncptl-logextract manual page.
                                                             (line  909)
* --unset <2>:                           ncptl-logextract manual page.
                                                             (line  921)
* --unset <3>:                           ncptl-logextract manual page.
                                                             (line  933)
* --unset <4>:                           ncptl-logextract manual page.
                                                             (line  945)
* --unset <5>:                           ncptl-logextract manual page.
                                                             (line  957)
* --unset <6>:                           ncptl-logextract manual page.
                                                             (line  969)
* --usage:                               Running coNCePTuaL programs.
                                                             (line   26)
* --usage <1>:                           ncptl-logextract.   (line   15)
* --usage <2>:                           ncptl-logextract manual page.
                                                             (line   12)
* --usage <3>:                           ncptl-logmerge.     (line   23)
* --usage <4>:                           ncptl-logmerge manual page.
                                                             (line   11)
* --usage <5>:                           ncptl-logunmerge.   (line   13)
* --usage <6>:                           ncptl-logunmerge manual page.
                                                             (line   12)
* --verbose:                             ncptl-logextract manual page.
                                                             (line   18)
* --verbose <1>:                         ncptl-logextract manual page.
                                                             (line  137)
* --verbose <2>:                         ncptl-logextract manual page.
                                                             (line  139)
* --with-alignment:                      Cross-compilation.  (line   46)
* --with-alignment <1>:                  Cross-compilation.  (line   52)
* --with-alignment <2>:                  ``Unaligned access'' warnings.
                                                             (line   35)
* --with-const-suffix:                   Variables and data types.
                                                             (line   26)
* --with-cross-compilation:              Cross-compilation.  (line   99)
* --with-cross-compilation <1>:          Cross-compilation.  (line   35)
* --with-cross-compilation <2>:          Cross-compilation.  (line   40)
* --with-datatype:                       Variables and data types.
                                                             (line   14)
* --with-gettimeofday:                   configure.          (line   63)
* --with-gettimeofday <1>:               configure.          (line   65)
* --with-gettimeofday <2>:               configure.          (line   73)
* --with-gettimeofday <3>:               Validating the coNCePTuaL timer.
                                                             (line   24)
* --with-gettimeofday <4>:               Time-related functions.
                                                             (line   42)
* --with-gettimeofday <5>:               Time-related functions.
                                                             (line  101)
* --with-gettimeofday <6>:               Invalid timing measurements.
                                                             (line   19)
* --with-header-code:                    Manual configuration.
                                                             (line   19)
* --with-ignored-libs:                   configure.          (line   40)
* --with-ignored-libs <1>:               configure.          (line   42)
* --with-ignored-libs <2>:               configure.          (line   47)
* --with-ignored-libs <3>:               ``cannot open shared object file''.
                                                             (line   21)
* --with-ignored-libs <4>:               ``cannot open shared object file''.
                                                             (line   27)
* --with-mpi-wtime:                      configure.          (line   77)
* --with-mpi-wtime <1>:                  configure.          (line   79)
* --with-mpi-wtime <2>:                  configure.          (line   84)
* --with-mpi-wtime <3>:                  configure.          (line  103)
* --with-mpi-wtime <4>:                  The c_mpi backend.  (line   41)
* --with-mpi-wtime <5>:                  Time-related functions.
                                                             (line   46)
* --with-mpi-wtime <6>:                  Time-related functions.
                                                             (line  101)
* --with-page-size:                      ``Unable to determine the OS page size''.
                                                             (line   14)
* --with-page-size <1>:                  ``Unable to determine the OS page size''.
                                                             (line   18)
* --without-fork:                        configure.          (line   51)
* --without-fork <1>:                    configure.          (line   56)
* --without-fork <2>:                    Miscellaneous mysterious hangs or crashes.
                                                             (line   12)
* --without-fork <3>:                    Miscellaneous mysterious hangs or crashes.
                                                             (line   19)
* --wrap:                                ncptl-logextract manual page.
                                                             (line 1019)
* --wrap <1>:                            ncptl-logextract manual page.
                                                             (line 1091)
* --zero-latency:                        The latex_vis backend.
                                                             (line  161)
* -?:                                    Running coNCePTuaL programs.
                                                             (line   20)
* -? <1>:                                Running coNCePTuaL programs.
                                                             (line   26)
* -? <2>:                                Command-line arguments.
                                                             (line   17)
* -? <3>:                                Command-line arguments.
                                                             (line   32)
* -? <4>:                                Initialization functions.
                                                             (line   44)
* -? <5>:                                Initialization functions.
                                                             (line   56)
* -a:                                    ncptl-logextract manual page.
                                                             (line  105)
* -b:                                    Compiling coNCePTuaL programs.
                                                             (line   24)
* -B:                                    c_trace tracing with curses.
                                                             (line   18)
* -B <1>:                                c_trace tracing with curses.
                                                             (line   75)
* -b <1>:                                ncptl-logextract manual page.
                                                             (line  100)
* -C:                                    Typesetting conventions.
                                                             (line   12)
* -c:                                    Compiling coNCePTuaL programs.
                                                             (line   54)
* -C <1>:                                Running coNCePTuaL programs.
                                                             (line   26)
* -D:                                    c_trace tracing with curses.
                                                             (line   13)
* -E:                                    Compiling coNCePTuaL programs.
                                                             (line   61)
* -e:                                    ncptl-logextract manual page.
                                                             (line   87)
* -f:                                    Compiling coNCePTuaL programs.
                                                             (line   93)
* -f <1>:                                ncptl-logextract manual page.
                                                             (line   93)
* -F:                                    ncptl-logextract manual page.
                                                             (line  110)
* -H:                                    Compiling coNCePTuaL programs.
                                                             (line  131)
* -h:                                    ncptl-logextract manual page.
                                                             (line   79)
* -h <1>:                                ncptl-logmerge manual page.
                                                             (line   81)
* -h <2>:                                ncptl-logunmerge manual page.
                                                             (line   56)
* -K:                                    Compiling coNCePTuaL programs.
                                                             (line   68)
* -L:                                    Compiling coNCePTuaL programs.
                                                             (line   73)
* -L <1>:                                Running coNCePTuaL programs.
                                                             (line   26)
* -L <2>:                                ncptl-logunmerge manual page.
                                                             (line   64)
* -M:                                    c_trace tracing with curses.
                                                             (line   16)
* -m:                                    ncptl-logextract manual page.
                                                             (line   83)
* -m <1>:                                ncptl-logmerge manual page.
                                                             (line   85)
* -m <2>:                                ncptl-logunmerge manual page.
                                                             (line   60)
* -M <1>:                                ncptl-logunmerge manual page.
                                                             (line   92)
* -m <3>:                                Command-line arguments.
                                                             (line   29)
* -o:                                    Compiling coNCePTuaL programs.
                                                             (line  116)
* -o <1>:                                ncptl-logextract manual page.
                                                             (line  143)
* -o <2>:                                ncptl-logmerge manual page.
                                                             (line   89)
* -p:                                    Compiling coNCePTuaL programs.
                                                             (line  124)
* -p <1>:                                ncptl-logextract manual page.
                                                             (line  121)
* -p <2>:                                ncptl-logunmerge manual page.
                                                             (line   79)
* -q:                                    Compiling coNCePTuaL programs.
                                                             (line   50)
* -q <1>:                                ncptl-logextract manual page.
                                                             (line  129)
* -q <2>:                                ncptl-logunmerge manual page.
                                                             (line   85)
* -rpath:                                Implicit dynamic-library search paths.
                                                             (line   20)
* -rpath <1>:                            ``cannot open shared object file''.
                                                             (line   18)
* -rpath <2>:                            ``cannot open shared object file''.
                                                             (line   43)
* -S:                                    Running coNCePTuaL programs.
                                                             (line   26)
* -s:                                    ncptl-logmerge manual page.
                                                             (line   95)
* -s <1>:                                ncptl-logmerge manual page.
                                                             (line  167)
* -s <2>:                                ncptl-logmerge manual page.
                                                             (line  167)
* -s <3>:                                ncptl-logmerge manual page.
                                                             (line  167)
* -s <4>:                                ncptl-logmerge manual page.
                                                             (line  167)
* -S <1>:                                Initialization functions.
                                                             (line   54)
* -u:                                    ncptl-logmerge manual page.
                                                             (line   78)
* -u <1>:                                ncptl-logunmerge manual page.
                                                             (line   53)
* -v:                                    ncptl-logextract manual page.
                                                             (line  136)
* -W:                                    Running coNCePTuaL programs.
                                                             (line   26)
* .libs:                                 Running without installing.
                                                             (line   10)
* /proc:                                 File-reading functions.
                                                             (line   60)
* /proc/interrupts:                      Log-file format.    (line  240)
* /proc/interrupts <1>:                  Log-file format.    (line  242)
* /var/log:                              File-reading functions.
                                                             (line   61)
* /var/log/messages:                     ``Unaligned access'' warnings.
                                                             (line    7)
* _strtoi64:                             Cache Variables.    (line   24)
* __init__:                              A minimal C-based backend.
                                                             (line   14)
* __init__ <1>:                          A minimal C-based backend.
                                                             (line   16)
* __init__ <2>:                          A minimal C-based backend.
                                                             (line   20)
* __init__ <3>:                          A minimal C-based backend.
                                                             (line   21)
* A:                                     Primitives.         (line   25)
* A <1>:                                 Message specifications.
                                                             (line   31)
* A <2>:                                 Item count.         (line    8)
* A <3>:                                 Item count.         (line   10)
* A <4>:                                 Summary of the grammar.
                                                             (line  117)
* A <5>:                                 Summary of the grammar.
                                                             (line  153)
* A <6>:                                 Keywords.           (line   10)
* A HISTOGRAM OF:                        Aggregate expressions.
                                                             (line   14)
* A HISTOGRAM OF <1>:                    Summary of the grammar.
                                                             (line   56)
* A HISTOGRAM OF THE:                    Log-file functions. (line  163)
* A RANDOM PROCESSOR:                    Reordering task IDs.
                                                             (line   23)
* A RANDOM PROCESSOR <1>:                Summary of the grammar.
                                                             (line  296)
* A RANDOM PROCESSOR <2>:                A minimal C-based backend.
                                                             (line   69)
* A RANDOM PROCESSOR <3>:                Random-task functions.
                                                             (line    7)
* A RANDOM TASK:                         Random-number functions.
                                                             (line   12)
* A RANDOM TASK <1>:                     Binding variables.  (line   28)
* A RANDOM TASK <2>:                     Binding variables.  (line   31)
* A RANDOM TASK <3>:                     Binding variables.  (line  110)
* A RANDOM TASK <4>:                     Binding variables.  (line  113)
* A RANDOM TASK <5>:                     Binding variables.  (line  117)
* A RANDOM TASK <6>:                     Summary of the grammar.
                                                             (line  261)
* A RANDOM TASK <7>:                     A minimal C-based backend.
                                                             (line   70)
* A RANDOM TASK <8>:                     Random-task functions.
                                                             (line    8)
* A RANDOM TASK OTHER THAN:              Random-task functions.
                                                             (line    8)
* a.out:                                 Compiling coNCePTuaL programs.
                                                             (line  117)
* a2ps:                                  Installing stylesheets.
                                                             (line   29)
* a2ps <1>:                              make.               (line  108)
* a2ps <2>:                              Installing stylesheets.
                                                             (line   29)
* a2ps <3>:                              Referenced Applications.
                                                             (line   10)
* ABS:                                   Built-in functions. (line   15)
* ABS <1>:                               Integer functions.  (line    6)
* ABS <2>:                               Summary of the grammar.
                                                             (line   43)
* ABS <3>:                               Keywords.           (line   12)
* ABSOLUTE:                              Keywords.           (line   14)
* abstract-syntax tree (AST):            The dot_ast backend.
                                                             (line  128)
* abstract-syntax tree (AST) <1>:        The dot_ast backend.
                                                             (line  148)
* abstract-syntax tree (AST) <2>:        The dot_ast backend.
                                                             (line  169)
* abstract-syntax tree (AST) <3>:        The dot_ast backend.
                                                             (line  217)
* abstract-syntax tree (AST) <4>:        The dot_ast backend.
                                                             (line  223)
* abstract-syntax tree (AST) <5>:        The dot_ast backend.
                                                             (line  228)
* abstract-syntax tree (AST) <6>:        The libsea_ast backend.
                                                             (line    9)
* abstract-syntax tree (AST) <7>:        Backend creation.   (line    7)
* abstract-syntax tree (AST) <8>:        Backend creation.   (line   31)
* abstract-syntax tree (AST) <9>:        Backend creation.   (line   35)
* abstract-syntax tree (AST) <10>:       Internals.          (line   37)
* abstract-syntax tree (AST) <11>:       Method calls.       (line    7)
* acinclude.m4:                          Build process.      (line    9)
* acinclude.m4 <1>:                      Build process.      (line   22)
* aclocal:                               make.               (line   52)
* aclocal <1>:                           Build process.      (line   18)
* aclocal.m4:                            Failure following "missing" check.
                                                             (line    8)
* ac_cv_func_cbrt:                       Cache Variables.    (line   27)
* ac_cv_func_floor:                      Cache Variables.    (line   30)
* ac_cv_func_fmod:                       Cache Variables.    (line   33)
* ac_cv_func_fork:                       Cache Variables.    (line   36)
* ac_cv_func_fork_works:                 Cache Variables.    (line   39)
* ac_cv_func_getaddrinfo:                Cache Variables.    (line   42)
* ac_cv_func_getcwd:                     Cache Variables.    (line   45)
* ac_cv_func_geteuid:                    Cache Variables.    (line   48)
* ac_cv_func_gethostbyname:              Cache Variables.    (line   51)
* ac_cv_func_getinvent:                  Cache Variables.    (line   54)
* ac_cv_func_getopt_long:                Cache Variables.    (line   57)
* ac_cv_func_getpagesize:                Cache Variables.    (line   60)
* ac_cv_func_getpwuid:                   Cache Variables.    (line   63)
* ac_cv_func_getrusage:                  Cache Variables.    (line   66)
* ac_cv_func_getuid:                     Cache Variables.    (line   69)
* ac_cv_func_glob:                       Cache Variables.    (line   72)
* ac_cv_func_ibv_get_devices:            Cache Variables.    (line   78)
* ac_cv_func_ibv_get_device_list:        Cache Variables.    (line   75)
* ac_cv_func_kill:                       Cache Variables.    (line   81)
* ac_cv_func_llabs:                      Cache Variables.    (line   84)
* ac_cv_func_nanosleep:                  Cache Variables.    (line   87)
* ac_cv_func_nearbyint:                  Cache Variables.    (line   90)
* ac_cv_func_popen:                      Cache Variables.    (line   93)
* ac_cv_func_realpath:                   Cache Variables.    (line   96)
* ac_cv_func_rint:                       Cache Variables.    (line   99)
* ac_cv_func_round:                      Cache Variables.    (line  102)
* ac_cv_func_sched_getaffinity:          Cache Variables.    (line  105)
* ac_cv_func_setitimer:                  Cache Variables.    (line  108)
* ac_cv_func_sigaction:                  Cache Variables.    (line  111)
* ac_cv_func_signal:                     Cache Variables.    (line  114)
* ac_cv_func_sleep:                      Cache Variables.    (line  117)
* ac_cv_func_strcasestr:                 Cache Variables.    (line  120)
* ac_cv_func_strerror:                   Cache Variables.    (line  123)
* ac_cv_func_strsignal:                  Cache Variables.    (line  126)
* ac_cv_func_strtok:                     Cache Variables.    (line  129)
* ac_cv_func_strtoll:                    Cache Variables.    (line  132)
* ac_cv_func_strtoq:                     Cache Variables.    (line  135)
* ac_cv_func_sysconf:                    Cache Variables.    (line  138)
* ac_cv_func_sysctl:                     Cache Variables.    (line  141)
* ac_cv_func_sysmp:                      Cache Variables.    (line  144)
* ac_cv_func_syssgi:                     Cache Variables.    (line  147)
* ac_cv_func_time:                       Cache Variables.    (line  150)
* ac_cv_func_trunc:                      Cache Variables.    (line  153)
* ac_cv_func_uname:                      Cache Variables.    (line  156)
* ac_cv_func_vfork:                      Cache Variables.    (line  159)
* ac_cv_func_vfork_works:                Cache Variables.    (line  162)
* ac_cv_func_vfprintf:                   Cache Variables.    (line  165)
* ac_cv_func_vsnprintf:                  Cache Variables.    (line  168)
* ac_cv_func_vsprintf:                   Cache Variables.    (line  171)
* ac_cv_func__strtoi64:                  Cache Variables.    (line   24)
* ac_cv_header_bglpersonality_h:         Cache Variables.    (line  174)
* ac_cv_header_cf_h:                     Cache Variables.    (line  177)
* ac_cv_header_common_bgp_personality_h: Cache Variables.    (line  180)
* ac_cv_header_dlfcn_h:                  Cache Variables.    (line  183)
* ac_cv_header_errno_h:                  Cache Variables.    (line  186)
* ac_cv_header_getopt_h:                 Cache Variables.    (line  189)
* ac_cv_header_glob_h:                   Cache Variables.    (line  192)
* ac_cv_header_gnugetopt_h:              Cache Variables.    (line  195)
* ac_cv_header_ieeefp_h:                 Cache Variables.    (line  198)
* ac_cv_header_infiniband_verbs_h:       Cache Variables.    (line  201)
* ac_cv_header_inttypes_h:               Cache Variables.    (line  204)
* ac_cv_header_invent_h:                 Cache Variables.    (line  207)
* ac_cv_header_libhal_h:                 Cache Variables.    (line  210)
* ac_cv_header_machine_hal_sysinfo_h:    Cache Variables.    (line  213)
* ac_cv_header_memory_h:                 Cache Variables.    (line  216)
* ac_cv_header_mpi_h:                    Cache Variables.    (line  219)
* ac_cv_header_netdb_h:                  Cache Variables.    (line  222)
* ac_cv_header_odmi_h:                   Cache Variables.    (line  225)
* ac_cv_header_papi_h:                   Cache Variables.    (line  228)
* ac_cv_header_pci_pci_h:                Cache Variables.    (line  231)
* ac_cv_header_popt_h:                   Cache Variables.    (line  234)
* ac_cv_header_pwd_h:                    Cache Variables.    (line  237)
* ac_cv_header_rms_rmscall_h:            Cache Variables.    (line  240)
* ac_cv_header_sched_h:                  Cache Variables.    (line  243)
* ac_cv_header_signal_h:                 Cache Variables.    (line  246)
* ac_cv_header_stdint_h:                 Cache Variables.    (line  249)
* ac_cv_header_stdlib_h:                 Cache Variables.    (line  252)
* ac_cv_header_strings_h:                Cache Variables.    (line  258)
* ac_cv_header_string_h:                 Cache Variables.    (line  255)
* ac_cv_header_sys_cfgodm_h:             Cache Variables.    (line  261)
* ac_cv_header_sys_mman_h:               Cache Variables.    (line  264)
* ac_cv_header_sys_param_h:              Cache Variables.    (line  267)
* ac_cv_header_sys_resource_h:           Cache Variables.    (line  270)
* ac_cv_header_sys_select_h:             Cache Variables.    (line  273)
* ac_cv_header_sys_stat_h:               Cache Variables.    (line  276)
* ac_cv_header_sys_sysctl_h:             Cache Variables.    (line  279)
* ac_cv_header_sys_sysinfo_h:            Cache Variables.    (line  282)
* ac_cv_header_sys_sysmp_h:              Cache Variables.    (line  285)
* ac_cv_header_sys_syssgi_h:             Cache Variables.    (line  288)
* ac_cv_header_sys_time_h:               Cache Variables.    (line  291)
* ac_cv_header_sys_types_h:              Cache Variables.    (line  294)
* ac_cv_header_sys_utsname_h:            Cache Variables.    (line  297)
* ac_cv_header_sys_wait_h:               Cache Variables.    (line  300)
* ac_cv_header_time_h:                   Cache Variables.    (line  303)
* ac_cv_header_unistd_h:                 Cache Variables.    (line  306)
* ac_cv_header_uuid_uuid_h:              Cache Variables.    (line  309)
* ac_cv_header_vfork_h:                  Cache Variables.    (line  312)
* ac_cv_header_windows_h:                Cache Variables.    (line  315)
* ac_cv_lib_gnugetopt_getopt_long:       Cache Variables.    (line  318)
* ac_cv_lib_ibverbs_ibv_query_device:    Cache Variables.    (line  322)
* ac_cv_lib_m_fmod:                      Cache Variables.    (line  326)
* ac_cv_lib_sysfs_sysfs_open_class:      Cache Variables.    (line  329)
* ac_cv_member_struct_addrinfo_ai_canonname: Cache Variables.
                                                             (line  336)
* ac_cv_member_struct_CuAt_name:         Cache Variables.    (line  333)
* ac_cv_member_struct_hostent_h_name:    Cache Variables.    (line  339)
* ac_cv_path_ASY:                        Cache Variables.    (line  342)
* ac_cv_path_DOT:                        Cache Variables.    (line  344)
* ac_cv_path_EGREP:                      Cache Variables.    (line  346)
* ac_cv_path_FGREP:                      Cache Variables.    (line  348)
* ac_cv_path_GIMP:                       Cache Variables.    (line  350)
* ac_cv_path_GPERF:                      Cache Variables.    (line  352)
* ac_cv_path_GREP:                       Cache Variables.    (line  354)
* ac_cv_path_GS:                         Cache Variables.    (line  356)
* ac_cv_path_HTMLTIDY:                   Cache Variables.    (line  358)
* ac_cv_path_JYTHONC:                    Cache Variables.    (line  360)
* ac_cv_path_LDD:                        Cache Variables.    (line  362)
* ac_cv_path_PERL:                       Cache Variables.    (line  364)
* ac_cv_path_PYTHON:                     Cache Variables.    (line  366)
* ac_cv_path_SED:                        Cache Variables.    (line  368)
* ac_cv_path_SWIG:                       Cache Variables.    (line  370)
* ac_cv_prog_AWK:                        Cache Variables.    (line  372)
* ac_cv_prog_CPP:                        Cache Variables.    (line  374)
* ac_cv_prog_EMACS:                      Cache Variables.    (line  376)
* ac_cv_prog_JAR:                        Cache Variables.    (line  378)
* ac_cv_prog_JAVAC:                      Cache Variables.    (line  380)
* ac_cv_prog_MAKE:                       Cache Variables.    (line  382)
* ac_cv_prog_MSGDIGEST:                  Cache Variables.    (line  384)
* ac_cv_prog_PKGCONFIG:                  Cache Variables.    (line  386)
* ac_cv_search_clock_gettime:            Cache Variables.    (line  388)
* ac_cv_search_kstat_data_lookup:        Cache Variables.    (line  392)
* ac_cv_search_nanosleep:                Cache Variables.    (line  396)
* ac_cv_sizeof_unsigned_long_long_long:  Cache Variables.    (line  405)
* ac_cv_sizeof_unsigned___int128:        Cache Variables.    (line  402)
* ac_cv_sizeof_u_int128_t:               Cache Variables.    (line  399)
* ac_cv_type_int64_t:                    Cache Variables.    (line  408)
* ac_cv_type_pid_t:                      Cache Variables.    (line  410)
* ac_cv_type_signal:                     Cache Variables.    (line  412)
* ac_cv_type_ssize_t:                    Cache Variables.    (line  414)
* ac_cv_type_uid_t:                      Cache Variables.    (line  416)
* ac_cv_type_uint128_t:                  Cache Variables.    (line  418)
* ac_cv_type_uint16_t:                   Cache Variables.    (line  421)
* ac_cv_type_uint32_t:                   Cache Variables.    (line  424)
* ac_cv_type_uint64_t:                   Cache Variables.    (line  427)
* ac_cv_type_uint8_t:                    Cache Variables.    (line  430)
* ac_cv_type_uintptr_t:                  Cache Variables.    (line  432)
* Add conditional (GUI menu item):       Menu bar.           (line   22)
* Add Row (GUI button):                  Command bar.        (line    9)
* add_expr:                              Formal grammar for arithmetic expressions.
                                                             (line   11)
* add_expr <1>:                          Formal grammar for arithmetic expressions.
                                                             (line   11)
* add_expr <2>:                          Formal grammar for arithmetic expressions.
                                                             (line   13)
* add_expr <3>:                          Formal grammar for arithmetic expressions.
                                                             (line   14)
* add_expr <4>:                          Formal grammar for arithmetic expressions.
                                                             (line   15)
* add_expr <5>:                          Formal grammar for arithmetic expressions.
                                                             (line   16)
* add_expr <6>:                          Formal grammar for arithmetic expressions.
                                                             (line   17)
* add_expr <7>:                          Summary of the grammar.
                                                             (line   12)
* add_expr <8>:                          Summary of the grammar.
                                                             (line   12)
* add_expr <9>:                          Summary of the grammar.
                                                             (line   14)
* add_expr <10>:                         Summary of the grammar.
                                                             (line   15)
* add_expr <11>:                         Summary of the grammar.
                                                             (line   16)
* add_expr <12>:                         Summary of the grammar.
                                                             (line   17)
* add_expr <13>:                         Summary of the grammar.
                                                             (line   18)
* Advanced (GUI menu):                   Menu bar.           (line   22)
* Advanced (GUI menu) <1>:               Menu bar.           (line   27)
* aggregate expressions:                 Aggregate expressions.
                                                             (line    6)
* aggregate functions:                   Aggregate functions.
                                                             (line    6)
* aggregate functions <1>:               Representing aggregate functions.
                                                             (line    6)
* AGGREGATES:                            Keywords.           (line   16)
* aggr_expr:                             Aggregate expressions.
                                                             (line    6)
* aggr_expr <1>:                         Aggregate expressions.
                                                             (line    9)
* aggr_expr <2>:                         Aggregate expressions.
                                                             (line   11)
* aggr_expr <3>:                         Writing to a log file.
                                                             (line   13)
* aggr_expr <4>:                         Writing to a log file.
                                                             (line   14)
* aggr_expr <5>:                         Writing to a log file.
                                                             (line   94)
* aggr_expr <6>:                         Summary of the grammar.
                                                             (line   53)
* aggr_expr <7>:                         Summary of the grammar.
                                                             (line  215)
* aggr_expr <8>:                         Summary of the grammar.
                                                             (line  216)
* aggr_func:                             Aggregate expressions.
                                                             (line   13)
* aggr_func <1>:                         Aggregate expressions.
                                                             (line   13)
* aggr_func <2>:                         Aggregate expressions.
                                                             (line   17)
* aggr_func <3>:                         Aggregate expressions.
                                                             (line   23)
* aggr_func <4>:                         Aggregate functions.
                                                             (line    6)
* aggr_func <5>:                         Aggregate functions.
                                                             (line    9)
* aggr_func <6>:                         Writing to a log file.
                                                             (line   49)
* aggr_func <7>:                         Writing to a log file.
                                                             (line   93)
* aggr_func <8>:                         Summary of the grammar.
                                                             (line   55)
* aggr_func <9>:                         Summary of the grammar.
                                                             (line   55)
* aggr_func <10>:                        Summary of the grammar.
                                                             (line   58)
* ALIGNED:                               Message specifications.
                                                             (line   13)
* ALIGNED <1>:                           Message specifications.
                                                             (line   34)
* ALIGNED <2>:                           Message specifications.
                                                             (line   54)
* ALIGNED <3>:                           Message specifications.
                                                             (line   65)
* ALIGNED <4>:                           Message alignment.  (line   19)
* ALIGNED <5>:                           Message alignment.  (line   28)
* ALIGNED <6>:                           Summary of the grammar.
                                                             (line  106)
* ALIGNED <7>:                           Summary of the grammar.
                                                             (line  120)
* ALIGNED <8>:                           Summary of the grammar.
                                                             (line  133)
* ALIGNED <9>:                           Summary of the grammar.
                                                             (line  144)
* ALIGNED <10>:                          Memory-allocation functions.
                                                             (line   10)
* ALIGNED <11>:                          Keywords.           (line   18)
* alignment, message:                    Message alignment.  (line    6)
* ALL:                                   Keywords.           (line   20)
* ALL MESSAGE BUFFERS:                   Priming message buffers.
                                                             (line   17)
* ALL MESSAGE BUFFERS <1>:               Summary of the grammar.
                                                             (line  290)
* ALL OTHER TASKS:                       Target tasks.       (line    8)
* ALL OTHER TASKS <1>:                   Target tasks.       (line   14)
* ALL OTHER TASKS <2>:                   Target tasks.       (line   16)
* ALL OTHER TASKS <3>:                   Summary of the grammar.
                                                             (line   96)
* ALL TASKS:                             Source tasks.       (line    8)
* ALL TASKS <1>:                         Source tasks.       (line    9)
* ALL TASKS <2>:                         Source tasks.       (line   15)
* ALL TASKS <3>:                         Source tasks.       (line   18)
* ALL TASKS <4>:                         Source tasks.       (line   32)
* ALL TASKS <5>:                         Target tasks.       (line   14)
* ALL TASKS <6>:                         Target tasks.       (line   16)
* ALL TASKS <7>:                         Summary of the grammar.
                                                             (line   89)
* ALL TASKS <8>:                         Summary of the grammar.
                                                             (line   90)
* ambiguous RECEIVE statements:          Receiving.          (line   34)
* AN:                                    Primitives.         (line   26)
* AN <1>:                                Message specifications.
                                                             (line   31)
* AN <2>:                                Item count.         (line    8)
* AN <3>:                                Item count.         (line   10)
* AN <4>:                                Simulating computation.
                                                             (line   17)
* AN <5>:                                Summary of the grammar.
                                                             (line  117)
* AN <6>:                                Summary of the grammar.
                                                             (line  153)
* AN <7>:                                Summary of the grammar.
                                                             (line  284)
* AN <8>:                                Keywords.           (line   22)
* AND:                                   Aggregate expressions.
                                                             (line   13)
* AND <1>:                               Writing to standard output.
                                                             (line   14)
* AND <2>:                               Writing to a log file.
                                                             (line   14)
* AND <3>:                               Writing to a log file.
                                                             (line   75)
* AND <4>:                               Complex statements. (line   28)
* AND <5>:                               Binding variables.  (line   20)
* AND <6>:                               Injecting arbitrary code.
                                                             (line   15)
* AND <7>:                               Summary of the grammar.
                                                             (line   55)
* AND <8>:                               Summary of the grammar.
                                                             (line  211)
* AND <9>:                               Summary of the grammar.
                                                             (line  216)
* AND <10>:                              Summary of the grammar.
                                                             (line  237)
* AND <11>:                              Summary of the grammar.
                                                             (line  301)
* AND <12>:                              Keywords.           (line   24)
* AND A SYNCHRONIZATION:                 Complex statements. (line   24)
* AND A SYNCHRONIZATION <1>:             Complex statements. (line   26)
* AND A SYNCHRONIZATION <2>:             Counted loops.      (line   26)
* AND A SYNCHRONIZATION <3>:             Timed loops.        (line   37)
* AND A SYNCHRONIZATION <4>:             Summary of the grammar.
                                                             (line  233)
* AND A SYNCHRONIZATION <5>:             Summary of the grammar.
                                                             (line  235)
* AND COMES FROM:                        Command-line arguments.
                                                             (line   11)
* AND COMES FROM <1>:                    Summary of the grammar.
                                                             (line  307)
* ANNOTATIONS:                           Further customizations.
                                                             (line   24)
* ARE:                                   Keywords.           (line   26)
* ARITHMETIC:                            Aggregate functions.
                                                             (line    9)
* ARITHMETIC <1>:                        Summary of the grammar.
                                                             (line   58)
* ARITHMETIC <2>:                        Keywords.           (line   28)
* arithmetic expressions:                Arithmetic expressions.
                                                             (line    6)
* ARITHMETIC MEAN:                       Aggregate functions.
                                                             (line   13)
* AS:                                    Message specifications.
                                                             (line   31)
* AS <1>:                                Message specifications.
                                                             (line   63)
* AS <2>:                                Writing to a log file.
                                                             (line   13)
* AS <3>:                                Writing to a log file.
                                                             (line   14)
* AS <4>:                                Summary of the grammar.
                                                             (line  117)
* AS <5>:                                Summary of the grammar.
                                                             (line  142)
* AS <6>:                                Summary of the grammar.
                                                             (line  215)
* AS <7>:                                Summary of the grammar.
                                                             (line  216)
* AS <8>:                                Keywords.           (line   30)
* ASSERT:                                Keywords.           (line   32)
* ASSERT THAT:                           Asserting conditions.
                                                             (line   10)
* ASSERT THAT <1>:                       Summary of the grammar.
                                                             (line  272)
* assert_stmt:                           Complex statements. (line   43)
* assert_stmt <1>:                       Asserting conditions.
                                                             (line   10)
* assert_stmt <2>:                       Asserting conditions.
                                                             (line   19)
* assert_stmt <3>:                       Summary of the grammar.
                                                             (line  252)
* assert_stmt <4>:                       Summary of the grammar.
                                                             (line  272)
* ASSIGNED:                              Keywords.           (line   34)
* assigning values to variables:         Binding variables.  (line    6)
* AST:                                   Backend creation.   (line   36)
* AST (abstract-syntax tree):            The dot_ast backend.
                                                             (line  128)
* AST (abstract-syntax tree) <1>:        The dot_ast backend.
                                                             (line  148)
* AST (abstract-syntax tree) <2>:        The dot_ast backend.
                                                             (line  169)
* AST (abstract-syntax tree) <3>:        The dot_ast backend.
                                                             (line  217)
* AST (abstract-syntax tree) <4>:        The dot_ast backend.
                                                             (line  223)
* AST (abstract-syntax tree) <5>:        The dot_ast backend.
                                                             (line  228)
* AST (abstract-syntax tree) <6>:        The libsea_ast backend.
                                                             (line    9)
* AST (abstract-syntax tree) <7>:        Backend creation.   (line    7)
* AST (abstract-syntax tree) <8>:        Backend creation.   (line   31)
* AST (abstract-syntax tree) <9>:        Backend creation.   (line   35)
* AST (abstract-syntax tree) <10>:       Internals.          (line   37)
* AST (abstract-syntax tree) <11>:       Method calls.       (line    7)
* asy:                                   Cache Variables.    (line  342)
* ASYNCHRONOUSLY:                        The interpret backend.
                                                             (line  155)
* ASYNCHRONOUSLY <1>:                    Message specifications.
                                                             (line   30)
* ASYNCHRONOUSLY <2>:                    Blocking semantics. (line    9)
* ASYNCHRONOUSLY <3>:                    Sending.            (line   11)
* ASYNCHRONOUSLY <4>:                    Sending.            (line   15)
* ASYNCHRONOUSLY <5>:                    Receiving.          (line   14)
* ASYNCHRONOUSLY <6>:                    Receiving.          (line   54)
* ASYNCHRONOUSLY <7>:                    Multicasting.       (line   15)
* ASYNCHRONOUSLY <8>:                    Summary of the grammar.
                                                             (line  116)
* ASYNCHRONOUSLY <9>:                    Summary of the grammar.
                                                             (line  169)
* ASYNCHRONOUSLY <10>:                   Summary of the grammar.
                                                             (line  173)
* ASYNCHRONOUSLY <11>:                   Summary of the grammar.
                                                             (line  180)
* ASYNCHRONOUSLY <12>:                   Summary of the grammar.
                                                             (line  188)
* ASYNCHRONOUSLY <13>:                   Keywords.           (line   36)
* ASYNCHRONOUSLY <14>:                   Predeclared variables.
                                                             (line   36)
* ASYNCHRONOUSLY <15>:                   Predeclared variables.
                                                             (line   37)
* ASYNCHRONOUSLY <16>:                   Predeclared variables.
                                                             (line   40)
* Autoconf:                              Installation.       (line    6)
* autoconf:                              make.               (line   52)
* Autoconf <1>:                          make.               (line   46)
* autoconf <1>:                          Build process.      (line   19)
* autoconf <2>:                          Building on problematic platforms.
                                                             (line   13)
* Autoconf <2>:                          Build process.      (line    6)
* Autoconf <3>:                          Interpreting configure warnings.
                                                             (line   14)
* Autoconf <4>:                          Manual configuration.
                                                             (line   29)
* Autoconf <5>:                          Cache Variables.    (line    7)
* autoheader:                            make.               (line   52)
* autoheader <1>:                        Build process.      (line   19)
* Automake:                              Installation.       (line    6)
* automake:                              make.               (line   52)
* Automake <1>:                          make.               (line   46)
* automake <1>:                          Build process.      (line   19)
* automake <2>:                          Building on problematic platforms.
                                                             (line   12)
* Automake <2>:                          Build process.      (line    6)
* Automake <3>:                          Building on problematic platforms.
                                                             (line    9)
* AWAIT:                                 Keywords.           (line   38)
* AWAIT COMPLETION:                      Components.         (line   42)
* AWAIT COMPLETION <1>:                  Awaiting completion.
                                                             (line   20)
* AWAITS:                                Keywords.           (line   40)
* AWAITS COMPLETION:                     The interpret backend.
                                                             (line  156)
* AWAITS COMPLETION <1>:                 Awaiting completion.
                                                             (line   13)
* AWAITS COMPLETION <2>:                 Priming message buffers.
                                                             (line   49)
* AWAITS COMPLETION <3>:                 Summary of the grammar.
                                                             (line  185)
* AWAITS COMPLETION <4>:                 Predeclared variables.
                                                             (line   42)
* awk:                                   The c_profile backend.
                                                             (line   71)
* awk <1>:                               The stats backend.  (line  140)
* awk <2>:                               Cache Variables.    (line  372)
* ax_cv_const_nics_valid:                Cache Variables.    (line  435)
* ax_cv_decl_double_smallest:            Cache Variables.    (line  438)
* ax_cv_decl_suffix_valid:               Cache Variables.    (line  441)
* ax_cv_file_cray_xc_cname:              Cache Variables.    (line  444)
* ax_cv_file_cray_xt_nid:                Cache Variables.    (line  446)
* ax_cv_func_mpicc_requires_libm:        Cache Variables.    (line  448)
* ax_cv_func_round_works:                Cache Variables.    (line  451)
* ax_cv_prog_cc_ansic:                   Cache Variables.    (line  453)
* ax_cv_prog_eval_break_works:           Cache Variables.    (line  455)
* ax_cv_prog_gperf_recent:               Cache Variables.    (line  458)
* ax_cv_prog_jar_e:                      Cache Variables.    (line  460)
* ax_cv_prog_ld_interp:                  Cache Variables.    (line  462)
* ax_cv_prog_ld_so:                      Cache Variables.    (line  464)
* ax_cv_prog_make_RM:                    Cache Variables.    (line  466)
* ax_cv_prog_make_RM_qeq:                Cache Variables.    (line  468)
* ax_cv_prog_perl_logextract:            Cache Variables.    (line  470)
* ax_cv_prog_swig_version:               Cache Variables.    (line  472)
* ax_cv_prog_swig_works:                 Cache Variables.    (line  474)
* ax_cv_sys_null_device:                 Cache Variables.    (line  476)
* ax_cv_type_long_big_enough:            Cache Variables.    (line  481)
* ax_cv_type_MT_STATE_size:              Cache Variables.    (line  478)
* ax_cv_type_ncptl_int_max:              Cache Variables.    (line  484)
* ax_cv_type_ncptl_int_min:              Cache Variables.    (line  487)
* ax_cv_var__my_pnid:                    Cache Variables.    (line  492)
* ax_cv_var___cpu_mhz:                   Cache Variables.    (line  490)
* BACKEND:                               Keywords.           (line   42)
* backend creation:                      Backend creation.   (line    6)
* BACKEND DECLARES:                      Injecting arbitrary code.
                                                             (line   48)
* BACKEND DECLARES <1>:                  Backend-specific declarations.
                                                             (line    8)
* BACKEND DECLARES <2>:                  Backend-specific declarations.
                                                             (line   14)
* BACKEND DECLARES <3>:                  Backend-specific declarations.
                                                             (line   15)
* BACKEND DECLARES <4>:                  Backend-specific declarations.
                                                             (line   19)
* BACKEND DECLARES <5>:                  Backend-specific declarations.
                                                             (line   67)
* BACKEND DECLARES <6>:                  Calling MPI functions.
                                                             (line   12)
* BACKEND EXECUTE:                       Injecting arbitrary code.
                                                             (line   24)
* BACKEND EXECUTE <1>:                   Calling MPI functions.
                                                             (line   58)
* BACKEND EXECUTES:                      Evaluation contexts.
                                                             (line   18)
* BACKEND EXECUTES <1>:                  Injecting arbitrary code.
                                                             (line   13)
* BACKEND EXECUTES <2>:                  Injecting arbitrary code.
                                                             (line   37)
* BACKEND EXECUTES <3>:                  Injecting arbitrary code.
                                                             (line   45)
* BACKEND EXECUTES <4>:                  Injecting arbitrary code.
                                                             (line   49)
* BACKEND EXECUTES <5>:                  Backend-specific declarations.
                                                             (line    6)
* BACKEND EXECUTES <6>:                  Backend-specific declarations.
                                                             (line   14)
* BACKEND EXECUTES <7>:                  Backend-specific declarations.
                                                             (line   16)
* BACKEND EXECUTES <8>:                  Backend-specific declarations.
                                                             (line   67)
* BACKEND EXECUTES <9>:                  Summary of the grammar.
                                                             (line  299)
* BACKEND EXECUTES <10>:                 Calling MPI functions.
                                                             (line   12)
* BACKEND EXECUTES <11>:                 Calling MPI functions.
                                                             (line   21)
* BACKEND EXECUTES <12>:                 Generated code.     (line   30)
* backends, supplied:                    Supplied backends.  (line    6)
* backend_decl:                          Backend-specific declarations.
                                                             (line   12)
* backend_decl <1>:                      Complete programs.  (line   12)
* backend_decl <2>:                      Summary of the grammar.
                                                             (line  310)
* backend_decl <3>:                      Summary of the grammar.
                                                             (line  312)
* backend_desc:                          A minimal C-based backend.
                                                             (line   11)
* backend_name:                          A minimal C-based backend.
                                                             (line   10)
* backend_stmt:                          Complex statements. (line   48)
* backend_stmt <1>:                      Injecting arbitrary code.
                                                             (line   12)
* backend_stmt <2>:                      Injecting arbitrary code.
                                                             (line   25)
* backend_stmt <3>:                      Injecting arbitrary code.
                                                             (line   27)
* backend_stmt <4>:                      Injecting arbitrary code.
                                                             (line   28)
* backend_stmt <5>:                      Summary of the grammar.
                                                             (line  257)
* backend_stmt <6>:                      Summary of the grammar.
                                                             (line  298)
* backquoted commands:                   Running coNCePTuaL programs.
                                                             (line  106)
* backslash:                             Primitives.         (line   42)
* base_global_parameters:                Internals.          (line  103)
* bash:                                  Running coNCePTuaL programs.
                                                             (line  111)
* bash <1>:                              configure is slow.  (line   20)
* bash <2>:                              configure is slow.  (line   22)
* BE:                                    Binding variables.  (line   26)
* BE <1>:                                Binding variables.  (line   38)
* BE <2>:                                Summary of the grammar.
                                                             (line  259)
* BE <3>:                                Keywords.           (line   44)
* bglpersonality.h:                      Cache Variables.    (line  174)
* binding variables:                     Binding variables.  (line    6)
* BIT:                                   Item size.          (line   18)
* BIT <1>:                               Item size.          (line   21)
* BIT <2>:                               Summary of the grammar.
                                                             (line  159)
* BIT <3>:                               Keywords.           (line   46)
* BITS:                                  Built-in functions. (line   15)
* BITS <1>:                              Integer functions.  (line    9)
* BITS <2>:                              Summary of the grammar.
                                                             (line   43)
* BITS <3>:                              Keywords.           (line   48)
* bit_errors:                            Storing counter values.
                                                             (line   14)
* bit_errors <1>:                        Restoring counter values.
                                                             (line   14)
* bit_errors <2>:                        Predeclared variables.
                                                             (line    9)
* blocking:                              Blocking semantics. (line    6)
* bounding box:                          The latex_vis backend.
                                                             (line   21)
* bounding box <1>:                      The latex_vis backend.
                                                             (line  175)
* bounding box <2>:                      Bad bounding boxes from latex_vis.
                                                             (line    6)
* bounding box <3>:                      Bad bounding boxes from latex_vis.
                                                             (line   17)
* Bourne shell:                          configure.          (line    6)
* Bourne shell <1>:                      Checking maximum line length is slow.
                                                             (line   12)
* Bourne shell <2>:                      configure is slow.  (line   17)
* Bourne shell <3>:                      configure is slow.  (line   18)
* Bourne shell <4>:                      configure is slow.  (line   21)
* Bourne shell <5>:                      configure is slow.  (line   22)
* breakpoints:                           c_trace tracing with curses.
                                                             (line   18)
* breakpoints <1>:                       c_trace tracing with curses.
                                                             (line   66)
* breakpoints <2>:                       c_trace tracing with curses.
                                                             (line   75)
* breakpoints <3>:                       Offline tracing with curses.
                                                             (line   34)
* BUFFER:                                Message specifications.
                                                             (line   21)
* BUFFER <1>:                            Message specifications.
                                                             (line   42)
* BUFFER <2>:                            Message specifications.
                                                             (line   61)
* BUFFER <3>:                            Message specifications.
                                                             (line   72)
* BUFFER <4>:                            Summary of the grammar.
                                                             (line  114)
* BUFFER <5>:                            Summary of the grammar.
                                                             (line  128)
* BUFFER <6>:                            Summary of the grammar.
                                                             (line  140)
* BUFFER <7>:                            Summary of the grammar.
                                                             (line  151)
* BUFFER <8>:                            Keywords.           (line   50)
* BUFFERS:                               Keywords.           (line   52)
* buffers, message:                      Buffer control.     (line    6)
* buffers, message <1>:                  Priming message buffers.
                                                             (line    6)
* buffers, message <2>:                  Message-buffer manipulation functions.
                                                             (line    6)
* build directory:                       Running without installing.
                                                             (line   14)
* build directory <1>:                   Running without installing.
                                                             (line   19)
* build directory <2>:                   Running without installing.
                                                             (line   20)
* building:                              Build process.      (line    6)
* building <1>:                          Building on problematic platforms.
                                                             (line    6)
* built-in functions:                    Built-in functions. (line    6)
* BUT:                                   Keywords.           (line   54)
* BUT NOT:                               Binding variables.  (line   34)
* BUT NOT <1>:                           Binding variables.  (line   35)
* BUT NOT <2>:                           Binding variables.  (line   36)
* BUT NOT <3>:                           Summary of the grammar.
                                                             (line  264)
* BUT NOT <4>:                           Summary of the grammar.
                                                             (line  265)
* BUT NOT <5>:                           Summary of the grammar.
                                                             (line  266)
* buttons, GUI:                          Command bar.        (line    9)
* buttons, GUI <1>:                      Command bar.        (line   12)
* buttons, GUI <2>:                      Command bar.        (line   15)
* buttons, GUI <3>:                      Command bar.        (line   18)
* buttons, GUI <4>:                      Command bar.        (line   21)
* buttons, GUI <5>:                      Command bar.        (line   24)
* buttons, GUI <6>:                      Command bar.        (line   29)
* buttons, GUI <7>:                      Command bar.        (line   34)
* buttons, GUI <8>:                      Command bar.        (line   38)
* buttons, GUI <9>:                      Command bar.        (line   42)
* buttons, GUI <10>:                     Command bar.        (line   47)
* buttons, GUI <11>:                     Command bar.        (line   53)
* BYTE:                                  Item size.          (line   18)
* BYTE <1>:                              Item size.          (line   23)
* BYTE <2>:                              Item size.          (line   48)
* BYTE <3>:                              Item size.          (line   51)
* BYTE <4>:                              Summary of the grammar.
                                                             (line  159)
* BYTE <5>:                              Summary of the grammar.
                                                             (line  162)
* BYTE <6>:                              Keywords.           (line   56)
* BYTES:                                 Keywords.           (line   58)
* bytes_received:                        Predeclared variables.
                                                             (line   11)
* bytes_received <1>:                    Predeclared variables.
                                                             (line   45)
* bytes_sent:                            Predeclared variables.
                                                             (line   13)
* bytes_sent <1>:                        Predeclared variables.
                                                             (line   39)
* C code:                                Injecting arbitrary code.
                                                             (line    6)
* C code <1>:                            Backend-specific declarations.
                                                             (line    6)
* C preprocessor:                        configure.          (line  120)
* C preprocessor <1>:                    configure.          (line  133)
* C preprocessor <2>:                    Variables and data types.
                                                             (line   30)
* C preprocessor <3>:                    Compaq compilers on Alpha CPUs.
                                                             (line   25)
* C preprocessor <4>:                    undefined type found DEFINE____.
                                                             (line   13)
* C preprocessor <5>:                    undefined type found DEFINE____.
                                                             (line   18)
* C preprocessor <6>:                    undefined type found DEFINE____.
                                                             (line   20)
* C preprocessor <7>:                    "makehelper.py config" fails.
                                                             (line   11)
* C preprocessor <8>:                    "makehelper.py config" fails.
                                                             (line   14)
* cache:                                 Manual configuration.
                                                             (line   31)
* cache <1>:                             Manual configuration.
                                                             (line   37)
* cache variables:                       Manual configuration.
                                                             (line   29)
* cache variables <1>:                   Manual configuration.
                                                             (line   34)
* cache variables <2>:                   Cache Variables.    (line    6)
* can't link against the output of gcc:  Problems with ``C compiler used for Python extension modules''.
                                                             (line    6)
* case sensitivity:                      Primitives.         (line   38)
* case sensitivity <1>:                  Primitives.         (line   42)
* Catamount:                             Cross-compilation.  (line   14)
* CBRT:                                  Built-in functions. (line   15)
* CBRT <1>:                              Integer functions.  (line   17)
* CBRT <2>:                              Floating-point functions.
                                                             (line   10)
* CBRT <3>:                              Summary of the grammar.
                                                             (line   43)
* cbrt:                                  Cache Variables.    (line   27)
* CBRT <4>:                              Keywords.           (line   60)
* CC:                                    configure.          (line  109)
* CC <1>:                                configure.          (line  110)
* cc:                                    Installation.       (line   19)
* CC <2>:                                configure.          (line  120)
* CC <3>:                                configure.          (line  133)
* cc <1>:                                Installation.       (line   50)
* cc <2>:                                Installation.       (line   54)
* CC <4>:                                The c_mpi backend.  (line   26)
* cc <3>:                                Installation.       (line   58)
* cc <4>:                                Installation.       (line   64)
* CC <5>:                                The c_udgram backend.
                                                             (line   24)
* cc <5>:                                Compaq compilers on Alpha CPUs.
                                                             (line   22)
* ccc:                                   Installation.       (line   62)
* ccc <1>:                               Compaq compilers on Alpha CPUs.
                                                             (line   36)
* ccc <2>:                               Compaq compilers on Alpha CPUs.
                                                             (line   47)
* CEILING:                               Built-in functions. (line   16)
* CEILING <1>:                           Floating-point functions.
                                                             (line   17)
* CEILING <2>:                           Floating-point functions.
                                                             (line   23)
* CEILING <3>:                           Floating-point functions.
                                                             (line   34)
* CEILING <4>:                           Summary of the grammar.
                                                             (line   44)
* CEILING <5>:                           Keywords.           (line   62)
* cf.h:                                  Cache Variables.    (line  177)
* CFLAGS:                                configure.          (line  117)
* CFLAGS <1>:                            The c_mpi backend.  (line   27)
* clang:                                 Installation.       (line   30)
* clock, incorrect readings:             Invalid timing measurements.
                                                             (line    6)
* clock_gettime:                         Time-related functions.
                                                             (line   73)
* clock_gettime <1>:                     Time-related functions.
                                                             (line   76)
* clock_gettime <2>:                     Time-related functions.
                                                             (line   80)
* clock_gettime <3>:                     Cache Variables.    (line  389)
* CLOCK_REALTIME:                        Time-related functions.
                                                             (line   78)
* CLOCK_REALTIME <1>:                    Time-related functions.
                                                             (line   80)
* CLOCK_SGI_CYCLE:                       Time-related functions.
                                                             (line   74)
* CLOCK_SGI_CYCLE <1>:                   Time-related functions.
                                                             (line   77)
* CLOCK_SGI_CYCLE <2>:                   Time-related functions.
                                                             (line   77)
* code examples:                         Examples.           (line    6)
* code, generated:                       Generated code.     (line    6)
* code, injecting arbitrary:             Injecting arbitrary code.
                                                             (line    6)
* code, injecting arbitrary <1>:         Backend-specific declarations.
                                                             (line    6)
* codegen_c_generic.py:                  Supplied backends.  (line   75)
* codegen_c_generic.py <1>:              Supplied backends.  (line   81)
* codegen_c_generic.py <2>:              Supplied backends.  (line   82)
* codegen_c_generic.py <3>:              Supplied backends.  (line   85)
* codegen_c_generic.py <4>:              Command-line options for c_trace.
                                                             (line   16)
* codegen_c_generic.py <5>:              The c_profile backend.
                                                             (line   17)
* codegen_c_generic.py <6>:              Backend creation.   (line   13)
* codegen_c_generic.py <7>:              Backend creation.   (line   87)
* codegen_c_generic.py <8>:              Hook methods.       (line    8)
* codegen_c_generic.py <9>:              Hook methods.       (line   13)
* codegen_c_generic.py <10>:             Hook methods.       (line   17)
* codegen_c_generic.py <11>:             Hook methods.       (line   27)
* codegen_c_generic.py <12>:             Hook methods.       (line   34)
* codegen_c_generic.py <13>:             Hook methods.       (line   35)
* codegen_c_generic.py <14>:             Hook methods.       (line   72)
* codegen_c_generic.py <15>:             Hook methods.       (line   98)
* codegen_c_generic.py <16>:             Hook methods.       (line  100)
* codegen_c_generic.py <17>:             A minimal C-based backend.
                                                             (line    6)
* codegen_c_generic.py <18>:             A minimal C-based backend.
                                                             (line   64)
* codegen_c_generic.py <19>:             A minimal C-based backend.
                                                             (line   70)
* codegen_c_generic.py <20>:             Generated code.     (line    6)
* codegen_c_generic.py <21>:             Generated code.     (line   28)
* codegen_c_generic.py <22>:             Internals.          (line    6)
* codegen_c_generic.py <23>:             Internals.          (line   34)
* codegen_c_generic.py <24>:             Internals.          (line   67)
* codegen_c_generic.py <25>:             Internals.          (line  111)
* codegen_c_generic.py <26>:             Variables and data types.
                                                             (line   24)
* codegen_c_generic.py <27>:             Log-file functions. (line  136)
* codegen_c_generic.py <28>:             Memory efficiency.  (line    6)
* codegen_c_generic.py <29>:             C hooks.            (line    7)
* codegen_c_generic.py <30>:             C hooks.            (line   17)
* codegen_c_generic.py <31>:             Event types.        (line    6)
* codegen_c_mpi.py:                      Compiling coNCePTuaL programs.
                                                             (line   31)
* codegen_c_mpi.py <1>:                  Supplied backends.  (line   13)
* codegen_c_mpi.py <2>:                  Supplied backends.  (line   74)
* codegen_c_mpi.py <3>:                  Supplied backends.  (line   77)
* codegen_c_mpi.py <4>:                  The c_mpi backend.  (line    6)
* codegen_c_mpi.py <5>:                  The c_mpi backend.  (line   11)
* codegen_c_mpi.py <6>:                  The c_mpi backend.  (line   15)
* codegen_c_mpi.py <7>:                  The c_mpi backend.  (line   17)
* codegen_c_mpi.py <8>:                  The c_mpi backend.  (line   20)
* codegen_c_mpi.py <9>:                  The c_mpi backend.  (line   24)
* codegen_c_mpi.py <10>:                 The c_mpi backend.  (line   32)
* codegen_c_mpi.py <11>:                 The c_mpi backend.  (line   43)
* codegen_c_mpi.py <12>:                 Command-line options for c_mpi.
                                                             (line    6)
* codegen_c_mpi.py <13>:                 Command-line options for c_mpi.
                                                             (line   13)
* codegen_c_mpi.py <14>:                 Command-line options for c_mpi.
                                                             (line   15)
* codegen_c_mpi.py <15>:                 Command-line options for c_mpi.
                                                             (line   26)
* codegen_c_mpi.py <16>:                 Implementation of reductions.
                                                             (line    6)
* codegen_c_mpi.py <17>:                 Implementation of reductions.
                                                             (line   16)
* codegen_c_mpi.py <18>:                 Implementation of multicasts.
                                                             (line    7)
* codegen_c_mpi.py <19>:                 Implementation of multicasts.
                                                             (line   10)
* codegen_c_mpi.py <20>:                 The picl backend.   (line   13)
* codegen_c_mpi.py <21>:                 The paraver backend.
                                                             (line   11)
* codegen_c_mpi.py <22>:                 Tag matching.       (line   64)
* codegen_c_mpi.py <23>:                 Tag matching.       (line   76)
* codegen_c_mpi.py <24>:                 Backend-specific declarations.
                                                             (line   42)
* codegen_c_mpi.py <25>:                 Calling MPI functions.
                                                             (line   25)
* codegen_c_mpi.py <26>:                 Building on problematic platforms.
                                                             (line   27)
* codegen_c_profile.py:                  Supplied backends.  (line   27)
* codegen_c_profile.py <1>:              Supplied backends.  (line   77)
* codegen_c_profile.py <2>:              The c_profile backend.
                                                             (line   11)
* codegen_c_profile.py <3>:              The c_profile backend.
                                                             (line   12)
* codegen_c_profile.py <4>:              The c_profile backend.
                                                             (line   18)
* codegen_c_seq.py:                      Supplied backends.  (line   10)
* codegen_c_seq.py <1>:                  Supplied backends.  (line   78)
* codegen_c_seq.py <2>:                  The c_seq backend.  (line    6)
* codegen_c_seq.py <3>:                  The c_udgram backend.
                                                             (line    8)
* codegen_c_seq.py <4>:                  A minimal C-based backend.
                                                             (line   25)
* codegen_c_seq.py <5>:                  A minimal C-based backend.
                                                             (line   58)
* codegen_c_seq.py <6>:                  A minimal C-based backend.
                                                             (line   68)
* codegen_c_trace.py:                    Compiling coNCePTuaL programs.
                                                             (line   34)
* codegen_c_trace.py <1>:                Supplied backends.  (line   21)
* codegen_c_trace.py <2>:                Supplied backends.  (line   76)
* codegen_c_trace.py <3>:                Supplied backends.  (line   79)
* codegen_c_trace.py <4>:                The c_trace backend.
                                                             (line    6)
* codegen_c_trace.py <5>:                The c_trace backend.
                                                             (line    8)
* codegen_c_trace.py <6>:                Command-line options for c_trace.
                                                             (line    6)
* codegen_c_trace.py <7>:                Command-line options for c_trace.
                                                             (line   10)
* codegen_c_trace.py <8>:                Command-line options for c_trace.
                                                             (line   12)
* codegen_c_trace.py <9>:                Command-line options for c_trace.
                                                             (line   12)
* codegen_c_trace.py <10>:               Command-line options for c_trace.
                                                             (line   17)
* codegen_c_trace.py <11>:               Default c_trace tracing.
                                                             (line    6)
* codegen_c_trace.py <12>:               c_trace tracing with curses.
                                                             (line   52)
* codegen_c_trace.py <13>:               Offline tracing with curses.
                                                             (line    6)
* codegen_c_trace.py <14>:               Offline tracing with curses.
                                                             (line   19)
* codegen_c_trace.py <15>:               Offline tracing with curses.
                                                             (line   44)
* codegen_c_trace.py <16>:               The c_profile backend.
                                                             (line   11)
* codegen_c_trace.py <17>:               Using out-of-bound task IDs to simplify code.
                                                             (line   64)
* codegen_c_trace.py <18>:               Using out-of-bound task IDs to simplify code.
                                                             (line   87)
* codegen_c_udgram.py:                   Compiling coNCePTuaL programs.
                                                             (line   95)
* codegen_c_udgram.py <1>:               Supplied backends.  (line   17)
* codegen_c_udgram.py <2>:               Supplied backends.  (line   78)
* codegen_c_udgram.py <3>:               The c_udgram backend.
                                                             (line    6)
* codegen_c_udgram.py <4>:               The c_udgram backend.
                                                             (line    7)
* codegen_c_udgram.py <5>:               The c_udgram backend.
                                                             (line   11)
* codegen_c_udgram.py <6>:               The c_udgram backend.
                                                             (line   15)
* codegen_c_udgram.py <7>:               The c_udgram backend.
                                                             (line   19)
* codegen_c_udgram.py <8>:               The c_udgram backend.
                                                             (line   23)
* codegen_c_udgram.py <9>:               The c_udgram backend.
                                                             (line   24)
* codegen_c_udgram.py <10>:              The c_udgram backend.
                                                             (line   31)
* codegen_c_udgram.py <11>:              The c_udgram backend.
                                                             (line   36)
* codegen_c_udgram.py <12>:              Implementation of collectives.
                                                             (line    6)
* codegen_c_udgram.py <13>:              The interpret backend.
                                                             (line    6)
* codegen_c_udgram.py <14>:              Backend-specific declarations.
                                                             (line   43)
* codegen_c_udgram.py <15>:              A minimal C-based backend.
                                                             (line   83)
* codegen_c_udgram.py <16>:              A minimal C-based backend.
                                                             (line   84)
* codegen_c_udgram.py <17>:              Internals.          (line   69)
* codegen_c_udgram.py <18>:              Environment Variables.
                                                             (line   12)
* codegen_dot_ast.py:                    Supplied backends.  (line   54)
* codegen_dot_ast.py <1>:                The dot_ast backend.
                                                             (line    9)
* codegen_dot_ast.py <2>:                The dot_ast backend.
                                                             (line   11)
* codegen_dot_ast.py <3>:                The dot_ast backend.
                                                             (line  126)
* codegen_dot_ast.py <4>:                The dot_ast backend.
                                                             (line  132)
* codegen_dot_ast.py <5>:                The dot_ast backend.
                                                             (line  137)
* codegen_dot_ast.py <6>:                The dot_ast backend.
                                                             (line  149)
* codegen_dot_ast.py <7>:                The dot_ast backend.
                                                             (line  160)
* codegen_dot_ast.py <8>:                The dot_ast backend.
                                                             (line  245)
* codegen_dot_ast.py <9>:                The dot_ast backend.
                                                             (line  165)
* codegen_dot_ast.py <10>:               The dot_ast backend.
                                                             (line  224)
* codegen_dot_ast.py <11>:               The dot_ast backend.
                                                             (line  225)
* codegen_dot_ast.py <12>:               The dot_ast backend.
                                                             (line  232)
* codegen_dot_ast.py <13>:               The dot_ast backend.
                                                             (line  233)
* codegen_dot_ast.py <14>:               The dot_ast backend.
                                                             (line  235)
* codegen_dot_ast.py <15>:               The libsea_ast backend.
                                                             (line    6)
* codegen_dot_ast.py <16>:               The libsea_ast backend.
                                                             (line   16)
* codegen_dot_ast.py <17>:               The libsea_ast backend.
                                                             (line   17)
* codegen_dot_ast.py <18>:               Primitives.         (line   96)
* codegen_dot_ast.py <19>:               Backend creation.   (line   55)
* codegen_interpret.py:                  Supplied backends.  (line   32)
* codegen_interpret.py <1>:              The interpret backend.
                                                             (line    6)
* codegen_interpret.py <2>:              The interpret backend.
                                                             (line    8)
* codegen_interpret.py <3>:              The interpret backend.
                                                             (line    9)
* codegen_interpret.py <4>:              The interpret backend.
                                                             (line   10)
* codegen_interpret.py <5>:              The interpret backend.
                                                             (line   14)
* codegen_interpret.py <6>:              The interpret backend.
                                                             (line   19)
* codegen_interpret.py <7>:              The interpret backend.
                                                             (line   22)
* codegen_interpret.py <8>:              The interpret backend.
                                                             (line   28)
* codegen_interpret.py <9>:              The interpret backend.
                                                             (line   30)
* codegen_interpret.py <10>:             The interpret backend.
                                                             (line   31)
* codegen_interpret.py <11>:             The interpret backend.
                                                             (line   35)
* codegen_interpret.py <12>:             The interpret backend.
                                                             (line   48)
* codegen_interpret.py <13>:             The interpret backend.
                                                             (line   65)
* codegen_interpret.py <14>:             The interpret backend.
                                                             (line   81)
* codegen_interpret.py <15>:             The interpret backend.
                                                             (line   82)
* codegen_interpret.py <16>:             The interpret backend.
                                                             (line  104)
* codegen_interpret.py <17>:             The interpret backend.
                                                             (line  117)
* codegen_interpret.py <18>:             The interpret backend.
                                                             (line  135)
* codegen_interpret.py <19>:             The interpret backend.
                                                             (line  168)
* codegen_interpret.py <20>:             Task latency hierarchies.
                                                             (line    6)
* codegen_interpret.py <21>:             Task latency hierarchies.
                                                             (line   38)
* codegen_interpret.py <22>:             The stats backend.  (line   94)
* codegen_interpret.py <23>:             The stats backend.  (line   95)
* codegen_interpret.py <24>:             The picl backend.   (line   53)
* codegen_interpret.py <25>:             The picl backend.   (line   54)
* codegen_interpret.py <26>:             The paraver backend.
                                                             (line   54)
* codegen_interpret.py <27>:             The paraver backend.
                                                             (line   55)
* codegen_interpret.py <28>:             The latex_vis backend.
                                                             (line   59)
* codegen_interpret.py <29>:             The latex_vis backend.
                                                             (line   60)
* codegen_interpret.py <30>:             The latex_vis backend.
                                                             (line   63)
* codegen_interpret.py <31>:             Restoring counter values.
                                                             (line   68)
* codegen_interpret.py <32>:             Backend-specific declarations.
                                                             (line   44)
* codegen_LANGUAGE_LIBRARY.py:           Compiler.           (line   15)
* codegen_LANGUAGE_LIBRARY.py <1>:       Backend creation.   (line   10)
* codegen_latex_vis.py:                  Compiling coNCePTuaL programs.
                                                             (line   96)
* codegen_latex_vis.py <1>:              Supplied backends.  (line   50)
* codegen_latex_vis.py <2>:              The latex_vis backend.
                                                             (line    6)
* codegen_latex_vis.py <3>:              The latex_vis backend.
                                                             (line   11)
* codegen_latex_vis.py <4>:              The latex_vis backend.
                                                             (line   19)
* codegen_latex_vis.py <5>:              The latex_vis backend.
                                                             (line  173)
* codegen_latex_vis.py <6>:              The latex_vis backend.
                                                             (line   22)
* codegen_latex_vis.py <7>:              The latex_vis backend.
                                                             (line   27)
* codegen_latex_vis.py <8>:              The latex_vis backend.
                                                             (line   48)
* codegen_latex_vis.py <9>:              The latex_vis backend.
                                                             (line   50)
* codegen_latex_vis.py <10>:             The latex_vis backend.
                                                             (line   59)
* codegen_latex_vis.py <11>:             The latex_vis backend.
                                                             (line   65)
* codegen_latex_vis.py <12>:             The latex_vis backend.
                                                             (line   67)
* codegen_latex_vis.py <13>:             The latex_vis backend.
                                                             (line  180)
* codegen_latex_vis.py <14>:             The latex_vis backend.
                                                             (line  107)
* codegen_latex_vis.py <15>:             The latex_vis backend.
                                                             (line  119)
* codegen_latex_vis.py <16>:             The latex_vis backend.
                                                             (line  126)
* codegen_latex_vis.py <17>:             The latex_vis backend.
                                                             (line  138)
* codegen_latex_vis.py <18>:             Further customizations.
                                                             (line   16)
* codegen_latex_vis.py <19>:             Further customizations.
                                                             (line   20)
* codegen_latex_vis.py <20>:             Further customizations.
                                                             (line   27)
* codegen_latex_vis.py <21>:             Further customizations.
                                                             (line   67)
* codegen_latex_vis.py <22>:             Further customizations.
                                                             (line   68)
* codegen_latex_vis.py <23>:             Backend-specific declarations.
                                                             (line   44)
* codegen_latex_vis.py <24>:             ``TeX capacity exceeded''.
                                                             (line    7)
* codegen_latex_vis.py <25>:             ``TeX capacity exceeded''.
                                                             (line   23)
* codegen_latex_vis.py <26>:             ``TeX capacity exceeded''.
                                                             (line   32)
* codegen_latex_vis.py <27>:             Bad bounding boxes from latex_vis.
                                                             (line    8)
* codegen_latex_vis.py <28>:             Bad bounding boxes from latex_vis.
                                                             (line   12)
* codegen_latex_vis.py <29>:             Bad bounding boxes from latex_vis.
                                                             (line   15)
* codegen_libsea_ast.py:                 Supplied backends.  (line   57)
* codegen_libsea_ast.py <1>:             The libsea_ast backend.
                                                             (line    6)
* codegen_libsea_ast.py <2>:             The libsea_ast backend.
                                                             (line   13)
* codegen_libsea_ast.py <3>:             The libsea_ast backend.
                                                             (line   16)
* codegen_libsea_ast.py <4>:             The libsea_ast backend.
                                                             (line   16)
* codegen_libsea_ast.py <5>:             The libsea_ast backend.
                                                             (line   23)
* codegen_libsea_ast.py <6>:             The libsea_ast backend.
                                                             (line   29)
* codegen_paraver.py:                    Supplied backends.  (line   46)
* codegen_paraver.py <1>:                The paraver backend.
                                                             (line   12)
* codegen_paraver.py <2>:                The paraver backend.
                                                             (line   15)
* codegen_paraver.py <3>:                The paraver backend.
                                                             (line   20)
* codegen_paraver.py <4>:                The paraver backend.
                                                             (line   25)
* codegen_paraver.py <5>:                The paraver backend.
                                                             (line   43)
* codegen_paraver.py <6>:                The paraver backend.
                                                             (line   54)
* codegen_paraver.py <7>:                The paraver backend.
                                                             (line   57)
* codegen_paraver.py <8>:                The paraver backend.
                                                             (line   59)
* codegen_paraver.py <9>:                The paraver backend.
                                                             (line   77)
* codegen_paraver.py <10>:               The paraver backend.
                                                             (line   78)
* codegen_paraver.py <11>:               The paraver backend.
                                                             (line   80)
* codegen_paraver.py <12>:               The paraver backend.
                                                             (line   84)
* codegen_paraver.py <13>:               The paraver backend.
                                                             (line  107)
* codegen_paraver.py <14>:               The paraver backend.
                                                             (line  111)
* codegen_paraver.py <15>:               The latex_vis backend.
                                                             (line    9)
* codegen_picl.py:                       Supplied backends.  (line   42)
* codegen_picl.py <1>:                   The picl backend.   (line   14)
* codegen_picl.py <2>:                   The picl backend.   (line   18)
* codegen_picl.py <3>:                   The picl backend.   (line   22)
* codegen_picl.py <4>:                   The picl backend.   (line   26)
* codegen_picl.py <5>:                   The picl backend.   (line   49)
* codegen_picl.py <6>:                   The picl backend.   (line   53)
* codegen_picl.py <7>:                   The picl backend.   (line   56)
* codegen_picl.py <8>:                   The picl backend.   (line   58)
* codegen_picl.py <9>:                   The picl backend.   (line   77)
* codegen_picl.py <10>:                  The picl backend.   (line   77)
* codegen_picl.py <11>:                  The picl backend.   (line   80)
* codegen_picl.py <12>:                  The picl backend.   (line   85)
* codegen_picl.py <13>:                  The picl backend.   (line   88)
* codegen_picl.py <14>:                  The latex_vis backend.
                                                             (line    9)
* codegen_picl.py <15>:                  Variables and data types.
                                                             (line   74)
* codegen_picl.py <16>:                  Environment Variables.
                                                             (line   63)
* codegen_stats.py:                      Supplied backends.  (line   37)
* codegen_stats.py <1>:                  The stats backend.  (line    6)
* codegen_stats.py <2>:                  The stats backend.  (line   10)
* codegen_stats.py <3>:                  The stats backend.  (line   94)
* codegen_stats.py <4>:                  The stats backend.  (line   97)
* codegen_stats.py <5>:                  The stats backend.  (line   98)
* codegen_stats.py <6>:                  The stats backend.  (line  108)
* codegen_stats.py <7>:                  The stats backend.  (line  135)
* codegen_stats.py <8>:                  The stats backend.  (line  144)
* codegen_stats.py <9>:                  The stats backend.  (line  150)
* codestack:                             Internals.          (line   39)
* code_declare_datatypes:                C hooks.            (line   21)
* code_declare_datatypes_EXTRA_EVENTS:   C hooks.            (line   22)
* code_declare_datatypes_EXTRA_EVENT_STATE: C hooks.         (line   23)
* code_declare_datatypes_EXTRA_EVS:      C hooks.            (line   24)
* code_declare_datatypes_MCAST_STATE:    C hooks.            (line   25)
* code_declare_datatypes_POST:           C hooks.            (line   26)
* code_declare_datatypes_PRE:            C hooks.            (line   27)
* code_declare_datatypes_RECV_STATE:     C hooks.            (line   28)
* code_declare_datatypes_REDUCE_STATE:   C hooks.            (line   29)
* code_declare_datatypes_SEND_STATE:     Generated code.     (line   84)
* code_declare_datatypes_SEND_STATE <1>: C hooks.            (line   30)
* code_declare_datatypes_SYNC_STATE:     C hooks.            (line   31)
* code_declare_datatypes_WAIT_STATE:     C hooks.            (line   32)
* code_declare_globals:                  C hooks.            (line   34)
* code_declare_globals_DUMMY_VAR:        C hooks.            (line   35)
* code_declare_globals_EXTRA:            C hooks.            (line   36)
* code_declare_var:                      Internals.          (line   63)
* code_declare_var <1>:                  Internals.          (line   93)
* code_define_functions:                 C hooks.            (line  139)
* code_define_functions_INIT_COMM_1:     C hooks.            (line  140)
* code_define_functions_INIT_COMM_2:     C hooks.            (line  141)
* code_define_functions_INIT_COMM_3:     C hooks.            (line  142)
* code_define_functions_POST:            C hooks.            (line  143)
* code_define_functions_PRE:             C hooks.            (line  144)
* code_define_macros:                    C hooks.            (line  146)
* code_define_macros_POST:               C hooks.            (line  147)
* code_define_macros_PRE:                C hooks.            (line  148)
* code_define_main:                      C hooks.            (line  150)
* code_define_main_DECL:                 C hooks.            (line  151)
* code_define_main_POST_EVENTS:          C hooks.            (line  152)
* code_define_main_POST_INIT:            C hooks.            (line  153)
* code_define_main_PRE_EVENTS:           C hooks.            (line  154)
* code_define_main_PRE_INIT:             C hooks.            (line  155)
* code_def_alloc_event:                  C hooks.            (line   38)
* code_def_alloc_event_DECLS:            C hooks.            (line   39)
* code_def_alloc_event_POST:             C hooks.            (line   40)
* code_def_alloc_event_PRE:              C hooks.            (line   41)
* code_def_exit_handler:                 C hooks.            (line   43)
* code_def_exit_handler_BODY:            C hooks.            (line   44)
* code_def_finalize:                     C hooks.            (line   46)
* code_def_finalize_DECL:                C hooks.            (line   47)
* code_def_finalize_POST:                C hooks.            (line   48)
* code_def_finalize_PRE:                 C hooks.            (line   49)
* code_def_init_check_pending:           C hooks.            (line   51)
* code_def_init_check_pending_POST:      C hooks.            (line   52)
* code_def_init_check_pending_PRE:       C hooks.            (line   53)
* code_def_init_cmd_line:                C hooks.            (line   55)
* code_def_init_cmd_line_POST_ARGS:      C hooks.            (line   56)
* code_def_init_cmd_line_POST_PARSE:     C hooks.            (line   57)
* code_def_init_cmd_line_PRE_ARGS:       C hooks.            (line   58)
* code_def_init_cmd_line_PRE_PARSE:      C hooks.            (line   59)
* code_def_init_decls:                   C hooks.            (line   61)
* code_def_init_decls_POST:              C hooks.            (line   62)
* code_def_init_decls_PRE:               C hooks.            (line   63)
* code_def_init_init:                    C hooks.            (line   65)
* code_def_init_init_POST:               C hooks.            (line   66)
* code_def_init_init_PRE:                C hooks.            (line   67)
* code_def_init_misc:                    C hooks.            (line   69)
* code_def_init_misc_EXTRA:              C hooks.            (line   70)
* code_def_init_misc_PRE_LOG_OPEN:       C hooks.            (line   71)
* code_def_init_msg_mem:                 C hooks.            (line   73)
* code_def_init_msg_mem_EACH_TAG:        C hooks.            (line   74)
* code_def_init_msg_mem_POST:            C hooks.            (line   75)
* code_def_init_msg_mem_PRE:             C hooks.            (line   76)
* code_def_init_reseed:                  C hooks.            (line   78)
* code_def_init_reseed_BCAST:            A minimal C-based backend.
                                                             (line   74)
* code_def_init_reseed_BCAST <1>:        C hooks.            (line   79)
* code_def_init_seed:                    C hooks.            (line   81)
* code_def_init_seed_POST:               C hooks.            (line   82)
* code_def_init_seed_PRE:                C hooks.            (line   83)
* code_def_init_uuid:                    C hooks.            (line   85)
* code_def_init_uuid_BCAST:              C hooks.            (line   86)
* code_def_main_newstmt:                 Log-file functions. (line  139)
* code_def_mark_used:                    C hooks.            (line   88)
* code_def_mark_used_POST:               C hooks.            (line   89)
* code_def_mark_used_PRE:                C hooks.            (line   90)
* code_def_procev:                       C hooks.            (line   92)
* code_def_procev_arecv:                 C hooks.            (line  101)
* code_def_procev_arecv_BODY:            C hooks.            (line  102)
* code_def_procev_asend:                 C hooks.            (line  104)
* code_def_procev_asend_BODY:            C hooks.            (line  105)
* code_def_procev_DECL:                  C hooks.            (line   93)
* code_def_procev_etime:                 C hooks.            (line  107)
* code_def_procev_etime_REDUCE_MIN:      C hooks.            (line  108)
* code_def_procev_EVENTS_DECL:           C hooks.            (line   94)
* code_def_procev_EXTRA_EVENTS:          C hooks.            (line   95)
* code_def_procev_mcast:                 C hooks.            (line  110)
* code_def_procev_mcast_BODY:            C hooks.            (line  111)
* code_def_procev_newstmt:               C hooks.            (line  113)
* code_def_procev_newstmt_BODY:          C hooks.            (line  114)
* code_def_procev_POST:                  C hooks.            (line   96)
* code_def_procev_POST_SWITCH:           C hooks.            (line   97)
* code_def_procev_PRE:                   C hooks.            (line   98)
* code_def_procev_PRE_SWITCH:            C hooks.            (line   99)
* code_def_procev_recv:                  C hooks.            (line  116)
* code_def_procev_recv_BODY:             C hooks.            (line  117)
* code_def_procev_reduce:                C hooks.            (line  119)
* code_def_procev_reduce_BODY:           C hooks.            (line  120)
* code_def_procev_repeat:                C hooks.            (line  122)
* code_def_procev_repeat_BODY:           C hooks.            (line  123)
* code_def_procev_send:                  C hooks.            (line  125)
* code_def_procev_send_BODY:             C hooks.            (line  126)
* code_def_procev_sync:                  C hooks.            (line  128)
* code_def_procev_sync_BODY:             C hooks.            (line  129)
* code_def_procev_wait:                  C hooks.            (line  131)
* code_def_procev_wait_BODY_RECVS:       C hooks.            (line  132)
* code_def_procev_wait_BODY_SENDS:       C hooks.            (line  133)
* code_def_small_funcs:                  C hooks.            (line  135)
* code_def_small_funcs_POST:             C hooks.            (line  136)
* code_def_small_funcs_PRE:              C hooks.            (line  137)
* code_output_header_comments:           C hooks.            (line  157)
* code_output_header_comments_EXTRA:     C hooks.            (line  158)
* code_specify_include_files:            Hook methods.       (line   34)
* code_specify_include_files <1>:        Hook methods.       (line   36)
* code_specify_include_files <2>:        Hook methods.       (line   70)
* code_specify_include_files <3>:        Hook methods.       (line   84)
* code_specify_include_files <4>:        C hooks.            (line  160)
* code_specify_include_files_POST:       Hook methods.       (line   79)
* code_specify_include_files_POST <1>:   Hook methods.       (line   87)
* code_specify_include_files_POST <2>:   C hooks.            (line  161)
* code_specify_include_files_PRE:        Hook methods.       (line   74)
* code_specify_include_files_PRE <1>:    Hook methods.       (line   85)
* code_specify_include_files_PRE <2>:    C hooks.            (line  162)
* code_synchronize_all:                  C hooks.            (line  164)
* code_synchronize_all_BODY:             C hooks.            (line  165)
* coloring source listings:              make.               (line  104)
* coloring source listings <1>:          Installing stylesheets.
                                                             (line    6)
* COLORS:                                Further customizations.
                                                             (line   24)
* combine_to_marker:                     Internals.          (line  122)
* combine_to_marker <1>:                 Internals.          (line  126)
* COMES:                                 Keywords.           (line   64)
* Command line options (GUI menu item):  Menu bar.           (line   27)
* command-line arguments:                Command-line arguments.
                                                             (line    6)
* common/bgp_personality.h:              Cache Variables.    (line  180)
* Communicate (GUI button):              Command bar.        (line   24)
* COMMUNICATION:                         Further customizations.
                                                             (line   24)
* communication diagrams:                The latex_vis backend.
                                                             (line    6)
* communication statements:              Communication statements.
                                                             (line    6)
* compiler, incorrect:                   Incorrect tools/flags are utilized.
                                                             (line    6)
* compiler_version.h:                    Can't find compiler_version.h.
                                                             (line    8)
* compile_and_link:                      Backend creation.   (line   46)
* compile_and_link <1>:                  Backend creation.   (line   50)
* compile_and_link <2>:                  Backend creation.   (line   59)
* compile_only:                          Backend creation.   (line   43)
* compile_only <1>:                      Backend creation.   (line   49)
* compile_only <2>:                      Backend creation.   (line   59)
* compiling:                             Compiling coNCePTuaL programs.
                                                             (line    6)
* compiling <1>:                         Compiler.           (line    6)
* compiling <2>:                         Compaq compilers on Alpha CPUs.
                                                             (line    6)
* COMPLETION:                            Keywords.           (line   66)
* COMPLETIONS:                           Keywords.           (line   68)
* complex_stmt:                          Complex statements. (line   10)
* complex_stmt <1>:                      Complex statements. (line   11)
* complex_stmt <2>:                      Complex statements. (line   16)
* complex_stmt <3>:                      Complex statements. (line   16)
* complex_stmt <4>:                      Complex statements. (line   30)
* complex_stmt <5>:                      Grouping.           (line    9)
* complex_stmt <6>:                      Complete programs.  (line   15)
* complex_stmt <7>:                      Complete programs.  (line   17)
* complex_stmt <8>:                      Complete programs.  (line   24)
* complex_stmt <9>:                      Complete programs.  (line   48)
* complex_stmt <10>:                     Top-level statements and log files.
                                                             (line    7)
* complex_stmt <11>:                     Top-level statements and log files.
                                                             (line    9)
* complex_stmt <12>:                     Top-level statements and log files.
                                                             (line   24)
* complex_stmt <13>:                     Summary of the grammar.
                                                             (line  230)
* complex_stmt <14>:                     Summary of the grammar.
                                                             (line  230)
* complex_stmt <15>:                     Summary of the grammar.
                                                             (line  239)
* complex_stmt <16>:                     Summary of the grammar.
                                                             (line  315)
* components, GUI:                       Components.         (line    6)
* computation, simulating:               Delaying execution. (line    6)
* computation, simulating <1>:           Simulating computation.
                                                             (line    6)
* COMPUTE:                               Components.         (line   63)
* COMPUTE <1>:                           Primitives.         (line   25)
* COMPUTE <2>:                           Restoring counter values.
                                                             (line   55)
* COMPUTE <3>:                           Restoring counter values.
                                                             (line   56)
* COMPUTE <4>:                           Restoring counter values.
                                                             (line   65)
* COMPUTE <5>:                           Delaying execution. (line    9)
* COMPUTE <6>:                           Delaying execution. (line   25)
* COMPUTE <7>:                           Keywords.           (line   70)
* Compute (GUI button):                  Command bar.        (line   21)
* COMPUTES:                              The interpret backend.
                                                             (line   15)
* COMPUTES <1>:                          The picl backend.   (line   19)
* COMPUTES <2>:                          The paraver backend.
                                                             (line   17)
* COMPUTES <3>:                          Primitives.         (line   25)
* COMPUTES <4>:                          Delaying execution. (line   13)
* COMPUTES <5>:                          Summary of the grammar.
                                                             (line  276)
* COMPUTES <6>:                          Time-related functions.
                                                             (line  139)
* COMPUTES <7>:                          Keywords.           (line   72)
* COMPUTES AGGREGATES:                   Computing aggregates.
                                                             (line   17)
* COMPUTES AGGREGATES <1>:               Counted loops.      (line   20)
* COMPUTES AGGREGATES <2>:               Timed loops.        (line   32)
* COMPUTES AGGREGATES <3>:               Summary of the grammar.
                                                             (line  219)
* COMPUTES AGGREGATES <4>:               Log-file functions. (line  112)
* coNCePTuaL GUI:                        make.               (line  168)
* coNCePTuaL GUI <1>:                    The coNCePTuaL GUI. (line    9)
* coNCePTuaL GUI <2>:                    The coNCePTuaL GUI. (line   15)
* coNCePTuaL GUI <3>:                    The coNCePTuaL GUI. (line   16)
* coNCePTuaL GUI <4>:                    The coNCePTuaL GUI. (line   18)
* coNCePTuaL GUI <5>:                    The coNCePTuaL GUI. (line   23)
* coNCePTuaL GUI <6>:                    Components.         (line    7)
* coNCePTuaL GUI <7>:                    Components.         (line   15)
* coNCePTuaL GUI <8>:                    Components.         (line   23)
* coNCePTuaL GUI <9>:                    Components.         (line   31)
* coNCePTuaL GUI <10>:                   Components.         (line   34)
* coNCePTuaL GUI <11>:                   Components.         (line   41)
* coNCePTuaL GUI <12>:                   Components.         (line   42)
* coNCePTuaL GUI <13>:                   Components.         (line   48)
* coNCePTuaL GUI <14>:                   Components.         (line   54)
* coNCePTuaL GUI <15>:                   Components.         (line   62)
* coNCePTuaL GUI <16>:                   Components.         (line   63)
* coNCePTuaL GUI <17>:                   Components.         (line   69)
* coNCePTuaL GUI <18>:                   Components.         (line   75)
* coNCePTuaL GUI <19>:                   Components.         (line   84)
* coNCePTuaL GUI <20>:                   Components.         (line   84)
* coNCePTuaL GUI <21>:                   Menu bar.           (line    6)
* conceptual-1.5.1.tar.gz:               make.               (line  150)
* conceptual.info*:                      make.               (line   74)
* conceptual.pdf:                        Typesetting conventions.
                                                             (line   24)
* conceptual.pdf <1>:                    make.               (line   74)
* conceptual.texi:                       Too many columns in multitable item.
                                                             (line    6)
* conceptual.xml:                        make.               (line   75)
* conceptual_1.5.1:                      make.               (line  126)
* conceptual_1.5.1 <1>:                  make.               (line  135)
* CONC_SEND_EVENT:                       Generated code.     (line   79)
* CONC_SEND_EVENT <1>:                   Generated code.     (line   88)
* conditionals:                          Conditional execution.
                                                             (line    6)
* conditionals <1>:                      Proper use of conditionals.
                                                             (line    6)
* cond_expr:                             Formal grammar for arithmetic expressions.
                                                             (line    9)
* cond_expr <1>:                         Formal grammar for arithmetic expressions.
                                                             (line   11)
* cond_expr <2>:                         Summary of the grammar.
                                                             (line   10)
* cond_expr <3>:                         Summary of the grammar.
                                                             (line   12)
* config.guess:                          Cross-compilation.  (line   24)
* config.h:                              Manual configuration.
                                                             (line    6)
* config.h <1>:                          Manual configuration.
                                                             (line   11)
* config.h <2>:                          Manual configuration.
                                                             (line   41)
* config.h <3>:                          Manual configuration.
                                                             (line   42)
* config.h <4>:                          Manual configuration.
                                                             (line   43)
* config.h <5>:                          Manual configuration.
                                                             (line   49)
* config.h <6>:                          undefined type found DEFINE____.
                                                             (line   10)
* config.h.in:                           Manual configuration.
                                                             (line   42)
* config.h.in <1>:                       Failure following "missing" check.
                                                             (line    9)
* config.log:                            configure.          (line  163)
* config.log <1>:                        configure.          (line  172)
* config.log <2>:                        Interpreting configure warnings.
                                                             (line   15)
* config.log <3>:                        Interpreting configure warnings.
                                                             (line   17)
* config.log <4>:                        Interpreting configure warnings.
                                                             (line   22)
* config.log <5>:                        Interpreting configure warnings.
                                                             (line   55)
* config.log <6>:                        PRId64 is not a valid printf conversion specifier.
                                                             (line   13)
* config.log <7>:                        Miscellaneous mysterious hangs or crashes.
                                                             (line   31)
* config.log <8>:                        Cache Variables.    (line   20)
* config.status:                         configure.          (line  164)
* configuration information:             Reporting configuration information.
                                                             (line    6)
* configuration, manual:                 Manual configuration.
                                                             (line    6)
* configure:                             Installation.       (line   73)
* configure <1>:                         Installation.       (line   77)
* configure <2>:                         configure.          (line   11)
* configure <3>:                         configure.          (line   41)
* configure <4>:                         configure.          (line   43)
* configure <5>:                         configure.          (line   51)
* configure <6>:                         configure.          (line  112)
* configure <7>:                         configure.          (line  122)
* configure <8>:                         configure.          (line  138)
* configure <9>:                         configure.          (line  143)
* configure <10>:                        configure.          (line  151)
* configure <11>:                        configure.          (line  161)
* configure <12>:                        configure.          (line  165)
* configure <13>:                        configure.          (line  169)
* configure <14>:                        configure.          (line  170)
* configure <15>:                        make.               (line   43)
* configure <16>:                        Installation.       (line   77)
* configure <17>:                        configure.          (line    6)
* configure <18>:                        configure.          (line   10)
* configure <19>:                        configure.          (line   33)
* configure <20>:                        configure.          (line  109)
* configure <21>:                        configure.          (line  121)
* configure <22>:                        configure.          (line  162)
* configure <23>:                        make.               (line    8)
* configure <24>:                        make.               (line  131)
* configure <25>:                        The c_mpi backend.  (line   40)
* configure <26>:                        Validating the coNCePTuaL timer.
                                                             (line   25)
* configure <27>:                        make install.       (line    7)
* configure <28>:                        make install.       (line   20)
* configure <29>:                        Build process.      (line   21)
* configure <30>:                        Time-related functions.
                                                             (line   42)
* configure <31>:                        Time-related functions.
                                                             (line   46)
* configure <32>:                        Time-related functions.
                                                             (line   50)
* configure <33>:                        Time-related functions.
                                                             (line   63)
* configure <34>:                        Time-related functions.
                                                             (line  102)
* configure <35>:                        Cross-compilation.  (line   15)
* configure <36>:                        Cross-compilation.  (line   20)
* configure <37>:                        Cross-compilation.  (line   35)
* configure <38>:                        Running without installing.
                                                             (line   12)
* configure <39>:                        Running without installing.
                                                             (line   18)
* configure <40>:                        Running without installing.
                                                             (line   23)
* configure <41>:                        pkg-config.         (line    8)
* configure <42>:                        Interpreting configure warnings.
                                                             (line    9)
* configure <43>:                        Interpreting configure warnings.
                                                             (line   12)
* configure <44>:                        Interpreting configure warnings.
                                                             (line   19)
* configure <45>:                        Interpreting configure warnings.
                                                             (line   53)
* configure <46>:                        Interpreting configure warnings.
                                                             (line   56)
* configure <47>:                        Interpreting configure warnings.
                                                             (line   57)
* configure <48>:                        PRId64 is not a valid printf conversion specifier.
                                                             (line   18)
* configure <49>:                        present but cannot be compiled.
                                                             (line    6)
* configure <50>:                        Checking maximum line length is slow.
                                                             (line   12)
* configure <51>:                        Checking maximum line length is slow.
                                                             (line   20)
* configure <52>:                        Checking maximum line length is slow.
                                                             (line   22)
* configure <53>:                        configure is slow.  (line    6)
* configure <54>:                        configure is slow.  (line   12)
* configure <55>:                        configure is slow.  (line   19)
* configure <56>:                        configure is slow.  (line   21)
* configure <57>:                        Problems with ``C compiler used for Python extension modules''.
                                                             (line   36)
* configure <58>:                        Manual configuration.
                                                             (line    6)
* configure <59>:                        Manual configuration.
                                                             (line   12)
* configure <60>:                        Manual configuration.
                                                             (line   25)
* configure <61>:                        Manual configuration.
                                                             (line   40)
* configure <62>:                        Failure following "missing" check.
                                                             (line    6)
* configure <63>:                        Could not read symbols.
                                                             (line   18)
* configure <64>:                        Compaq compilers on Alpha CPUs.
                                                             (line   54)
* configure <65>:                        Building on problematic platforms.
                                                             (line   13)
* configure <66>:                        ``cannot open shared object file''.
                                                             (line    7)
* configure <67>:                        ``cannot open shared object file''.
                                                             (line   24)
* configure <68>:                        ``cannot open shared object file''.
                                                             (line   55)
* configure <69>:                        Miscellaneous mysterious hangs or crashes.
                                                             (line   33)
* configure <70>:                        Cache Variables.    (line    8)
* configure <71>:                        Cache Variables.    (line   13)
* configure <72>:                        Running coNCePTuaL programs.
                                                             (line   21)
* configure <73>:                        Build process.      (line   10)
* configure <74>:                        Build process.      (line   17)
* configure <75>:                        Variables and data types.
                                                             (line   12)
* configure <76>:                        Variables and data types.
                                                             (line   15)
* configure <77>:                        Time-related functions.
                                                             (line   37)
* configure <78>:                        Cross-compilation.  (line   44)
* configure <79>:                        Cross-compilation.  (line   48)
* configure <80>:                        Cross-compilation.  (line   90)
* configure <81>:                        Problems with configure.
                                                             (line    6)
* configure <82>:                        Interpreting configure warnings.
                                                             (line    6)
* configure <83>:                        Interpreting configure warnings.
                                                             (line   14)
* configure <84>:                        Checking maximum line length is slow.
                                                             (line    7)
* configure <85>:                        Checking maximum line length is slow.
                                                             (line   16)
* configure <86>:                        Checking maximum line length is slow.
                                                             (line   17)
* configure <87>:                        configure is slow.  (line    8)
* configure <88>:                        Problems with ``C compiler used for Python extension modules''.
                                                             (line    6)
* configure <89>:                        Problems with ``C compiler used for Python extension modules''.
                                                             (line   30)
* configure <90>:                        Manual configuration.
                                                             (line   19)
* configure <91>:                        Manual configuration.
                                                             (line   20)
* configure <92>:                        Manual configuration.
                                                             (line   29)
* configure <93>:                        Manual configuration.
                                                             (line   32)
* configure <94>:                        Manual configuration.
                                                             (line   35)
* configure <95>:                        Manual configuration.
                                                             (line   38)
* configure <96>:                        Failure following "missing" check.
                                                             (line    9)
* configure <97>:                        ``cannot open shared object file''.
                                                             (line   19)
* configure <98>:                        ``cannot open shared object file''.
                                                             (line   22)
* configure <99>:                        Miscellaneous mysterious hangs or crashes.
                                                             (line   30)
* configure <100>:                       ``Unaligned access'' warnings.
                                                             (line   31)
* configure <101>:                       ``Unaligned access'' warnings.
                                                             (line   36)
* configure <102>:                       ``Unaligned access'' warnings.
                                                             (line   43)
* configure <103>:                       ``Unable to determine the OS page size''.
                                                             (line   14)
* configure <104>:                       Invalid timing measurements.
                                                             (line    6)
* configure <105>:                       Invalid timing measurements.
                                                             (line   12)
* configure <106>:                       Cache Variables.    (line    6)
* configure <107>:                       Cache Variables.    (line   14)
* configure cache variables:             Manual configuration.
                                                             (line   29)
* configure cache variables <1>:         Cache Variables.    (line    6)
* configure.ac:                          Build process.      (line    8)
* configure.ac <1>:                      Build process.      (line   22)
* configure.ac <2>:                      Cache Variables.    (line   19)
* CONFIG_SHELL:                          configure is slow.  (line   23)
* constants, language:                   Primitives.         (line    6)
* constants, run-time library:           Variables and data types.
                                                             (line    6)
* Copy (GUI menu item):                  Menu bar.           (line   15)
* counters:                              Resetting counters. (line    6)
* counters <1>:                          Storing counter values.
                                                             (line    6)
* counters <2>:                          Restoring counter values.
                                                             (line    6)
* COUNTERS:                              Keywords.           (line   74)
* cpp:                                   Cache Variables.    (line  374)
* cpp-precomp:                           undefined type found DEFINE____.
                                                             (line   12)
* CPPFLAGS:                              configure.          (line   89)
* CPPFLAGS <1>:                          configure.          (line  119)
* CPPFLAGS <2>:                          configure.          (line  133)
* CPPFLAGS <3>:                          The c_mpi backend.  (line   28)
* CPPFLAGS <4>:                          The c_udgram backend.
                                                             (line   25)
* crashed processes:                     Miscellaneous mysterious hangs or crashes.
                                                             (line    6)
* cross-compilation:                     Cross-compilation.  (line    6)
* csh:                                   Running coNCePTuaL programs.
                                                             (line   74)
* CURRENT:                               Keywords.           (line   76)
* curses:                                Supplied backends.  (line   23)
* curses <1>:                            Command-line options for c_trace.
                                                             (line   22)
* curses <2>:                            c_trace tracing with curses.
                                                             (line    7)
* curses <3>:                            c_trace tracing with curses.
                                                             (line   47)
* Cut (GUI menu item):                   Menu bar.           (line   15)
* Cygwin:                                Installation.       (line   22)
* Cygwin <1>:                            "makehelper.py config" fails.
                                                             (line   10)
* Cygwin <2>:                            "makehelper.py config" fails.
                                                             (line   11)
* Cygwin <3>:                            "makehelper.py config" fails.
                                                             (line   11)
* c_generic (codegen_c_generic.py):      Supplied backends.  (line   75)
* c_generic (codegen_c_generic.py) <1>:  Supplied backends.  (line   81)
* c_generic (codegen_c_generic.py) <2>:  Supplied backends.  (line   82)
* c_generic (codegen_c_generic.py) <3>:  Supplied backends.  (line   85)
* c_generic (codegen_c_generic.py) <4>:  Command-line options for c_trace.
                                                             (line   16)
* c_generic (codegen_c_generic.py) <5>:  The c_profile backend.
                                                             (line   17)
* c_generic (codegen_c_generic.py) <6>:  Backend creation.   (line   13)
* c_generic (codegen_c_generic.py) <7>:  Backend creation.   (line   87)
* c_generic (codegen_c_generic.py) <8>:  Hook methods.       (line    8)
* c_generic (codegen_c_generic.py) <9>:  Hook methods.       (line   13)
* c_generic (codegen_c_generic.py) <10>: Hook methods.       (line   17)
* c_generic (codegen_c_generic.py) <11>: Hook methods.       (line   27)
* c_generic (codegen_c_generic.py) <12>: Hook methods.       (line   34)
* c_generic (codegen_c_generic.py) <13>: Hook methods.       (line   35)
* c_generic (codegen_c_generic.py) <14>: Hook methods.       (line   72)
* c_generic (codegen_c_generic.py) <15>: Hook methods.       (line   98)
* c_generic (codegen_c_generic.py) <16>: Hook methods.       (line  100)
* c_generic (codegen_c_generic.py) <17>: A minimal C-based backend.
                                                             (line    6)
* c_generic (codegen_c_generic.py) <18>: A minimal C-based backend.
                                                             (line   64)
* c_generic (codegen_c_generic.py) <19>: A minimal C-based backend.
                                                             (line   70)
* c_generic (codegen_c_generic.py) <20>: Generated code.     (line    6)
* c_generic (codegen_c_generic.py) <21>: Generated code.     (line   28)
* c_generic (codegen_c_generic.py) <22>: Internals.          (line    6)
* c_generic (codegen_c_generic.py) <23>: Internals.          (line   34)
* c_generic (codegen_c_generic.py) <24>: Internals.          (line   67)
* c_generic (codegen_c_generic.py) <25>: Internals.          (line  111)
* c_generic (codegen_c_generic.py) <26>: Variables and data types.
                                                             (line   24)
* c_generic (codegen_c_generic.py) <27>: Log-file functions. (line  136)
* c_generic (codegen_c_generic.py) <28>: Memory efficiency.  (line    6)
* c_generic (codegen_c_generic.py) <29>: C hooks.            (line    7)
* c_generic (codegen_c_generic.py) <30>: C hooks.            (line   17)
* c_generic (codegen_c_generic.py) <31>: Event types.        (line    6)
* c_mpi (codegen_c_mpi.py):              Compiling coNCePTuaL programs.
                                                             (line   31)
* c_mpi (codegen_c_mpi.py) <1>:          Supplied backends.  (line   13)
* c_mpi (codegen_c_mpi.py) <2>:          Supplied backends.  (line   74)
* c_mpi (codegen_c_mpi.py) <3>:          Supplied backends.  (line   77)
* c_mpi (codegen_c_mpi.py) <4>:          The c_mpi backend.  (line    6)
* c_mpi (codegen_c_mpi.py) <5>:          The c_mpi backend.  (line   11)
* c_mpi (codegen_c_mpi.py) <6>:          The c_mpi backend.  (line   15)
* c_mpi (codegen_c_mpi.py) <7>:          The c_mpi backend.  (line   17)
* c_mpi (codegen_c_mpi.py) <8>:          The c_mpi backend.  (line   20)
* c_mpi (codegen_c_mpi.py) <9>:          The c_mpi backend.  (line   24)
* c_mpi (codegen_c_mpi.py) <10>:         The c_mpi backend.  (line   32)
* c_mpi (codegen_c_mpi.py) <11>:         The c_mpi backend.  (line   43)
* c_mpi (codegen_c_mpi.py) <12>:         Command-line options for c_mpi.
                                                             (line    6)
* c_mpi (codegen_c_mpi.py) <13>:         Command-line options for c_mpi.
                                                             (line   13)
* c_mpi (codegen_c_mpi.py) <14>:         Command-line options for c_mpi.
                                                             (line   15)
* c_mpi (codegen_c_mpi.py) <15>:         Command-line options for c_mpi.
                                                             (line   26)
* c_mpi (codegen_c_mpi.py) <16>:         Implementation of reductions.
                                                             (line    6)
* c_mpi (codegen_c_mpi.py) <17>:         Implementation of reductions.
                                                             (line   16)
* c_mpi (codegen_c_mpi.py) <18>:         Implementation of multicasts.
                                                             (line    7)
* c_mpi (codegen_c_mpi.py) <19>:         Implementation of multicasts.
                                                             (line   10)
* c_mpi (codegen_c_mpi.py) <20>:         The picl backend.   (line   13)
* c_mpi (codegen_c_mpi.py) <21>:         The paraver backend.
                                                             (line   11)
* c_mpi (codegen_c_mpi.py) <22>:         Tag matching.       (line   64)
* c_mpi (codegen_c_mpi.py) <23>:         Tag matching.       (line   76)
* c_mpi (codegen_c_mpi.py) <24>:         Backend-specific declarations.
                                                             (line   42)
* c_mpi (codegen_c_mpi.py) <25>:         Calling MPI functions.
                                                             (line   25)
* c_mpi (codegen_c_mpi.py) <26>:         Building on problematic platforms.
                                                             (line   27)
* c_profile (codegen_c_profile.py):      Supplied backends.  (line   27)
* c_profile (codegen_c_profile.py) <1>:  Supplied backends.  (line   77)
* c_profile (codegen_c_profile.py) <2>:  The c_profile backend.
                                                             (line   11)
* c_profile (codegen_c_profile.py) <3>:  The c_profile backend.
                                                             (line   12)
* c_profile (codegen_c_profile.py) <4>:  The c_profile backend.
                                                             (line   18)
* c_seq (codegen_c_seq.py):              Supplied backends.  (line   10)
* c_seq (codegen_c_seq.py) <1>:          Supplied backends.  (line   78)
* c_seq (codegen_c_seq.py) <2>:          The c_seq backend.  (line    6)
* c_seq (codegen_c_seq.py) <3>:          The c_udgram backend.
                                                             (line    8)
* c_seq (codegen_c_seq.py) <4>:          A minimal C-based backend.
                                                             (line   25)
* c_seq (codegen_c_seq.py) <5>:          A minimal C-based backend.
                                                             (line   58)
* c_seq (codegen_c_seq.py) <6>:          A minimal C-based backend.
                                                             (line   68)
* c_trace (codegen_c_trace.py):          Compiling coNCePTuaL programs.
                                                             (line   34)
* c_trace (codegen_c_trace.py) <1>:      Supplied backends.  (line   21)
* c_trace (codegen_c_trace.py) <2>:      Supplied backends.  (line   76)
* c_trace (codegen_c_trace.py) <3>:      Supplied backends.  (line   79)
* c_trace (codegen_c_trace.py) <4>:      The c_trace backend.
                                                             (line    6)
* c_trace (codegen_c_trace.py) <5>:      The c_trace backend.
                                                             (line    8)
* c_trace (codegen_c_trace.py) <6>:      Command-line options for c_trace.
                                                             (line    6)
* c_trace (codegen_c_trace.py) <7>:      Command-line options for c_trace.
                                                             (line   10)
* c_trace (codegen_c_trace.py) <8>:      Command-line options for c_trace.
                                                             (line   12)
* c_trace (codegen_c_trace.py) <9>:      Command-line options for c_trace.
                                                             (line   12)
* c_trace (codegen_c_trace.py) <10>:     Command-line options for c_trace.
                                                             (line   17)
* c_trace (codegen_c_trace.py) <11>:     Default c_trace tracing.
                                                             (line    6)
* c_trace (codegen_c_trace.py) <12>:     c_trace tracing with curses.
                                                             (line   52)
* c_trace (codegen_c_trace.py) <13>:     Offline tracing with curses.
                                                             (line    6)
* c_trace (codegen_c_trace.py) <14>:     Offline tracing with curses.
                                                             (line   19)
* c_trace (codegen_c_trace.py) <15>:     Offline tracing with curses.
                                                             (line   44)
* c_trace (codegen_c_trace.py) <16>:     The c_profile backend.
                                                             (line   11)
* c_trace (codegen_c_trace.py) <17>:     Using out-of-bound task IDs to simplify code.
                                                             (line   64)
* c_trace (codegen_c_trace.py) <18>:     Using out-of-bound task IDs to simplify code.
                                                             (line   87)
* c_udgram (codegen_c_udgram.py):        Compiling coNCePTuaL programs.
                                                             (line   95)
* c_udgram (codegen_c_udgram.py) <1>:    Supplied backends.  (line   17)
* c_udgram (codegen_c_udgram.py) <2>:    Supplied backends.  (line   78)
* c_udgram (codegen_c_udgram.py) <3>:    The c_udgram backend.
                                                             (line    6)
* c_udgram (codegen_c_udgram.py) <4>:    The c_udgram backend.
                                                             (line    7)
* c_udgram (codegen_c_udgram.py) <5>:    The c_udgram backend.
                                                             (line   11)
* c_udgram (codegen_c_udgram.py) <6>:    The c_udgram backend.
                                                             (line   15)
* c_udgram (codegen_c_udgram.py) <7>:    The c_udgram backend.
                                                             (line   19)
* c_udgram (codegen_c_udgram.py) <8>:    The c_udgram backend.
                                                             (line   23)
* c_udgram (codegen_c_udgram.py) <9>:    The c_udgram backend.
                                                             (line   24)
* c_udgram (codegen_c_udgram.py) <10>:   The c_udgram backend.
                                                             (line   31)
* c_udgram (codegen_c_udgram.py) <11>:   The c_udgram backend.
                                                             (line   36)
* c_udgram (codegen_c_udgram.py) <12>:   Implementation of collectives.
                                                             (line    6)
* c_udgram (codegen_c_udgram.py) <13>:   The interpret backend.
                                                             (line    6)
* c_udgram (codegen_c_udgram.py) <14>:   Backend-specific declarations.
                                                             (line   43)
* c_udgram (codegen_c_udgram.py) <15>:   A minimal C-based backend.
                                                             (line   83)
* c_udgram (codegen_c_udgram.py) <16>:   A minimal C-based backend.
                                                             (line   84)
* c_udgram (codegen_c_udgram.py) <17>:   Internals.          (line   69)
* c_udgram (codegen_c_udgram.py) <18>:   Environment Variables.
                                                             (line   12)
* DATA:                                  Keywords.           (line   78)
* data touching:                         Data touching.      (line    6)
* data touching <1>:                     Touching memory.    (line    6)
* data types, run-time library:          Variables and data types.
                                                             (line    6)
* data_multiplier:                       Message specifications.
                                                             (line   20)
* data_multiplier <1>:                   Message specifications.
                                                             (line   41)
* data_multiplier <2>:                   Message specifications.
                                                             (line   60)
* data_multiplier <3>:                   Message specifications.
                                                             (line   71)
* data_multiplier <4>:                   Item size.          (line   10)
* data_multiplier <5>:                   Item size.          (line   13)
* data_multiplier <6>:                   Item size.          (line   15)
* data_multiplier <7>:                   Item size.          (line   18)
* data_multiplier <8>:                   Message alignment.  (line   13)
* data_multiplier <9>:                   Summary of the grammar.
                                                             (line  113)
* data_multiplier <10>:                  Summary of the grammar.
                                                             (line  127)
* data_multiplier <11>:                  Summary of the grammar.
                                                             (line  139)
* data_multiplier <12>:                  Summary of the grammar.
                                                             (line  150)
* data_multiplier <13>:                  Summary of the grammar.
                                                             (line  156)
* data_multiplier <14>:                  Summary of the grammar.
                                                             (line  159)
* data_multiplier <15>:                  Summary of the grammar.
                                                             (line  166)
* data_type:                             Item size.          (line   11)
* data_type <1>:                         Item size.          (line   45)
* data_type <2>:                         Item size.          (line   48)
* data_type <3>:                         Item size.          (line   70)
* data_type <4>:                         Message alignment.  (line   12)
* data_type <5>:                         Reducing.           (line   44)
* data_type <6>:                         Simulating computation.
                                                             (line   16)
* data_type <7>:                         Simulating computation.
                                                             (line   19)
* data_type <8>:                         Simulating computation.
                                                             (line   21)
* data_type <9>:                         Simulating computation.
                                                             (line   28)
* data_type <10>:                        Simulating computation.
                                                             (line   36)
* data_type <11>:                        Simulating computation.
                                                             (line   37)
* data_type <12>:                        Simulating computation.
                                                             (line   38)
* data_type <13>:                        Simulating computation.
                                                             (line   39)
* data_type <14>:                        Summary of the grammar.
                                                             (line  157)
* data_type <15>:                        Summary of the grammar.
                                                             (line  162)
* data_type <16>:                        Summary of the grammar.
                                                             (line  165)
* data_type <17>:                        Summary of the grammar.
                                                             (line  283)
* data_type <18>:                        Summary of the grammar.
                                                             (line  286)
* DAY:                                   Keywords.           (line   80)
* DAYS:                                  Delaying execution. (line   21)
* DAYS <1>:                              Summary of the grammar.
                                                             (line  279)
* DAYS <2>:                              Keywords.           (line   82)
* dclock:                                Time-related functions.
                                                             (line   83)
* dclock <1>:                            Time-related functions.
                                                             (line   85)
* DEADLOCK:                              Further customizations.
                                                             (line   25)
* debugging:                             The c_trace backend.
                                                             (line    6)
* DECLARES:                              Keywords.           (line   84)
* DEFAULT:                               Keywords.           (line   86)
* delaying execution:                    Delaying execution. (line    6)
* delay_stmt:                            Complex statements. (line   44)
* delay_stmt <1>:                        Delaying execution. (line   12)
* delay_stmt <2>:                        Delaying execution. (line   29)
* delay_stmt <3>:                        Summary of the grammar.
                                                             (line  253)
* delay_stmt <4>:                        Summary of the grammar.
                                                             (line  275)
* Delete (GUI button):                   Command bar.        (line   12)
* DEVIATION:                             Keywords.           (line   88)
* diagrams, communication:               The latex_vis backend.
                                                             (line    6)
* Dimemas:                               The paraver backend.
                                                             (line  103)
* Dimemas <1>:                           Referenced Applications.
                                                             (line   12)
* DIVIDES:                               Relational expressions.
                                                             (line   15)
* DIVIDES <1>:                           Relational expressions.
                                                             (line   33)
* DIVIDES <2>:                           Formal grammar for relational expressions.
                                                             (line   24)
* DIVIDES <3>:                           Summary of the grammar.
                                                             (line   77)
* DIVIDES <4>:                           Keywords.           (line   90)
* dlfcn.h:                               Cache Variables.    (line  183)
* DOCUMENT:                              Further customizations.
                                                             (line   25)
* DOT:                                   The dot_ast backend.
                                                             (line  232)
* DOT <1>:                               The dot_ast backend.
                                                             (line  233)
* dot:                                   Supplied backends.  (line   54)
* dot <1>:                               The dot_ast backend.
                                                             (line    6)
* dot <2>:                               The dot_ast backend.
                                                             (line    7)
* dot <3>:                               The dot_ast backend.
                                                             (line    9)
* dot <4>:                               The dot_ast backend.
                                                             (line  161)
* dot <5>:                               The dot_ast backend.
                                                             (line  245)
* dot <6>:                               The dot_ast backend.
                                                             (line  162)
* dot <7>:                               The dot_ast backend.
                                                             (line  166)
* dot <8>:                               The dot_ast backend.
                                                             (line  170)
* dot <9>:                               The dot_ast backend.
                                                             (line  229)
* dot <10>:                              The dot_ast backend.
                                                             (line  236)
* dot <11>:                              The dot_ast backend.
                                                             (line  240)
* dot <12>:                              The dot_ast backend.
                                                             (line  235)
* dot <13>:                              The dot_ast backend.
                                                             (line  241)
* dot <14>:                              Referenced Applications.
                                                             (line   14)
* dot <15>:                              Cache Variables.    (line  344)
* dot_ast (codegen_dot_ast.py):          Supplied backends.  (line   54)
* dot_ast (codegen_dot_ast.py) <1>:      The dot_ast backend.
                                                             (line    9)
* dot_ast (codegen_dot_ast.py) <2>:      The dot_ast backend.
                                                             (line   11)
* dot_ast (codegen_dot_ast.py) <3>:      The dot_ast backend.
                                                             (line  126)
* dot_ast (codegen_dot_ast.py) <4>:      The dot_ast backend.
                                                             (line  132)
* dot_ast (codegen_dot_ast.py) <5>:      The dot_ast backend.
                                                             (line  137)
* dot_ast (codegen_dot_ast.py) <6>:      The dot_ast backend.
                                                             (line  149)
* dot_ast (codegen_dot_ast.py) <7>:      The dot_ast backend.
                                                             (line  160)
* dot_ast (codegen_dot_ast.py) <8>:      The dot_ast backend.
                                                             (line  245)
* dot_ast (codegen_dot_ast.py) <9>:      The dot_ast backend.
                                                             (line  165)
* dot_ast (codegen_dot_ast.py) <10>:     The dot_ast backend.
                                                             (line  224)
* dot_ast (codegen_dot_ast.py) <11>:     The dot_ast backend.
                                                             (line  225)
* dot_ast (codegen_dot_ast.py) <12>:     The dot_ast backend.
                                                             (line  232)
* dot_ast (codegen_dot_ast.py) <13>:     The dot_ast backend.
                                                             (line  233)
* dot_ast (codegen_dot_ast.py) <14>:     The dot_ast backend.
                                                             (line  235)
* dot_ast (codegen_dot_ast.py) <15>:     The libsea_ast backend.
                                                             (line    6)
* dot_ast (codegen_dot_ast.py) <16>:     The libsea_ast backend.
                                                             (line   16)
* dot_ast (codegen_dot_ast.py) <17>:     The libsea_ast backend.
                                                             (line   17)
* dot_ast (codegen_dot_ast.py) <18>:     Primitives.         (line   96)
* dot_ast (codegen_dot_ast.py) <19>:     Backend creation.   (line   55)
* double:                                Language-visible functions.
                                                             (line   12)
* DOUBLEWORD:                            Item size.          (line   18)
* DOUBLEWORD <1>:                        Item size.          (line   32)
* DOUBLEWORD <2>:                        Item size.          (line   48)
* DOUBLEWORD <3>:                        Item size.          (line   60)
* DOUBLEWORD <4>:                        Reducing.           (line   43)
* DOUBLEWORD <5>:                        Summary of the grammar.
                                                             (line  159)
* DOUBLEWORD <6>:                        Summary of the grammar.
                                                             (line  162)
* DOUBLEWORD <7>:                        Keywords.           (line   92)
* DOUBLEWORDS:                           Message specifications.
                                                             (line   56)
* DOUBLEWORDS <1>:                       Message specifications.
                                                             (line   67)
* DOUBLEWORDS <2>:                       Summary of the grammar.
                                                             (line  135)
* DOUBLEWORDS <3>:                       Summary of the grammar.
                                                             (line  146)
* DOUBLEWORDS <4>:                       Keywords.           (line   94)
* DVIPS:                                 The latex_vis backend.
                                                             (line   18)
* dvips:                                 The latex_vis backend.
                                                             (line   17)
* dynamic libraries:                     Implicit dynamic-library search paths.
                                                             (line    6)
* dynamic libraries <1>:                 ``cannot open shared object file''.
                                                             (line    6)
* EACH:                                  Aggregate expressions.
                                                             (line   11)
* EACH <1>:                              Summary of the grammar.
                                                             (line   53)
* EACH <2>:                              Keywords.           (line   96)
* ecc:                                   Installation.       (line   36)
* ecc <1>:                               configure.          (line  113)
* Edit (GUI menu):                       Menu bar.           (line   15)
* egrep:                                 Cache Variables.    (line  346)
* elapsed_usecs:                         Storing counter values.
                                                             (line   13)
* elapsed_usecs <1>:                     Restoring counter values.
                                                             (line   13)
* elapsed_usecs <2>:                     Timed loops.        (line   23)
* elapsed_usecs <3>:                     Delaying execution. (line   32)
* elapsed_usecs <4>:                     Predeclared variables.
                                                             (line   15)
* Emacs:                                 make.               (line   73)
* Emacs <1>:                             make.               (line  109)
* Emacs <2>:                             make.               (line  159)
* Emacs <3>:                             make.               (line  163)
* Emacs <4>:                             Installing stylesheets.
                                                             (line   39)
* Emacs <5>:                             Installing stylesheets.
                                                             (line   41)
* Emacs <6>:                             Installing stylesheets.
                                                             (line   42)
* Emacs <7>:                             Installing stylesheets.
                                                             (line   50)
* Emacs <8>:                             Too many columns in multitable item.
                                                             (line    7)
* Emacs <9>:                             Referenced Applications.
                                                             (line   16)
* emacs:                                 Cache Variables.    (line  376)
* empty.log:                             make.               (line   98)
* END:                                   Further customizations.
                                                             (line   25)
* enumerated_exprs:                      Formal grammar for arithmetic expressions.
                                                             (line   37)
* enumerated_exprs <1>:                  Formal grammar for arithmetic expressions.
                                                             (line   40)
* enumerated_exprs <2>:                  Summary of the grammar.
                                                             (line   38)
* enumerated_exprs <3>:                  Summary of the grammar.
                                                             (line   41)
* env:                                   Incorrect tools/flags are utilized.
                                                             (line   19)
* Environment Modules:                   make.               (line  123)
* Environment Modules <1>:               Incorrect tools/flags are utilized.
                                                             (line    6)
* environment variables:                 Typesetting conventions.
                                                             (line   15)
* environment variables <1>:             configure.          (line   89)
* environment variables <2>:             configure.          (line   89)
* environment variables <3>:             configure.          (line   89)
* environment variables <4>:             configure.          (line  109)
* environment variables <5>:             configure.          (line  110)
* environment variables <6>:             configure.          (line  117)
* environment variables <7>:             configure.          (line  118)
* environment variables <8>:             configure.          (line  119)
* environment variables <9>:             configure.          (line  120)
* environment variables <10>:            configure.          (line  120)
* environment variables <11>:            configure.          (line  130)
* environment variables <12>:            configure.          (line  131)
* environment variables <13>:            configure.          (line  132)
* environment variables <14>:            configure.          (line  133)
* environment variables <15>:            configure.          (line  133)
* environment variables <16>:            configure.          (line  133)
* environment variables <17>:            configure.          (line  133)
* environment variables <18>:            configure.          (line  133)
* environment variables <19>:            make.               (line  128)
* environment variables <20>:            make.               (line  129)
* environment variables <21>:            make.               (line  129)
* environment variables <22>:            make.               (line  136)
* environment variables <23>:            Compiling coNCePTuaL programs.
                                                             (line   28)
* environment variables <24>:            Compiling coNCePTuaL programs.
                                                             (line   38)
* environment variables <25>:            The c_mpi backend.  (line   21)
* environment variables <26>:            The c_mpi backend.  (line   21)
* environment variables <27>:            The c_mpi backend.  (line   21)
* environment variables <28>:            The c_mpi backend.  (line   21)
* environment variables <29>:            The c_mpi backend.  (line   23)
* environment variables <30>:            The c_mpi backend.  (line   25)
* environment variables <31>:            The c_mpi backend.  (line   26)
* environment variables <32>:            The c_mpi backend.  (line   27)
* environment variables <33>:            The c_mpi backend.  (line   27)
* environment variables <34>:            The c_mpi backend.  (line   28)
* environment variables <35>:            The c_mpi backend.  (line   29)
* environment variables <36>:            The c_mpi backend.  (line   29)
* environment variables <37>:            The c_udgram backend.
                                                             (line   24)
* environment variables <38>:            The c_udgram backend.
                                                             (line   25)
* environment variables <39>:            The c_udgram backend.
                                                             (line   25)
* environment variables <40>:            The c_udgram backend.
                                                             (line   25)
* environment variables <41>:            The interpret backend.
                                                             (line   69)
* environment variables <42>:            The interpret backend.
                                                             (line   73)
* environment variables <43>:            The latex_vis backend.
                                                             (line   15)
* environment variables <44>:            The latex_vis backend.
                                                             (line   18)
* environment variables <45>:            The latex_vis backend.
                                                             (line   20)
* environment variables <46>:            The dot_ast backend.
                                                             (line  232)
* environment variables <47>:            The dot_ast backend.
                                                             (line  233)
* environment variables <48>:            Running coNCePTuaL programs.
                                                             (line  185)
* environment variables <49>:            Running coNCePTuaL programs.
                                                             (line  186)
* environment variables <50>:            Variables and data types.
                                                             (line   83)
* environment variables <51>:            Cross-compilation.  (line   77)
* environment variables <52>:            Implicit dynamic-library search paths.
                                                             (line   10)
* environment variables <53>:            Implicit dynamic-library search paths.
                                                             (line   16)
* environment variables <54>:            Implicit dynamic-library search paths.
                                                             (line   17)
* environment variables <55>:            Interpreting configure warnings.
                                                             (line   52)
* environment variables <56>:            configure is slow.  (line   23)
* environment variables <57>:            Incorrect tools/flags are utilized.
                                                             (line   12)
* environment variables <58>:            Problems running.   (line   12)
* environment variables <59>:            Problems running.   (line   12)
* environment variables <60>:            ``cannot open shared object file''.
                                                             (line   19)
* environment variables <61>:            ``cannot open shared object file''.
                                                             (line   48)
* environment variables <62>:            Miscellaneous mysterious hangs or crashes.
                                                             (line   13)
* environment variables <63>:            Miscellaneous mysterious hangs or crashes.
                                                             (line   17)
* environment variables <64>:            Extremely noisy measurements.
                                                             (line   17)
* environment variables <65>:            Extremely noisy measurements.
                                                             (line   21)
* environment variables <66>:            ``TeX capacity exceeded''.
                                                             (line   30)
* environment variables <67>:            Bad bounding boxes from latex_vis.
                                                             (line   13)
* environment variables <68>:            Environment Variables.
                                                             (line    6)
* environment variables <69>:            Environment Variables.
                                                             (line   10)
* environment variables <70>:            Environment Variables.
                                                             (line   11)
* environment variables <71>:            Environment Variables.
                                                             (line   18)
* environment variables <72>:            Environment Variables.
                                                             (line   26)
* environment variables <73>:            Environment Variables.
                                                             (line   41)
* environment variables <74>:            Environment Variables.
                                                             (line   49)
* environment variables <75>:            Environment Variables.
                                                             (line   51)
* environment variables <76>:            Environment Variables.
                                                             (line   55)
* environment variables <77>:            Environment Variables.
                                                             (line   57)
* environment variables <78>:            Environment Variables.
                                                             (line   61)
* environment variables <79>:            Environment Variables.
                                                             (line   68)
* environment variables <80>:            Environment Variables.
                                                             (line   69)
* environment variables <81>:            Environment Variables.
                                                             (line   71)
* environment variables <82>:            Environment Variables.
                                                             (line   75)
* environment variables <83>:            Environment Variables.
                                                             (line   84)
* environment variables <84>:            Environment Variables.
                                                             (line   84)
* environment variables <85>:            Environment Variables.
                                                             (line   91)
* environment variables <86>:            Environment Variables.
                                                             (line   93)
* eq_expr:                               Formal grammar for relational expressions.
                                                             (line   15)
* eq_expr <1>:                           Formal grammar for relational expressions.
                                                             (line   18)
* eq_expr <2>:                           Summary of the grammar.
                                                             (line   68)
* eq_expr <3>:                           Summary of the grammar.
                                                             (line   71)
* errno.h:                               Cache Variables.    (line  186)
* error_fatal:                           Internals.          (line   58)
* error_internal:                        Internals.          (line   59)
* escape character:                      Primitives.         (line   42)
* evaluation contexts:                   Evaluation contexts.
                                                             (line    6)
* EVEN:                                  Keywords.           (line   98)
* event types, defined by codegen_c_generic.py: Event types. (line    9)
* events_used:                           Internals.          (line  108)
* EV_ARECV:                              Event types.        (line    9)
* EV_ASEND:                              Event types.        (line   11)
* EV_BTIME:                              Event types.        (line   13)
* EV_CODE:                               Generated code.     (line   29)
* EV_DELAY:                              Event types.        (line   15)
* EV_ETIME:                              Event types.        (line   17)
* EV_FLUSH:                              Event types.        (line   19)
* EV_MCAST:                              Event types.        (line   21)
* EV_NEWSTMT:                            Event types.        (line   23)
* EV_RECV:                               Memory efficiency.  (line   46)
* EV_RECV <1>:                           Memory efficiency.  (line   54)
* EV_RECV <2>:                           Memory efficiency.  (line   60)
* EV_RECV <3>:                           Event types.        (line   25)
* EV_REDUCE:                             Event types.        (line   27)
* EV_REPEAT:                             Memory efficiency.  (line   20)
* EV_REPEAT <1>:                         Memory efficiency.  (line   36)
* EV_REPEAT <2>:                         Memory efficiency.  (line   53)
* EV_REPEAT <3>:                         Memory efficiency.  (line   53)
* EV_REPEAT <4>:                         Event types.        (line   29)
* EV_RESET:                              Event types.        (line   31)
* EV_RESTORE:                            Event types.        (line   33)
* EV_SEND:                               Memory efficiency.  (line   46)
* EV_SEND <1>:                           Memory efficiency.  (line   53)
* EV_SEND <2>:                           Memory efficiency.  (line   59)
* EV_SEND <3>:                           Event types.        (line   35)
* EV_STORE:                              Event types.        (line   37)
* EV_SUPPRESS:                           Event types.        (line   39)
* EV_SYNC:                               Event types.        (line   41)
* EV_TOUCH:                              Memory efficiency.  (line   32)
* EV_TOUCH <1>:                          Memory efficiency.  (line   36)
* EV_TOUCH <2>:                          Memory efficiency.  (line   40)
* EV_TOUCH <3>:                          Event types.        (line   43)
* EV_WAIT:                               Event types.        (line   45)
* example programs:                      Examples.           (line    6)
* example.dat:                           File-reading functions.
                                                             (line   25)
* EXECUTE:                               Keywords.           (line  100)
* EXECUTES:                              Keywords.           (line  102)
* expr:                                  Arithmetic expressions.
                                                             (line    9)
* expr <1>:                              Arithmetic expressions.
                                                             (line    9)
* expr <2>:                              Arithmetic expressions.
                                                             (line   17)
* expr <3>:                              Arithmetic expressions.
                                                             (line   17)
* expr <4>:                              Arithmetic expressions.
                                                             (line   42)
* expr <5>:                              Evaluation contexts.
                                                             (line   23)
* expr <6>:                              Formal grammar for arithmetic expressions.
                                                             (line    9)
* expr <7>:                              Formal grammar for arithmetic expressions.
                                                             (line   34)
* expr <8>:                              Formal grammar for arithmetic expressions.
                                                             (line   38)
* expr <9>:                              Formal grammar for arithmetic expressions.
                                                             (line   40)
* expr <10>:                             Formal grammar for arithmetic expressions.
                                                             (line   40)
* expr <11>:                             Aggregate expressions.
                                                             (line   11)
* expr <12>:                             Aggregate expressions.
                                                             (line   12)
* expr <13>:                             Aggregate expressions.
                                                             (line   13)
* expr <14>:                             Aggregate expressions.
                                                             (line   14)
* expr <15>:                             Aggregate expressions.
                                                             (line   16)
* expr <16>:                             Aggregate expressions.
                                                             (line   20)
* expr <17>:                             Aggregate expressions.
                                                             (line   21)
* expr <18>:                             Aggregate expressions.
                                                             (line   21)
* expr <19>:                             Aggregate expressions.
                                                             (line   30)
* expr <20>:                             Aggregate expressions.
                                                             (line   23)
* expr <21>:                             Aggregate expressions.
                                                             (line   25)
* expr <22>:                             Aggregate functions.
                                                             (line   11)
* expr <23>:                             Aggregate functions.
                                                             (line   17)
* expr <24>:                             Aggregate functions.
                                                             (line   17)
* expr <25>:                             Relational expressions.
                                                             (line   40)
* expr <26>:                             Formal grammar for relational expressions.
                                                             (line   18)
* expr <27>:                             Formal grammar for relational expressions.
                                                             (line   18)
* expr <28>:                             Formal grammar for relational expressions.
                                                             (line   19)
* expr <29>:                             Formal grammar for relational expressions.
                                                             (line   19)
* expr <30>:                             Formal grammar for relational expressions.
                                                             (line   20)
* expr <31>:                             Formal grammar for relational expressions.
                                                             (line   20)
* expr <32>:                             Formal grammar for relational expressions.
                                                             (line   21)
* expr <33>:                             Formal grammar for relational expressions.
                                                             (line   21)
* expr <34>:                             Formal grammar for relational expressions.
                                                             (line   22)
* expr <35>:                             Formal grammar for relational expressions.
                                                             (line   22)
* expr <36>:                             Formal grammar for relational expressions.
                                                             (line   23)
* expr <37>:                             Formal grammar for relational expressions.
                                                             (line   23)
* expr <38>:                             Formal grammar for relational expressions.
                                                             (line   24)
* expr <39>:                             Formal grammar for relational expressions.
                                                             (line   24)
* expr <40>:                             Formal grammar for relational expressions.
                                                             (line   25)
* expr <41>:                             Formal grammar for relational expressions.
                                                             (line   26)
* expr <42>:                             Formal grammar for relational expressions.
                                                             (line   27)
* expr <43>:                             Formal grammar for relational expressions.
                                                             (line   28)
* expr <44>:                             Range expressions.  (line   17)
* expr <45>:                             Range expressions.  (line   17)
* expr <46>:                             Range expressions.  (line   17)
* expr <47>:                             Range expressions.  (line   18)
* expr <48>:                             Range expressions.  (line   37)
* expr <49>:                             Source tasks.       (line   10)
* expr <50>:                             Source tasks.       (line   22)
* expr <51>:                             Source tasks.       (line   23)
* expr <52>:                             Target tasks.       (line    9)
* expr <53>:                             Message specifications.
                                                             (line   19)
* expr <54>:                             Message specifications.
                                                             (line   20)
* expr <55>:                             Message specifications.
                                                             (line   21)
* expr <56>:                             Message specifications.
                                                             (line   40)
* expr <57>:                             Message specifications.
                                                             (line   41)
* expr <58>:                             Message specifications.
                                                             (line   42)
* expr <59>:                             Message specifications.
                                                             (line   59)
* expr <60>:                             Message specifications.
                                                             (line   60)
* expr <61>:                             Message specifications.
                                                             (line   61)
* expr <62>:                             Message specifications.
                                                             (line   70)
* expr <63>:                             Message specifications.
                                                             (line   71)
* expr <64>:                             Message specifications.
                                                             (line   72)
* expr <65>:                             Item count.         (line    8)
* expr <66>:                             Item size.          (line   10)
* expr <67>:                             Item size.          (line   16)
* expr <68>:                             Message alignment.  (line   13)
* expr <69>:                             Tag matching.       (line    9)
* expr <70>:                             Tag matching.       (line   10)
* expr <71>:                             Tag matching.       (line   68)
* expr <72>:                             Buffer control.     (line   18)
* expr <73>:                             Buffer control.     (line   19)
* expr <74>:                             Buffer control.     (line   23)
* expr <75>:                             Writing to standard output.
                                                             (line   13)
* expr <76>:                             Writing to standard output.
                                                             (line   14)
* expr <77>:                             Complex statements. (line   23)
* expr <78>:                             Complex statements. (line   23)
* expr <79>:                             Complex statements. (line   26)
* expr <80>:                             Complex statements. (line   26)
* expr <81>:                             Counted loops.      (line    8)
* expr <82>:                             Counted loops.      (line    8)
* expr <83>:                             Counted loops.      (line   17)
* expr <84>:                             Counted loops.      (line   17)
* expr <85>:                             Range loops.        (line   19)
* expr <86>:                             Timed loops.        (line   11)
* expr <87>:                             Timed loops.        (line   12)
* expr <88>:                             Timed loops.        (line   28)
* expr <89>:                             Timed loops.        (line   29)
* expr <90>:                             Binding variables.  (line   33)
* expr <91>:                             Binding variables.  (line   34)
* expr <92>:                             Binding variables.  (line   34)
* expr <93>:                             Binding variables.  (line   35)
* expr <94>:                             Binding variables.  (line   35)
* expr <95>:                             Binding variables.  (line   36)
* expr <96>:                             Binding variables.  (line   36)
* expr <97>:                             Binding variables.  (line   36)
* expr <98>:                             Binding variables.  (line  123)
* expr <99>:                             Binding variables.  (line  124)
* expr <100>:                            Delaying execution. (line   14)
* expr <101>:                            Delaying execution. (line   17)
* expr <102>:                            Simulating computation.
                                                             (line   16)
* expr <103>:                            Simulating computation.
                                                             (line   18)
* expr <104>:                            Simulating computation.
                                                             (line   19)
* expr <105>:                            Simulating computation.
                                                             (line   21)
* expr <106>:                            Simulating computation.
                                                             (line   28)
* expr <107>:                            Simulating computation.
                                                             (line   38)
* expr <108>:                            Simulating computation.
                                                             (line   39)
* expr <109>:                            Priming message buffers.
                                                             (line   18)
* expr <110>:                            Priming message buffers.
                                                             (line   40)
* expr <111>:                            Priming message buffers.
                                                             (line   41)
* expr <112>:                            Priming message buffers.
                                                             (line   41)
* expr <113>:                            Reordering task IDs.
                                                             (line   23)
* expr <114>:                            Injecting arbitrary code.
                                                             (line   14)
* expr <115>:                            Injecting arbitrary code.
                                                             (line   15)
* expr <116>:                            Injecting arbitrary code.
                                                             (line   31)
* expr <117>:                            Injecting arbitrary code.
                                                             (line   33)
* expr <118>:                            Injecting arbitrary code.
                                                             (line   38)
* expr <119>:                            Command-line arguments.
                                                             (line   12)
* expr <120>:                            Command-line arguments.
                                                             (line   19)
* expr <121>:                            Command-line arguments.
                                                             (line   21)
* expr <122>:                            Summary of the grammar.
                                                             (line   10)
* expr <123>:                            Summary of the grammar.
                                                             (line   35)
* expr <124>:                            Summary of the grammar.
                                                             (line   39)
* expr <125>:                            Summary of the grammar.
                                                             (line   41)
* expr <126>:                            Summary of the grammar.
                                                             (line   41)
* expr <127>:                            Summary of the grammar.
                                                             (line   53)
* expr <128>:                            Summary of the grammar.
                                                             (line   54)
* expr <129>:                            Summary of the grammar.
                                                             (line   55)
* expr <130>:                            Summary of the grammar.
                                                             (line   56)
* expr <131>:                            Summary of the grammar.
                                                             (line   60)
* expr <132>:                            Summary of the grammar.
                                                             (line   71)
* expr <133>:                            Summary of the grammar.
                                                             (line   71)
* expr <134>:                            Summary of the grammar.
                                                             (line   72)
* expr <135>:                            Summary of the grammar.
                                                             (line   72)
* expr <136>:                            Summary of the grammar.
                                                             (line   73)
* expr <137>:                            Summary of the grammar.
                                                             (line   73)
* expr <138>:                            Summary of the grammar.
                                                             (line   74)
* expr <139>:                            Summary of the grammar.
                                                             (line   74)
* expr <140>:                            Summary of the grammar.
                                                             (line   75)
* expr <141>:                            Summary of the grammar.
                                                             (line   75)
* expr <142>:                            Summary of the grammar.
                                                             (line   76)
* expr <143>:                            Summary of the grammar.
                                                             (line   76)
* expr <144>:                            Summary of the grammar.
                                                             (line   77)
* expr <145>:                            Summary of the grammar.
                                                             (line   77)
* expr <146>:                            Summary of the grammar.
                                                             (line   78)
* expr <147>:                            Summary of the grammar.
                                                             (line   79)
* expr <148>:                            Summary of the grammar.
                                                             (line   80)
* expr <149>:                            Summary of the grammar.
                                                             (line   81)
* expr <150>:                            Summary of the grammar.
                                                             (line   83)
* expr <151>:                            Summary of the grammar.
                                                             (line   83)
* expr <152>:                            Summary of the grammar.
                                                             (line   83)
* expr <153>:                            Summary of the grammar.
                                                             (line   84)
* expr <154>:                            Summary of the grammar.
                                                             (line   91)
* expr <155>:                            Summary of the grammar.
                                                             (line   97)
* expr <156>:                            Summary of the grammar.
                                                             (line  112)
* expr <157>:                            Summary of the grammar.
                                                             (line  113)
* expr <158>:                            Summary of the grammar.
                                                             (line  114)
* expr <159>:                            Summary of the grammar.
                                                             (line  126)
* expr <160>:                            Summary of the grammar.
                                                             (line  127)
* expr <161>:                            Summary of the grammar.
                                                             (line  128)
* expr <162>:                            Summary of the grammar.
                                                             (line  138)
* expr <163>:                            Summary of the grammar.
                                                             (line  139)
* expr <164>:                            Summary of the grammar.
                                                             (line  140)
* expr <165>:                            Summary of the grammar.
                                                             (line  149)
* expr <166>:                            Summary of the grammar.
                                                             (line  150)
* expr <167>:                            Summary of the grammar.
                                                             (line  151)
* expr <168>:                            Summary of the grammar.
                                                             (line  153)
* expr <169>:                            Summary of the grammar.
                                                             (line  156)
* expr <170>:                            Summary of the grammar.
                                                             (line  166)
* expr <171>:                            Summary of the grammar.
                                                             (line  210)
* expr <172>:                            Summary of the grammar.
                                                             (line  211)
* expr <173>:                            Summary of the grammar.
                                                             (line  232)
* expr <174>:                            Summary of the grammar.
                                                             (line  232)
* expr <175>:                            Summary of the grammar.
                                                             (line  235)
* expr <176>:                            Summary of the grammar.
                                                             (line  235)
* expr <177>:                            Summary of the grammar.
                                                             (line  263)
* expr <178>:                            Summary of the grammar.
                                                             (line  264)
* expr <179>:                            Summary of the grammar.
                                                             (line  264)
* expr <180>:                            Summary of the grammar.
                                                             (line  265)
* expr <181>:                            Summary of the grammar.
                                                             (line  265)
* expr <182>:                            Summary of the grammar.
                                                             (line  266)
* expr <183>:                            Summary of the grammar.
                                                             (line  266)
* expr <184>:                            Summary of the grammar.
                                                             (line  266)
* expr <185>:                            Summary of the grammar.
                                                             (line  277)
* expr <186>:                            Summary of the grammar.
                                                             (line  283)
* expr <187>:                            Summary of the grammar.
                                                             (line  285)
* expr <188>:                            Summary of the grammar.
                                                             (line  286)
* expr <189>:                            Summary of the grammar.
                                                             (line  291)
* expr <190>:                            Summary of the grammar.
                                                             (line  296)
* expr <191>:                            Summary of the grammar.
                                                             (line  300)
* expr <192>:                            Summary of the grammar.
                                                             (line  301)
* expr <193>:                            Summary of the grammar.
                                                             (line  308)
* expr <194>:                            Log-file functions. (line  163)
* expr1:                                 Arithmetic expressions.
                                                             (line   49)
* expr1 <1>:                             Arithmetic expressions.
                                                             (line   50)
* expr1 <2>:                             Arithmetic expressions.
                                                             (line   70)
* expr2:                                 Arithmetic expressions.
                                                             (line   49)
* expr2 <1>:                             Arithmetic expressions.
                                                             (line   51)
* expr2 <2>:                             Arithmetic expressions.
                                                             (line   70)
* expressions, aggregate:                Aggregate expressions.
                                                             (line    6)
* expressions, arithmetic:               Arithmetic expressions.
                                                             (line    6)
* expressions, range:                    Range expressions.  (line    6)
* expressions, relational:               Relational expressions.
                                                             (line    6)
* Extend (GUI button):                   Command bar.        (line   34)
* Extrae:                                The paraver backend.
                                                             (line    9)
* Extrae <1>:                            The paraver backend.
                                                             (line   10)
* Extrae <2>:                            Referenced Applications.
                                                             (line   18)
* FACTOR10:                              Built-in functions. (line   15)
* FACTOR10 <1>:                          Integer functions.  (line   21)
* FACTOR10 <2>:                          Summary of the grammar.
                                                             (line   43)
* FACTOR10 <3>:                          Keywords.           (line  104)
* fgrep:                                 Cache Variables.    (line  348)
* File (GUI menu):                       Menu bar.           (line    6)
* file-reading functions:                File-reading functions.
                                                             (line    6)
* filetype.vim:                          Installing stylesheets.
                                                             (line   58)
* FILE_DATA:                             Built-in functions. (line   23)
* FILE_DATA <1>:                         File-reading functions.
                                                             (line    6)
* FILE_DATA <2>:                         File-reading functions.
                                                             (line   33)
* FILE_DATA <3>:                         File-reading functions.
                                                             (line   52)
* FILE_DATA <4>:                         File-reading functions.
                                                             (line   57)
* FILE_DATA <5>:                         File-reading functions.
                                                             (line   66)
* FILE_DATA <6>:                         File-reading functions.
                                                             (line   68)
* FILE_DATA <7>:                         File-reading functions.
                                                             (line   78)
* FILE_DATA <8>:                         File-reading functions.
                                                             (line   81)
* FILE_DATA <9>:                         File-reading functions.
                                                             (line   89)
* FILE_DATA <10>:                        File-reading functions.
                                                             (line  102)
* FILE_DATA <11>:                        File-reading functions.
                                                             (line  104)
* FILE_DATA <12>:                        File-reading functions.
                                                             (line  105)
* FILE_DATA <13>:                        File-reading functions.
                                                             (line  106)
* FILE_DATA <14>:                        Summary of the grammar.
                                                             (line   51)
* FILE_DATA <15>:                        Keywords.           (line  106)
* FINAL:                                 Aggregate functions.
                                                             (line   11)
* FINAL <1>:                             Aggregate functions.
                                                             (line   16)
* FINAL <2>:                             Summary of the grammar.
                                                             (line   60)
* FINAL <3>:                             Keywords.           (line  108)
* finalization functions:                Finalization functions.
                                                             (line    6)
* flags, incorrect:                      Incorrect tools/flags are utilized.
                                                             (line    6)
* floating-point functions:              Floating-point functions.
                                                             (line    6)
* floating-point functions <1>:          Floating-point-function descriptions.
                                                             (line    6)
* FLOOR:                                 Built-in functions. (line   16)
* FLOOR <1>:                             Floating-point functions.
                                                             (line   19)
* FLOOR <2>:                             Floating-point functions.
                                                             (line   27)
* FLOOR <3>:                             Floating-point functions.
                                                             (line   34)
* FLOOR <4>:                             Summary of the grammar.
                                                             (line   44)
* floor:                                 Cache Variables.    (line   30)
* FLOOR <5>:                             Keywords.           (line  110)
* flush_stmt:                            Computing aggregates.
                                                             (line   16)
* flush_stmt <1>:                        Complex statements. (line   39)
* flush_stmt <2>:                        Summary of the grammar.
                                                             (line  218)
* flush_stmt <3>:                        Summary of the grammar.
                                                             (line  248)
* fmod:                                  Cache Variables.    (line   33)
* fmod <1>:                              Cache Variables.    (line  326)
* FOR:                                   Components.         (line   49)
* FOR <1>:                               The interpret backend.
                                                             (line   57)
* FOR <2>:                               Complex statements. (line   18)
* FOR <3>:                               Complex statements. (line   23)
* FOR <4>:                               Complex statements. (line   26)
* FOR <5>:                               Counted loops.      (line    7)
* FOR <6>:                               Counted loops.      (line   15)
* FOR <7>:                               Counted loops.      (line   17)
* FOR <8>:                               Counted loops.      (line   25)
* FOR <9>:                               Timed loops.        (line   11)
* FOR <10>:                              Timed loops.        (line   28)
* FOR <11>:                              Binding variables.  (line  105)
* FOR <12>:                              Binding variables.  (line  106)
* FOR <13>:                              Grouping.           (line    6)
* FOR <14>:                              Grouping.           (line   30)
* FOR <15>:                              Grouping.           (line   31)
* FOR <16>:                              Delaying execution. (line   14)
* FOR <17>:                              Simulating computation.
                                                             (line   79)
* FOR <18>:                              Summary of the grammar.
                                                             (line  232)
* FOR <19>:                              Summary of the grammar.
                                                             (line  235)
* FOR <20>:                              Summary of the grammar.
                                                             (line  277)
* FOR <21>:                              Latency.            (line   36)
* FOR <22>:                              Time-related functions.
                                                             (line  124)
* FOR <23>:                              Memory efficiency.  (line   19)
* FOR <24>:                              Keywords.           (line  112)
* FOR EACH:                              Evaluation contexts.
                                                             (line   21)
* FOR EACH <1>:                          Range expressions.  (line   18)
* FOR EACH <2>:                          Range expressions.  (line   77)
* FOR EACH <3>:                          Range expressions.  (line   78)
* FOR EACH <4>:                          Complex statements. (line   25)
* FOR EACH <5>:                          Range loops.        (line   11)
* FOR EACH <6>:                          Range loops.        (line   22)
* FOR EACH <7>:                          Range loops.        (line  112)
* FOR EACH <8>:                          Summary of the grammar.
                                                             (line   84)
* FOR EACH <9>:                          Summary of the grammar.
                                                             (line  234)
* FOR EACH <10>:                         Memory efficiency.  (line   23)
* fork:                                  configure.          (line   52)
* fork <1>:                              configure.          (line   53)
* fork <2>:                              configure.          (line   57)
* fork <3>:                              configure.          (line   58)
* fork <4>:                              A minimal C-based backend.
                                                             (line   84)
* fork <5>:                              Miscellaneous mysterious hangs or crashes.
                                                             (line    7)
* fork <6>:                              Environment Variables.
                                                             (line   91)
* fork <7>:                              Cache Variables.    (line   36)
* fork_works:                            Cache Variables.    (line   39)
* fprintf:                               Supplied backends.  (line   21)
* fprintf <1>:                           Command-line options for c_trace.
                                                             (line   20)
* FROM:                                  Message specifications.
                                                             (line   20)
* FROM <1>:                              Message specifications.
                                                             (line   23)
* FROM <2>:                              Message specifications.
                                                             (line   60)
* FROM <3>:                              Receiving.          (line   16)
* FROM <4>:                              Summary of the grammar.
                                                             (line  113)
* FROM <5>:                              Summary of the grammar.
                                                             (line  139)
* FROM <6>:                              Summary of the grammar.
                                                             (line  182)
* FROM <7>:                              Keywords.           (line  114)
* FROM BUFFER:                           Implementation of reductions.
                                                             (line   18)
* FROM BUFFER <1>:                       Buffer control.     (line   18)
* FROM BUFFER <2>:                       Buffer control.     (line   20)
* FROM BUFFER <3>:                       Buffer control.     (line   24)
* FROM BUFFER <4>:                       Injecting arbitrary code.
                                                             (line   41)
* FROM THE DEFAULT BUFFER:               Buffer control.     (line   25)
* function:                              Arithmetic expressions.
                                                             (line    9)
* function <1>:                          Arithmetic expressions.
                                                             (line   42)
* functions, aggregate:                  Aggregate functions.
                                                             (line    6)
* functions, aggregate <1>:              Representing aggregate functions.
                                                             (line    6)
* functions, built-in:                   Built-in functions. (line    6)
* functions, file-reading:               File-reading functions.
                                                             (line    6)
* functions, finalization:               Finalization functions.
                                                             (line    6)
* functions, floating-point:             Floating-point functions.
                                                             (line    6)
* functions, floating-point <1>:         Floating-point-function descriptions.
                                                             (line    6)
* functions, initialization:             Initialization functions.
                                                             (line    6)
* functions, integer:                    Integer functions.  (line    6)
* functions, integer <1>:                Integer-function descriptions.
                                                             (line    6)
* functions, language-visible:           Language-visible functions.
                                                             (line    6)
* functions, log-file:                   Log-file functions. (line    6)
* functions, memory-allocation:          Memory-allocation functions.
                                                             (line    6)
* functions, mesh:                       Mesh/torus functions.
                                                             (line    6)
* functions, message-buffer:             Message-buffer manipulation functions.
                                                             (line    6)
* functions, queue:                      Queue functions.    (line    6)
* functions, random-number:              Random-number functions.
                                                             (line    6)
* functions, random-number <1>:          Random-number-function descriptions.
                                                             (line    6)
* functions, random-task:                Random-task functions.
                                                             (line    6)
* functions, set:                        Unordered-set functions.
                                                             (line    6)
* functions, stack:                      Queue functions.    (line   50)
* functions, task-mapping:               Processor/task mapping functions.
                                                             (line    6)
* functions, task-mapping <1>:           Task-mapping functions.
                                                             (line    6)
* functions, time-related:               Time-related functions.
                                                             (line    6)
* functions, topology:                   Topology-function descriptions.
                                                             (line    6)
* functions, torus:                      Mesh/torus functions.
                                                             (line    6)
* functions, tree:                       n-ary tree functions.
                                                             (line    6)
* functions, tree <1>:                   k-nomial tree functions.
                                                             (line    6)
* func_name:                             Formal grammar for arithmetic expressions.
                                                             (line   37)
* func_name <1>:                         Built-in functions. (line   15)
* func_name <2>:                         Summary of the grammar.
                                                             (line   38)
* func_name <3>:                         Summary of the grammar.
                                                             (line   43)
* gcc:                                   Installation.       (line   12)
* gcc <1>:                               Installation.       (line   15)
* gcc <2>:                               Installation.       (line   16)
* gcc <3>:                               Installation.       (line   17)
* gcc <4>:                               Installation.       (line   18)
* gcc <5>:                               Installation.       (line   20)
* gcc <6>:                               Installation.       (line   21)
* gcc <7>:                               Installation.       (line   26)
* gcc <8>:                               Installation.       (line   31)
* gcc <9>:                               Installation.       (line   35)
* gcc <10>:                              Installation.       (line   39)
* gcc <11>:                              Installation.       (line   41)
* gcc <12>:                              Installation.       (line   43)
* gcc <13>:                              Installation.       (line   47)
* gcc <14>:                              Installation.       (line   53)
* gcc <15>:                              Installation.       (line   57)
* gcc <16>:                              Installation.       (line   61)
* gcc <17>:                              Installation.       (line   63)
* gcc <18>:                              Installation.       (line   67)
* gcc <19>:                              Compaq compilers on Alpha CPUs.
                                                             (line    6)
* generate:                              Backend creation.   (line   17)
* generate <1>:                          Backend creation.   (line   23)
* generate <2>:                          Backend creation.   (line   29)
* generate <3>:                          Backend creation.   (line   65)
* generate <4>:                          Internals.          (line   35)
* generated code:                        Generated code.     (line    6)
* GEOMETRIC:                             Keywords.           (line  116)
* GEOMETRIC MEAN:                        Aggregate functions.
                                                             (line    9)
* GEOMETRIC MEAN <1>:                    Summary of the grammar.
                                                             (line   58)
* GeSHi:                                 make.               (line  113)
* GeSHi <1>:                             Installing stylesheets.
                                                             (line   78)
* GeSHi <2>:                             Installing stylesheets.
                                                             (line  100)
* GeSHi <3>:                             Installing stylesheets.
                                                             (line  104)
* GeSHi <4>:                             Referenced Applications.
                                                             (line   23)
* getaddrinfo:                           Cache Variables.    (line   42)
* getcwd:                                Cache Variables.    (line   45)
* geteuid:                               Cache Variables.    (line   48)
* gethostbyname:                         Cache Variables.    (line   12)
* gethostbyname <1>:                     Cache Variables.    (line   14)
* gethostbyname <2>:                     Cache Variables.    (line   51)
* getinvent:                             Cache Variables.    (line   54)
* getopt.h:                              Cache Variables.    (line  189)
* getopt_long:                           Cache Variables.    (line   57)
* getopt_long <1>:                       Cache Variables.    (line  319)
* getpagesize:                           ``Unable to determine the OS page size''.
                                                             (line    8)
* getpagesize <1>:                       Cache Variables.    (line   60)
* getpwuid:                              Cache Variables.    (line   63)
* getrusage:                             Miscellaneous mysterious hangs or crashes.
                                                             (line   29)
* getrusage <1>:                         Miscellaneous mysterious hangs or crashes.
                                                             (line   30)
* getrusage <2>:                         Miscellaneous mysterious hangs or crashes.
                                                             (line   35)
* getrusage <3>:                         Cache Variables.    (line   66)
* gettimeofday:                          configure.          (line   67)
* gettimeofday <1>:                      configure.          (line   94)
* gettimeofday <2>:                      Time-related functions.
                                                             (line   43)
* gettimeofday <3>:                      Time-related functions.
                                                             (line   59)
* gettimeofday <4>:                      Time-related functions.
                                                             (line   94)
* getuid:                                Cache Variables.    (line   69)
* get_cycles:                            Time-related functions.
                                                             (line   63)
* get_cycles <1>:                        Time-related functions.
                                                             (line   66)
* Ghostscript:                           The latex_vis backend.
                                                             (line   20)
* Ghostscript <1>:                       The latex_vis backend.
                                                             (line  173)
* Ghostscript <2>:                       Bad bounding boxes from latex_vis.
                                                             (line    6)
* GIGABYTE:                              Item size.          (line   19)
* GIGABYTE <1>:                          Item size.          (line   42)
* GIGABYTE <2>:                          Summary of the grammar.
                                                             (line  160)
* GIGABYTE <3>:                          Keywords.           (line  118)
* gimp:                                  Cache Variables.    (line  350)
* glob:                                  Cache Variables.    (line   72)
* glob.h:                                Cache Variables.    (line  192)
* GNU:                                   Installation.       (line    6)
* GNU <1>:                               Installation.       (line   12)
* GNU <2>:                               Installation.       (line   15)
* GNU <3>:                               Installation.       (line   16)
* GNU <4>:                               Installation.       (line   17)
* GNU <5>:                               Installation.       (line   18)
* GNU <6>:                               Installation.       (line   20)
* GNU <7>:                               Installation.       (line   21)
* GNU <8>:                               Installation.       (line   26)
* GNU <9>:                               Installation.       (line   31)
* GNU <10>:                              Installation.       (line   35)
* GNU <11>:                              Installation.       (line   39)
* GNU <12>:                              Installation.       (line   41)
* GNU <13>:                              Installation.       (line   43)
* GNU <14>:                              Installation.       (line   47)
* GNU <15>:                              Installation.       (line   53)
* GNU <16>:                              Installation.       (line   57)
* GNU <17>:                              Installation.       (line   61)
* GNU <18>:                              Installation.       (line   63)
* GNU <19>:                              Installation.       (line   67)
* GNU <20>:                              make.               (line   46)
* GNU <21>:                              Installing stylesheets.
                                                             (line   41)
* GNU <22>:                              Build process.      (line    6)
* GNU <23>:                              Implicit dynamic-library search paths.
                                                             (line   21)
* GNU <24>:                              Checking maximum line length is slow.
                                                             (line   12)
* GNU <25>:                              configure is slow.  (line   18)
* GNU <26>:                              configure is slow.  (line   20)
* GNU <27>:                              Failure following "missing" check.
                                                             (line    7)
* GNU <28>:                              Failure following "missing" check.
                                                             (line   27)
* gnugetopt.h:                           Cache Variables.    (line  195)
* gperf:                                 Cache Variables.    (line  352)
* gperf <1>:                             Cache Variables.    (line  458)
* grammar:                               Grammar.            (line    6)
* grammar, summary:                      Summary of the grammar.
                                                             (line    6)
* graphical user interface:              The coNCePTuaL GUI. (line    6)
* graphical view of communication:       The latex_vis backend.
                                                             (line    6)
* Graphviz:                              Supplied backends.  (line   54)
* Graphviz <1>:                          The dot_ast backend.
                                                             (line    7)
* Graphviz <2>:                          The dot_ast backend.
                                                             (line  136)
* Graphviz <3>:                          The dot_ast backend.
                                                             (line  140)
* Graphviz <4>:                          The dot_ast backend.
                                                             (line  144)
* Graphviz <5>:                          The dot_ast backend.
                                                             (line  232)
* Graphviz <6>:                          The dot_ast backend.
                                                             (line  236)
* Graphviz <7>:                          The dot_ast backend.
                                                             (line  241)
* Graphviz <8>:                          Referenced Applications.
                                                             (line   14)
* Graphviz <9>:                          Referenced Applications.
                                                             (line   25)
* GREATER:                               Keywords.           (line  120)
* GREATER THAN:                          Binding variables.  (line   35)
* GREATER THAN <1>:                      Binding variables.  (line  123)
* GREATER THAN <2>:                      Summary of the grammar.
                                                             (line  265)
* grep:                                  Cache Variables.    (line  354)
* GROUP:                                 Source tasks.       (line   12)
* GROUP <1>:                             Target tasks.       (line   11)
* GROUP <2>:                             Summary of the grammar.
                                                             (line   93)
* GROUP <3>:                             Summary of the grammar.
                                                             (line   99)
* GROUP <4>:                             Keywords.           (line  122)
* grouping:                              Grouping.           (line    6)
* GS:                                    The latex_vis backend.
                                                             (line   20)
* GS <1>:                                Bad bounding boxes from latex_vis.
                                                             (line   13)
* gs:                                    The latex_vis backend.
                                                             (line   20)
* gs <1>:                                Cache Variables.    (line  356)
* GUI buttons:                           Command bar.        (line    9)
* GUI buttons <1>:                       Command bar.        (line   12)
* GUI buttons <2>:                       Command bar.        (line   15)
* GUI buttons <3>:                       Command bar.        (line   18)
* GUI buttons <4>:                       Command bar.        (line   21)
* GUI buttons <5>:                       Command bar.        (line   24)
* GUI buttons <6>:                       Command bar.        (line   29)
* GUI buttons <7>:                       Command bar.        (line   34)
* GUI buttons <8>:                       Command bar.        (line   38)
* GUI buttons <9>:                       Command bar.        (line   42)
* GUI buttons <10>:                      Command bar.        (line   47)
* GUI buttons <11>:                      Command bar.        (line   53)
* GUI menus:                             Menu bar.           (line    6)
* GUI menus <1>:                         Menu bar.           (line   15)
* GUI menus <2>:                         Menu bar.           (line   18)
* GUI menus <3>:                         Menu bar.           (line   22)
* GUI menus <4>:                         Menu bar.           (line   27)
* HALFWORD:                              Item size.          (line   18)
* HALFWORD <1>:                          Item size.          (line   25)
* HALFWORD <2>:                          Item size.          (line   48)
* HALFWORD <3>:                          Item size.          (line   53)
* HALFWORD <4>:                          Summary of the grammar.
                                                             (line  159)
* HALFWORD <5>:                          Summary of the grammar.
                                                             (line  162)
* HALFWORD <6>:                          Keywords.           (line  124)
* HALFWORDS:                             Keywords.           (line  126)
* HARMONIC:                              Keywords.           (line  128)
* HARMONIC MEAN:                         Aggregate functions.
                                                             (line    9)
* HARMONIC MEAN <1>:                     Summary of the grammar.
                                                             (line   58)
* High-Precision Event:                  Time-related functions.
                                                             (line   97)
* High-Precision Event Timers (HPET):    Time-related functions.
                                                             (line  114)
* HISTOGRAM:                             Keywords.           (line  130)
* hooks:                                 Hook methods.       (line    6)
* hot-potato benchmark:                  Hot potato.         (line    6)
* hot-spot benchmark:                    Hot spot.           (line    6)
* HOUR:                                  Keywords.           (line  132)
* HOURS:                                 Delaying execution. (line   21)
* HOURS <1>:                             Summary of the grammar.
                                                             (line  279)
* HOURS <2>:                             Keywords.           (line  134)
* htmltidy:                              Cache Variables.    (line  358)
* hugelatex:                             ``TeX capacity exceeded''.
                                                             (line   26)
* hugelatex <1>:                         ``TeX capacity exceeded''.
                                                             (line   29)
* hung processes:                        Miscellaneous mysterious hangs or crashes.
                                                             (line    6)
* ibv_get_devices:                       Cache Variables.    (line   78)
* ibv_get_device_list:                   Cache Variables.    (line   75)
* ibv_query_device:                      Cache Variables.    (line  323)
* icc:                                   Installation.       (line   13)
* ident:                                 Typesetting conventions.
                                                             (line   18)
* ident <1>:                             Primitives.         (line   11)
* ident <2>:                             Formal grammar for arithmetic expressions.
                                                             (line   35)
* ident <3>:                             Range expressions.  (line   18)
* ident <4>:                             Restricted identifiers.
                                                             (line    9)
* ident <5>:                             Restricted identifiers.
                                                             (line    9)
* ident <6>:                             Restricted identifiers.
                                                             (line   12)
* ident <7>:                             Restricted identifiers.
                                                             (line   21)
* ident <8>:                             Source tasks.       (line    9)
* ident <9>:                             Source tasks.       (line   12)
* ident <10>:                            Source tasks.       (line   16)
* ident <11>:                            Source tasks.       (line   17)
* ident <12>:                            Source tasks.       (line   36)
* ident <13>:                            Source tasks.       (line   41)
* ident <14>:                            Source tasks.       (line   46)
* ident <15>:                            Target tasks.       (line   11)
* ident <16>:                            Target tasks.       (line   17)
* ident <17>:                            Complex statements. (line   25)
* ident <18>:                            Range loops.        (line   11)
* ident <19>:                            Binding variables.  (line   26)
* ident <20>:                            Binding variables.  (line   38)
* ident <21>:                            Binding variables.  (line   38)
* ident <22>:                            Command-line arguments.
                                                             (line    9)
* ident <23>:                            Command-line arguments.
                                                             (line   14)
* ident <24>:                            Command-line arguments.
                                                             (line   20)
* ident <25>:                            Summary of the grammar.
                                                             (line   36)
* ident <26>:                            Summary of the grammar.
                                                             (line   84)
* ident <27>:                            Summary of the grammar.
                                                             (line   87)
* ident <28>:                            Summary of the grammar.
                                                             (line   90)
* ident <29>:                            Summary of the grammar.
                                                             (line   93)
* ident <30>:                            Summary of the grammar.
                                                             (line   99)
* ident <31>:                            Summary of the grammar.
                                                             (line  234)
* ident <32>:                            Summary of the grammar.
                                                             (line  259)
* ident <33>:                            Summary of the grammar.
                                                             (line  305)
* ident <34>:                            Summary of the grammar.
                                                             (line  318)
* identifiers, restricted:               Restricted identifiers.
                                                             (line    6)
* ieeefp.h:                              Cache Variables.    (line  198)
* IF:                                    Arithmetic expressions.
                                                             (line   17)
* IF <1>:                                Arithmetic expressions.
                                                             (line   49)
* IF <2>:                                Formal grammar for arithmetic expressions.
                                                             (line   11)
* IF <3>:                                Complex statements. (line   19)
* IF <4>:                                Complex statements. (line   29)
* IF <5>:                                Conditional execution.
                                                             (line    9)
* IF <6>:                                Grouping.           (line    6)
* IF <7>:                                Grouping.           (line    7)
* IF <8>:                                Summary of the grammar.
                                                             (line   12)
* IF <9>:                                Summary of the grammar.
                                                             (line  238)
* IF <10>:                               Summary of the grammar.
                                                             (line  268)
* IF <11>:                               Keywords.           (line  136)
* if_stmt:                               Conditional execution.
                                                             (line    9)
* if_stmt <1>:                           Conditional execution.
                                                             (line   13)
* if_stmt <2>:                           Conditional execution.
                                                             (line   21)
* if_stmt <3>:                           Summary of the grammar.
                                                             (line  268)
* illustrations of communication patterns: The latex_vis backend.
                                                             (line    6)
* implementation:                        Implementation.     (line    6)
* IN:                                    Range expressions.  (line   18)
* IN <1>:                                Complex statements. (line   25)
* IN <2>:                                Range loops.        (line   12)
* IN <3>:                                Binding variables.  (line   36)
* IN <4>:                                Summary of the grammar.
                                                             (line   84)
* IN <5>:                                Summary of the grammar.
                                                             (line  234)
* IN <6>:                                Summary of the grammar.
                                                             (line  266)
* IN <7>:                                Keywords.           (line  138)
* indent:                                A minimal C-based backend.
                                                             (line   65)
* InfiniBand:                            configure.          (line   55)
* InfiniBand <1>:                        Miscellaneous mysterious hangs or crashes.
                                                             (line    6)
* infiniband/verbs.h:                    Cache Variables.    (line  201)
* initialization functions:              Initialization functions.
                                                             (line    6)
* injecting arbitrary code:              Injecting arbitrary code.
                                                             (line    6)
* injecting arbitrary code <1>:          Backend-specific declarations.
                                                             (line    6)
* installation:                          Installation.       (line    6)
* installation <1>:                      Running without installing.
                                                             (line    6)
* integer:                               Formal grammar for arithmetic expressions.
                                                             (line   36)
* INTEGER:                               Item size.          (line   18)
* INTEGER <1>:                           Item size.          (line   29)
* INTEGER <2>:                           Item size.          (line   48)
* INTEGER <3>:                           Item size.          (line   57)
* INTEGER <4>:                           Item size.          (line   68)
* INTEGER <5>:                           Reducing.           (line   43)
* integer <1>:                           Summary of the grammar.
                                                             (line   37)
* INTEGER <6>:                           Summary of the grammar.
                                                             (line  159)
* INTEGER <7>:                           Summary of the grammar.
                                                             (line  162)
* integer <2>:                           Summary of the grammar.
                                                             (line  318)
* INTEGER <8>:                           Keywords.           (line  140)
* integer functions:                     Integer functions.  (line    6)
* integer functions <1>:                 Integer-function descriptions.
                                                             (line    6)
* INTEGERS:                              Message specifications.
                                                             (line   56)
* INTEGERS <1>:                          Message specifications.
                                                             (line   67)
* integers:                              Primitives.         (line   61)
* INTEGERS <2>:                          Summary of the grammar.
                                                             (line  135)
* INTEGERS <3>:                          Summary of the grammar.
                                                             (line  146)
* INTEGERS <4>:                          Keywords.           (line  142)
* internals:                             Internals.          (line    6)
* interpret (codegen_interpret.py):      Supplied backends.  (line   32)
* interpret (codegen_interpret.py) <1>:  The interpret backend.
                                                             (line    6)
* interpret (codegen_interpret.py) <2>:  The interpret backend.
                                                             (line    8)
* interpret (codegen_interpret.py) <3>:  The interpret backend.
                                                             (line    9)
* interpret (codegen_interpret.py) <4>:  The interpret backend.
                                                             (line   10)
* interpret (codegen_interpret.py) <5>:  The interpret backend.
                                                             (line   14)
* interpret (codegen_interpret.py) <6>:  The interpret backend.
                                                             (line   19)
* interpret (codegen_interpret.py) <7>:  The interpret backend.
                                                             (line   22)
* interpret (codegen_interpret.py) <8>:  The interpret backend.
                                                             (line   28)
* interpret (codegen_interpret.py) <9>:  The interpret backend.
                                                             (line   30)
* interpret (codegen_interpret.py) <10>: The interpret backend.
                                                             (line   31)
* interpret (codegen_interpret.py) <11>: The interpret backend.
                                                             (line   35)
* interpret (codegen_interpret.py) <12>: The interpret backend.
                                                             (line   48)
* interpret (codegen_interpret.py) <13>: The interpret backend.
                                                             (line   65)
* interpret (codegen_interpret.py) <14>: The interpret backend.
                                                             (line   81)
* interpret (codegen_interpret.py) <15>: The interpret backend.
                                                             (line   82)
* interpret (codegen_interpret.py) <16>: The interpret backend.
                                                             (line  104)
* interpret (codegen_interpret.py) <17>: The interpret backend.
                                                             (line  117)
* interpret (codegen_interpret.py) <18>: The interpret backend.
                                                             (line  135)
* interpret (codegen_interpret.py) <19>: The interpret backend.
                                                             (line  168)
* interpret (codegen_interpret.py) <20>: Task latency hierarchies.
                                                             (line    6)
* interpret (codegen_interpret.py) <21>: Task latency hierarchies.
                                                             (line   38)
* interpret (codegen_interpret.py) <22>: The stats backend.  (line   94)
* interpret (codegen_interpret.py) <23>: The stats backend.  (line   95)
* interpret (codegen_interpret.py) <24>: The picl backend.   (line   53)
* interpret (codegen_interpret.py) <25>: The picl backend.   (line   54)
* interpret (codegen_interpret.py) <26>: The paraver backend.
                                                             (line   54)
* interpret (codegen_interpret.py) <27>: The paraver backend.
                                                             (line   55)
* interpret (codegen_interpret.py) <28>: The latex_vis backend.
                                                             (line   59)
* interpret (codegen_interpret.py) <29>: The latex_vis backend.
                                                             (line   60)
* interpret (codegen_interpret.py) <30>: The latex_vis backend.
                                                             (line   63)
* interpret (codegen_interpret.py) <31>: Restoring counter values.
                                                             (line   68)
* interpret (codegen_interpret.py) <32>: Backend-specific declarations.
                                                             (line   44)
* INTO:                                  Message specifications.
                                                             (line   20)
* INTO <1>:                              Message specifications.
                                                             (line   24)
* INTO <2>:                              Message specifications.
                                                             (line   41)
* INTO <3>:                              Message specifications.
                                                             (line   41)
* INTO <4>:                              Message specifications.
                                                             (line   60)
* INTO <5>:                              Message specifications.
                                                             (line   71)
* INTO <6>:                              Message specifications.
                                                             (line   71)
* INTO <7>:                              Summary of the grammar.
                                                             (line  113)
* INTO <8>:                              Summary of the grammar.
                                                             (line  127)
* INTO <9>:                              Summary of the grammar.
                                                             (line  127)
* INTO <10>:                             Summary of the grammar.
                                                             (line  139)
* INTO <11>:                             Summary of the grammar.
                                                             (line  150)
* INTO <12>:                             Summary of the grammar.
                                                             (line  150)
* INTO <13>:                             Keywords.           (line  144)
* INTO BUFFER:                           Implementation of reductions.
                                                             (line   18)
* INTO BUFFER <1>:                       Buffer control.     (line   19)
* INTO BUFFER <2>:                       Buffer control.     (line   21)
* INTO BUFFER <3>:                       Buffer control.     (line   24)
* INTO BUFFER <4>:                       Injecting arbitrary code.
                                                             (line   41)
* INTO THE DEFAULT BUFFER:               Buffer control.     (line   25)
* inttypes.h:                            Cache Variables.    (line  204)
* invent.h:                              Cache Variables.    (line  207)
* invoke_hook:                           Internals.          (line  129)
* IS:                                    Command-line arguments.
                                                             (line   10)
* IS <1>:                                Summary of the grammar.
                                                             (line  306)
* IS <2>:                                Keywords.           (line  146)
* IS ASSIGNED TO:                        Processor/task mapping functions.
                                                             (line   10)
* IS ASSIGNED TO <1>:                    Processor/task mapping functions.
                                                             (line   20)
* IS ASSIGNED TO <2>:                    Reordering task IDs.
                                                             (line   22)
* IS ASSIGNED TO <3>:                    Summary of the grammar.
                                                             (line  295)
* IS ASSIGNED TO <4>:                    Task-mapping functions.
                                                             (line   36)
* IS EVEN:                               Relational expressions.
                                                             (line   14)
* IS EVEN <1>:                           Relational expressions.
                                                             (line   24)
* IS EVEN <2>:                           Formal grammar for relational expressions.
                                                             (line   25)
* IS EVEN <3>:                           Summary of the grammar.
                                                             (line   78)
* IS IN:                                 Relational expressions.
                                                             (line   15)
* IS IN <1>:                             Relational expressions.
                                                             (line   38)
* IS IN <2>:                             Relational expressions.
                                                             (line   40)
* IS IN <3>:                             Relational expressions.
                                                             (line   46)
* IS IN <4>:                             Relational expressions.
                                                             (line   47)
* IS IN <5>:                             Relational expressions.
                                                             (line   52)
* IS IN <6>:                             Formal grammar for relational expressions.
                                                             (line   27)
* IS IN <7>:                             Source tasks.       (line   41)
* IS IN <8>:                             Source tasks.       (line   42)
* IS IN <9>:                             Summary of the grammar.
                                                             (line   80)
* IS NOT IN:                             Relational expressions.
                                                             (line   15)
* IS NOT IN <1>:                         Relational expressions.
                                                             (line   52)
* IS NOT IN <2>:                         Formal grammar for relational expressions.
                                                             (line   28)
* IS NOT IN <3>:                         Summary of the grammar.
                                                             (line   81)
* IS ODD:                                Relational expressions.
                                                             (line   14)
* IS ODD <1>:                            Relational expressions.
                                                             (line   25)
* IS ODD <2>:                            Formal grammar for relational expressions.
                                                             (line   26)
* IS ODD <3>:                            Summary of the grammar.
                                                             (line   79)
* IT:                                    Keywords.           (line  148)
* item_count:                            Message specifications.
                                                             (line    9)
* item_count <1>:                        Message specifications.
                                                             (line   51)
* item_count <2>:                        Message specifications.
                                                             (line   63)
* item_count <3>:                        Item count.         (line    6)
* item_count <4>:                        Item count.         (line    8)
* item_count <5>:                        Summary of the grammar.
                                                             (line  102)
* item_count <6>:                        Summary of the grammar.
                                                             (line  130)
* item_count <7>:                        Summary of the grammar.
                                                             (line  142)
* item_count <8>:                        Summary of the grammar.
                                                             (line  153)
* item_size:                             Message specifications.
                                                             (line   11)
* item_size <1>:                         Item size.          (line    6)
* item_size <2>:                         Item size.          (line    9)
* item_size <3>:                         Item size.          (line   66)
* item_size <4>:                         Item size.          (line   67)
* item_size <5>:                         Simulating computation.
                                                             (line   17)
* item_size <6>:                         Simulating computation.
                                                             (line   21)
* item_size <7>:                         Summary of the grammar.
                                                             (line  104)
* item_size <8>:                         Summary of the grammar.
                                                             (line  155)
* item_size <9>:                         Summary of the grammar.
                                                             (line  284)
* iteration:                             Iterating.          (line    6)
* iteration <1>:                         Counted loops.      (line    6)
* iteration <2>:                         Range loops.        (line    6)
* iteration <3>:                         Timed loops.        (line    6)
* ITS:                                   Keywords.           (line  150)
* jar:                                   Cache Variables.    (line  378)
* Java:                                  make.               (line  169)
* Java <1>:                              make.               (line  170)
* Java <2>:                              The coNCePTuaL GUI. (line   15)
* Java <3>:                              The coNCePTuaL GUI. (line   15)
* javac:                                 make.               (line  169)
* javac <1>:                             Cache Variables.    (line  380)
* Jython:                                make.               (line  170)
* jythonc:                               make.               (line  170)
* jythonc <1>:                           make.               (line  171)
* jythonc <2>:                           make.               (line  175)
* jythonc <3>:                           Cache Variables.    (line  360)
* KEYWORD:                               Grammar.            (line   42)
* keywords:                              Primitives.         (line   22)
* keywords <1>:                          Keywords.           (line    6)
* kill:                                  Cache Variables.    (line   81)
* KILOBYTE:                              Item size.          (line   19)
* KILOBYTE <1>:                          Item size.          (line   38)
* KILOBYTE <2>:                          Summary of the grammar.
                                                             (line  160)
* KILOBYTE <3>:                          Keywords.           (line  152)
* KNOMIAL_CHILD:                         Built-in functions. (line   18)
* KNOMIAL_CHILD <1>:                     k-nomial tree functions.
                                                             (line   15)
* KNOMIAL_CHILD <2>:                     k-nomial tree functions.
                                                             (line   29)
* KNOMIAL_CHILD <3>:                     Summary of the grammar.
                                                             (line   46)
* KNOMIAL_CHILD <4>:                     Multicast trees.    (line   13)
* KNOMIAL_CHILD <5>:                     Keywords.           (line  154)
* KNOMIAL_CHILDREN:                      Built-in functions. (line   18)
* KNOMIAL_CHILDREN <1>:                  k-nomial tree functions.
                                                             (line   14)
* KNOMIAL_CHILDREN <2>:                  k-nomial tree functions.
                                                             (line   25)
* KNOMIAL_CHILDREN <3>:                  k-nomial tree functions.
                                                             (line   32)
* KNOMIAL_CHILDREN <4>:                  Summary of the grammar.
                                                             (line   46)
* KNOMIAL_CHILDREN <5>:                  Multicast trees.    (line   12)
* KNOMIAL_CHILDREN <6>:                  Keywords.           (line  156)
* KNOMIAL_PARENT:                        Built-in functions. (line   18)
* KNOMIAL_PARENT <1>:                    k-nomial tree functions.
                                                             (line   14)
* KNOMIAL_PARENT <2>:                    k-nomial tree functions.
                                                             (line   18)
* KNOMIAL_PARENT <3>:                    k-nomial tree functions.
                                                             (line   25)
* KNOMIAL_PARENT <4>:                    k-nomial tree functions.
                                                             (line   32)
* KNOMIAL_PARENT <5>:                    Summary of the grammar.
                                                             (line   46)
* KNOMIAL_PARENT <6>:                    Keywords.           (line  158)
* kpsewhich:                             Installing stylesheets.
                                                             (line   15)
* kstat_data_lookup:                     Cache Variables.    (line  393)
* lang.map:                              Installing stylesheets.
                                                             (line   70)
* LANGUAGE:                              Keywords.           (line  160)
* latency benchmark:                     Latency.            (line    6)
* LATEX:                                 The latex_vis backend.
                                                             (line   15)
* LATEX <1>:                             ``TeX capacity exceeded''.
                                                             (line   30)
* latex:                                 The latex_vis backend.
                                                             (line   14)
* latex <1>:                             The latex_vis backend.
                                                             (line   25)
* LaTeX:                                 Supplied backends.  (line   50)
* LaTeX <1>:                             The latex_vis backend.
                                                             (line   11)
* LaTeX <2>:                             The latex_vis backend.
                                                             (line   13)
* LaTeX <3>:                             The latex_vis backend.
                                                             (line   22)
* LaTeX <4>:                             Further customizations.
                                                             (line   20)
* LaTeX <5>:                             Further customizations.
                                                             (line   46)
* LaTeX <6>:                             Further customizations.
                                                             (line   62)
* LaTeX <7>:                             Further customizations.
                                                             (line   69)
* LaTeX <8>:                             Further customizations.
                                                             (line   73)
* LaTeX <9>:                             ncptl-logextract manual page.
                                                             (line  759)
* LaTeX <10>:                            ncptl-logextract manual page.
                                                             (line  853)
* LaTeX <11>:                            ncptl-logextract manual page.
                                                             (line 1066)
* LaTeX <12>:                            ncptl-logextract manual page.
                                                             (line 1194)
* LaTeX <13>:                            ncptl-logextract manual page.
                                                             (line 1309)
* LaTeX <14>:                            ``TeX capacity exceeded''.
                                                             (line    6)
* LaTeX <15>:                            ``TeX capacity exceeded''.
                                                             (line   18)
* latex <2>:                             ``TeX capacity exceeded''.
                                                             (line   25)
* LaTeX <16>:                            Referenced Applications.
                                                             (line   27)
* LaTeX <17>:                            Referenced Applications.
                                                             (line   51)
* latex_vis (codegen_latex_vis.py):      Compiling coNCePTuaL programs.
                                                             (line   96)
* latex_vis (codegen_latex_vis.py) <1>:  Supplied backends.  (line   50)
* latex_vis (codegen_latex_vis.py) <2>:  The latex_vis backend.
                                                             (line    6)
* latex_vis (codegen_latex_vis.py) <3>:  The latex_vis backend.
                                                             (line   11)
* latex_vis (codegen_latex_vis.py) <4>:  The latex_vis backend.
                                                             (line   19)
* latex_vis (codegen_latex_vis.py) <5>:  The latex_vis backend.
                                                             (line  173)
* latex_vis (codegen_latex_vis.py) <6>:  The latex_vis backend.
                                                             (line   22)
* latex_vis (codegen_latex_vis.py) <7>:  The latex_vis backend.
                                                             (line   27)
* latex_vis (codegen_latex_vis.py) <8>:  The latex_vis backend.
                                                             (line   48)
* latex_vis (codegen_latex_vis.py) <9>:  The latex_vis backend.
                                                             (line   50)
* latex_vis (codegen_latex_vis.py) <10>: The latex_vis backend.
                                                             (line   59)
* latex_vis (codegen_latex_vis.py) <11>: The latex_vis backend.
                                                             (line   65)
* latex_vis (codegen_latex_vis.py) <12>: The latex_vis backend.
                                                             (line   67)
* latex_vis (codegen_latex_vis.py) <13>: The latex_vis backend.
                                                             (line  180)
* latex_vis (codegen_latex_vis.py) <14>: The latex_vis backend.
                                                             (line  107)
* latex_vis (codegen_latex_vis.py) <15>: The latex_vis backend.
                                                             (line  119)
* latex_vis (codegen_latex_vis.py) <16>: The latex_vis backend.
                                                             (line  126)
* latex_vis (codegen_latex_vis.py) <17>: The latex_vis backend.
                                                             (line  138)
* latex_vis (codegen_latex_vis.py) <18>: Further customizations.
                                                             (line   16)
* latex_vis (codegen_latex_vis.py) <19>: Further customizations.
                                                             (line   20)
* latex_vis (codegen_latex_vis.py) <20>: Further customizations.
                                                             (line   27)
* latex_vis (codegen_latex_vis.py) <21>: Further customizations.
                                                             (line   67)
* latex_vis (codegen_latex_vis.py) <22>: Further customizations.
                                                             (line   68)
* latex_vis (codegen_latex_vis.py) <23>: Backend-specific declarations.
                                                             (line   44)
* latex_vis (codegen_latex_vis.py) <24>: ``TeX capacity exceeded''.
                                                             (line    7)
* latex_vis (codegen_latex_vis.py) <25>: ``TeX capacity exceeded''.
                                                             (line   23)
* latex_vis (codegen_latex_vis.py) <26>: ``TeX capacity exceeded''.
                                                             (line   32)
* latex_vis (codegen_latex_vis.py) <27>: Bad bounding boxes from latex_vis.
                                                             (line    8)
* latex_vis (codegen_latex_vis.py) <28>: Bad bounding boxes from latex_vis.
                                                             (line   12)
* latex_vis (codegen_latex_vis.py) <29>: Bad bounding boxes from latex_vis.
                                                             (line   15)
* ldd:                                   Cache Variables.    (line  362)
* LDFLAGS:                               configure.          (line   89)
* LDFLAGS <1>:                           configure.          (line  118)
* LDFLAGS <2>:                           configure.          (line  133)
* LDFLAGS <3>:                           The c_mpi backend.  (line   29)
* LDFLAGS <4>:                           The c_udgram backend.
                                                             (line   25)
* LDFLAGS <5>:                           Implicit dynamic-library search paths.
                                                             (line   17)
* LD_LIBRARY_PATH:                       make.               (line  129)
* LD_LIBRARY_PATH <1>:                   Implicit dynamic-library search paths.
                                                             (line   10)
* LD_LIBRARY_PATH <2>:                   Implicit dynamic-library search paths.
                                                             (line   16)
* LD_LIBRARY_PATH <3>:                   Interpreting configure warnings.
                                                             (line   52)
* LD_LIBRARY_PATH <4>:                   ``cannot open shared object file''.
                                                             (line   19)
* LD_LIBRARY_PATH <5>:                   ``cannot open shared object file''.
                                                             (line   48)
* LESS:                                  Keywords.           (line  162)
* LESS THAN:                             Binding variables.  (line   34)
* LESS THAN <1>:                         Binding variables.  (line  124)
* LESS THAN <2>:                         Summary of the grammar.
                                                             (line  264)
* LET:                                   Receiving.          (line   39)
* LET <1>:                               Complex statements. (line   18)
* LET <2>:                               Complex statements. (line   28)
* LET <3>:                               Binding variables.  (line   15)
* LET <4>:                               Binding variables.  (line   17)
* LET <5>:                               Binding variables.  (line   19)
* LET <6>:                               Binding variables.  (line   38)
* LET <7>:                               Binding variables.  (line   57)
* LET <8>:                               Binding variables.  (line   61)
* LET <9>:                               Binding variables.  (line   89)
* LET <10>:                              Binding variables.  (line  113)
* LET <11>:                              Grouping.           (line    6)
* LET <12>:                              Grouping.           (line   35)
* LET <13>:                              Summary of the grammar.
                                                             (line  237)
* LET <14>:                              Keywords.           (line  164)
* let_binding:                           Complex statements. (line   28)
* let_binding <1>:                       Complex statements. (line   28)
* let_binding <2>:                       Binding variables.  (line   19)
* let_binding <3>:                       Binding variables.  (line   20)
* let_binding <4>:                       Binding variables.  (line   24)
* let_binding <5>:                       Binding variables.  (line   26)
* let_binding <6>:                       Summary of the grammar.
                                                             (line  237)
* let_binding <7>:                       Summary of the grammar.
                                                             (line  237)
* let_binding <8>:                       Summary of the grammar.
                                                             (line  259)
* libgnugetopt.a:                        Cache Variables.    (line  318)
* libhal.h:                              Cache Variables.    (line  210)
* libibverbs.a:                          Cache Variables.    (line  322)
* libm.a:                                Cache Variables.    (line  326)
* libncptl:                              pkg-config.         (line   12)
* libncptl.so:                           ``cannot open shared object file''.
                                                             (line   46)
* libncptlmodule.so:                     configure.          (line   22)
* libncptlmodule.so <1>:                 configure.          (line   27)
* libncptlmodule.so <2>:                 ``cannot open shared object file''.
                                                             (line   61)
* libncptl_wrap.c:                       Compaq compilers on Alpha CPUs.
                                                             (line    9)
* libncptl_wrap.c <1>:                   Compaq compilers on Alpha CPUs.
                                                             (line   27)
* libpopt.so:                            Interpreting configure warnings.
                                                             (line   31)
* libpopt.so <1>:                        Interpreting configure warnings.
                                                             (line   46)
* libpopt.so <2>:                        Could not read symbols.
                                                             (line    9)
* libpopt.so <3>:                        Could not read symbols.
                                                             (line   14)
* libpopt.so <4>:                        Could not read symbols.
                                                             (line   16)
* libpopt.so <5>:                        ``cannot open shared object file''.
                                                             (line   23)
* libpopt.so <6>:                        ``cannot open shared object file''.
                                                             (line   25)
* libraries, dynamic:                    ``cannot open shared object file''.
                                                             (line    6)
* library, run-time:                     Run-time library.   (line    6)
* library, run-time <1>:                 Run-time library functions.
                                                             (line    6)
* LIBS:                                  configure.          (line   89)
* LIBS <1>:                              configure.          (line  120)
* LIBS <2>:                              configure.          (line  133)
* LIBS <3>:                              The c_mpi backend.  (line   29)
* LIBS <4>:                              The c_udgram backend.
                                                             (line   25)
* LibSea:                                Supplied backends.  (line   57)
* LibSea <1>:                            The libsea_ast backend.
                                                             (line   14)
* LibSea <2>:                            The libsea_ast backend.
                                                             (line   34)
* LibSea <3>:                            Referenced Applications.
                                                             (line   29)
* libsea_ast (codegen_libsea_ast.py):    Supplied backends.  (line   57)
* libsea_ast (codegen_libsea_ast.py) <1>: The libsea_ast backend.
                                                             (line    6)
* libsea_ast (codegen_libsea_ast.py) <2>: The libsea_ast backend.
                                                             (line   13)
* libsea_ast (codegen_libsea_ast.py) <3>: The libsea_ast backend.
                                                             (line   16)
* libsea_ast (codegen_libsea_ast.py) <4>: The libsea_ast backend.
                                                             (line   16)
* libsea_ast (codegen_libsea_ast.py) <5>: The libsea_ast backend.
                                                             (line   23)
* libsea_ast (codegen_libsea_ast.py) <6>: The libsea_ast backend.
                                                             (line   29)
* libsysfs.a:                            Cache Variables.    (line  329)
* Libtool:                               Installation.       (line    6)
* Libtool <1>:                           make.               (line   47)
* Libtool <2>:                           Build process.      (line    6)
* Libtool <3>:                           Running without installing.
                                                             (line   10)
* Libtool <4>:                           Checking maximum line length is slow.
                                                             (line    6)
* libtool:                               Compaq compilers on Alpha CPUs.
                                                             (line   49)
* libtool <1>:                           Compaq compilers on Alpha CPUs.
                                                             (line   51)
* libtool <2>:                           Compaq compilers on Alpha CPUs.
                                                             (line   54)
* libtool <3>:                           Compaq compilers on Alpha CPUs.
                                                             (line   56)
* libtoolize:                            make.               (line   52)
* Linux:                                 Installation.       (line   12)
* Linux <1>:                             Installation.       (line   26)
* Linux <2>:                             Installation.       (line   35)
* Linux <3>:                             Installation.       (line   39)
* Linux <4>:                             Installation.       (line   47)
* Linux <5>:                             Installation.       (line   61)
* Linux <6>:                             Installation.       (line   67)
* Linux <7>:                             configure.          (line  145)
* Linux <8>:                             File-reading functions.
                                                             (line   60)
* Linux <9>:                             File-reading functions.
                                                             (line   61)
* Linux <10>:                            Time-related functions.
                                                             (line   63)
* Linux <11>:                            Cross-compilation.  (line   14)
* Linux <12>:                            Problems with ``C compiler used for Python extension modules''.
                                                             (line   34)
* Linux <13>:                            Could not read symbols.
                                                             (line    6)
* Linux <14>:                            Could not read symbols.
                                                             (line   11)
* Linux <15>:                            Compaq compilers on Alpha CPUs.
                                                             (line   36)
* Linux <16>:                            ``Unaligned access'' warnings.
                                                             (line   40)
* listings:                              Installing stylesheets.
                                                             (line   21)
* listings <1>:                          Installing stylesheets.
                                                             (line   23)
* llabs:                                 Cache Variables.    (line   84)
* llvm-gcc:                              Installation.       (line   29)
* locals():                              Hook methods.       (line   21)
* LOG:                                   Computing aggregates.
                                                             (line   19)
* LOG <1>:                               Restoring counter values.
                                                             (line   46)
* LOG <2>:                               Restoring counter values.
                                                             (line   49)
* LOG <3>:                               Restoring counter values.
                                                             (line   52)
* LOG <4>:                               Restoring counter values.
                                                             (line   57)
* LOG <5>:                               Restoring counter values.
                                                             (line   61)
* LOG <6>:                               Restoring counter values.
                                                             (line   71)
* LOG <7>:                               Restoring counter values.
                                                             (line   73)
* LOG <8>:                               Restoring counter values.
                                                             (line   77)
* LOG <9>:                               Keywords.           (line  166)
* log files:                             Interpreting coNCePTuaL log files.
                                                             (line    6)
* log files <1>:                         Log-file format.    (line    6)
* log files <2>:                         ncptl-logextract.   (line    6)
* log files <3>:                         ncptl-logmerge.     (line    6)
* log files <4>:                         ncptl-logunmerge.   (line    6)
* log files <5>:                         Utilizing log-file comments.
                                                             (line    6)
* log files <6>:                         Writing to a log file.
                                                             (line    6)
* log files <7>:                         Log-file functions. (line    6)
* LOG10:                                 Built-in functions. (line   15)
* LOG10 <1>:                             Integer functions.  (line   27)
* LOG10 <2>:                             Floating-point functions.
                                                             (line   10)
* LOG10 <3>:                             Summary of the grammar.
                                                             (line   43)
* LOG10 <4>:                             Keywords.           (line  168)
* LOGS:                                  Components.         (line   55)
* LOGS <1>:                              The c_profile backend.
                                                             (line    8)
* LOGS <2>:                              Running coNCePTuaL programs.
                                                             (line  171)
* LOGS <3>:                              Interpreting coNCePTuaL log files.
                                                             (line    6)
* LOGS <4>:                              Evaluation contexts.
                                                             (line   16)
* LOGS <5>:                              Aggregate expressions.
                                                             (line    7)
* LOGS <6>:                              Writing to a log file.
                                                             (line   12)
* LOGS <7>:                              Writing to a log file.
                                                             (line   23)
* LOGS <8>:                              Writing to a log file.
                                                             (line   24)
* LOGS <9>:                              Writing to a log file.
                                                             (line   25)
* LOGS <10>:                             Writing to a log file.
                                                             (line   72)
* LOGS <11>:                             Writing to a log file.
                                                             (line   75)
* LOGS <12>:                             Writing to a log file.
                                                             (line   75)
* LOGS <13>:                             Writing to a log file.
                                                             (line   78)
* LOGS <14>:                             Counter and timer statements.
                                                             (line   23)
* LOGS <15>:                             Counted loops.      (line   19)
* LOGS <16>:                             Timed loops.        (line   31)
* LOGS <17>:                             Top-level statements and log files.
                                                             (line   23)
* LOGS <18>:                             Summary of the grammar.
                                                             (line  214)
* LOGS <19>:                             Generated code.     (line   31)
* LOGS <20>:                             Log-file functions. (line   13)
* LOGS <21>:                             Keywords.           (line  170)
* LOGS <22>:                             Environment Variables.
                                                             (line   39)
* LOG_AGGREGATE:                         Representing aggregate functions.
                                                             (line    6)
* log_stmt:                              Utilizing log-file comments.
                                                             (line    6)
* log_stmt <1>:                          Writing to a log file.
                                                             (line    8)
* log_stmt <2>:                          Writing to a log file.
                                                             (line   11)
* log_stmt <3>:                          Writing to a log file.
                                                             (line   16)
* log_stmt <4>:                          Writing to a log file.
                                                             (line   28)
* log_stmt <5>:                          Writing to a log file.
                                                             (line   53)
* log_stmt <6>:                          Writing to a log file.
                                                             (line   56)
* log_stmt <7>:                          Writing to a log file.
                                                             (line   59)
* log_stmt <8>:                          Complex statements. (line   38)
* log_stmt <9>:                          Summary of the grammar.
                                                             (line  213)
* log_stmt <10>:                         Summary of the grammar.
                                                             (line  247)
* log_write_prologue_timer:              Time-related functions.
                                                             (line   30)
* Loop (GUI button):                     Command bar.        (line   15)
* loops:                                 Iterating.          (line    6)
* loops <1>:                             Counted loops.      (line    6)
* loops <2>:                             Range loops.        (line    6)
* loops <3>:                             Timed loops.        (line    6)
* lspci:                                 Running coNCePTuaL programs.
                                                             (line   67)
* lt_cv_sys_max_cmd_len:                 Checking maximum line length is slow.
                                                             (line   19)
* M-x font-lock-mode:                    Installing stylesheets.
                                                             (line   50)
* machine/hal_sysinfo.h:                 Cache Variables.    (line  213)
* make:                                  Installation.       (line   73)
* make <1>:                              make.               (line    6)
* make <2>:                              make.               (line    6)
* make <3>:                              make.               (line   13)
* make <4>:                              make.               (line   39)
* make <5>:                              make.               (line   65)
* make <6>:                              make.               (line  156)
* make <7>:                              Validating the coNCePTuaL timer.
                                                             (line    6)
* make <8>:                              make install.       (line    9)
* make <9>:                              make install.       (line   11)
* make <10>:                             make install.       (line   17)
* make <11>:                             Build process.      (line   17)
* make <12>:                             Cross-compilation.  (line   61)
* make <13>:                             Running without installing.
                                                             (line   23)
* make <14>:                             present but cannot be compiled.
                                                             (line   22)
* make <15>:                             Manual configuration.
                                                             (line   13)
* make <16>:                             Manual configuration.
                                                             (line   15)
* make <17>:                             Problems with make. (line    7)
* make <18>:                             Too many columns in multitable item.
                                                             (line    9)
* make <19>:                             Can't find compiler_version.h.
                                                             (line    6)
* make <20>:                             Can't find compiler_version.h.
                                                             (line    8)
* make <21>:                             Can't find compiler_version.h.
                                                             (line   13)
* make <22>:                             Compaq compilers on Alpha CPUs.
                                                             (line   55)
* make <23>:                             Building on problematic platforms.
                                                             (line   20)
* make <24>:                             Building on problematic platforms.
                                                             (line   22)
* make <25>:                             ``cannot open shared object file''.
                                                             (line   28)
* make <26>:                             ``cannot open shared object file''.
                                                             (line   55)
* make <27>:                             Cache Variables.    (line  382)
* make all:                              make.               (line  154)
* make check:                            Installation.       (line    8)
* make check <1>:                        make.               (line   12)
* make check <2>:                        make.               (line   14)
* make check <3>:                        make.               (line   16)
* make check <4>:                        Cross-compilation.  (line   64)
* make check <5>:                        Cross-compilation.  (line   67)
* make check <6>:                        Cross-compilation.  (line   70)
* make check <7>:                        Cross-compilation.  (line   78)
* make clean:                            make.               (line   37)
* make clean <1>:                        make.               (line   39)
* make clean <2>:                        ``cannot open shared object file''.
                                                             (line   55)
* make dist:                             make.               (line  149)
* make distclean:                        make.               (line   38)
* make distclean <1>:                    make.               (line   40)
* make docbook:                          make.               (line   72)
* make empty.log:                        make.               (line   98)
* make empty.log <1>:                    Reporting configuration information.
                                                             (line   15)
* make gui:                              make.               (line  168)
* make gui <1>:                          make.               (line  174)
* make info:                             make.               (line   70)
* make install:                          Typesetting conventions.
                                                             (line   21)
* make install <1>:                      Installation.       (line   73)
* make install <2>:                      configure.          (line   31)
* make install <3>:                      configure.          (line   31)
* make install <4>:                      make.               (line   59)
* make install <5>:                      make.               (line   60)
* make install <6>:                      make.               (line   64)
* make install <7>:                      make install.       (line    6)
* make install <8>:                      make install.       (line    6)
* make install <9>:                      make install.       (line    8)
* make install <10>:                     Running without installing.
                                                             (line    6)
* make install <11>:                     Can't find compiler_version.h.
                                                             (line    7)
* make install <12>:                     Can't find compiler_version.h.
                                                             (line   13)
* make install <13>:                     ``cannot open shared object file''.
                                                             (line   30)
* make install <14>:                     ``cannot open shared object file''.
                                                             (line   55)
* make maintainer-clean:                 make.               (line   39)
* make maintainer-clean <1>:             make.               (line   43)
* make maintainer-clean <2>:             make.               (line   44)
* make modulefile:                       make.               (line  123)
* make modulefile <1>:                   make.               (line  124)
* make modulefile <2>:                   make.               (line  143)
* make ncptl-logextract.html:            make.               (line   79)
* make ncptl-logextract.html <1>:        make.               (line   86)
* make ncptl-mode.vim:                   make.               (line  114)
* make pdf:                              make.               (line   71)
* make stylesheets:                      make.               (line  104)
* make stylesheets <1>:                  make.               (line  107)
* make stylesheets <2>:                  Installing stylesheets.
                                                             (line    6)
* make tags:                             make.               (line  159)
* make uninstall:                        make.               (line   64)
* make uninstall <1>:                    ``cannot open shared object file''.
                                                             (line   55)
* Makefile:                              configure.          (line    9)
* Makefile <1>:                          configure.          (line   33)
* Makefile <2>:                          make.               (line    7)
* Makefile <3>:                          make.               (line  116)
* Makefile <4>:                          make install.       (line   20)
* Makefile <5>:                          make install.       (line   25)
* Makefile <6>:                          Build process.      (line   13)
* Makefile <7>:                          Manual configuration.
                                                             (line   51)
* Makefile <8>:                          Failure following "missing" check.
                                                             (line    6)
* Makefile <9>:                          Failure following "missing" check.
                                                             (line   26)
* Makefile <10>:                         Building on problematic platforms.
                                                             (line    7)
* Makefile <11>:                         Building on problematic platforms.
                                                             (line   11)
* Makefile <12>:                         Building on problematic platforms.
                                                             (line   19)
* Makefile.am:                           Build process.      (line   12)
* Makefile.am <1>:                       Build process.      (line   23)
* Makefile.am <2>:                       Building on problematic platforms.
                                                             (line   10)
* Makefile.in:                           Manual configuration.
                                                             (line   51)
* Makefile.in <1>:                       Failure following "missing" check.
                                                             (line    9)
* Makefile.simple:                       Manual configuration.
                                                             (line   45)
* Makefile.simple <1>:                   Manual configuration.
                                                             (line   50)
* Makefile.simple <2>:                   Building on problematic platforms.
                                                             (line   16)
* Makefile.simple <3>:                   Building on problematic platforms.
                                                             (line   18)
* Makefile.simple <4>:                   Building on problematic platforms.
                                                             (line   24)
* Makefile.simple.in:                    Manual configuration.
                                                             (line   44)
* Makefile.simple.in <1>:                Building on problematic platforms.
                                                             (line   17)
* makehelper.py:                         undefined type found DEFINE____.
                                                             (line    8)
* makehelper.py <1>:                     "makehelper.py config" fails.
                                                             (line    6)
* makehelper.py <2>:                     "makehelper.py config" fails.
                                                             (line   13)
* makehelper.py <3>:                     "makehelper.py config" fails.
                                                             (line   18)
* makeinfo:                              Too many columns in multitable item.
                                                             (line    6)
* malloc:                                Memory-allocation functions.
                                                             (line   55)
* MANPATH:                               make.               (line  129)
* manual configuration:                  Manual configuration.
                                                             (line    6)
* math:                                  The latex_vis backend.
                                                             (line  156)
* MAX:                                   Built-in functions. (line   15)
* MAX <1>:                               Integer functions.  (line   32)
* MAX <2>:                               Integer functions.  (line   33)
* MAX <3>:                               Summary of the grammar.
                                                             (line   43)
* MAX <4>:                               Keywords.           (line  172)
* MAXIMUM:                               Aggregate functions.
                                                             (line   11)
* MAXIMUM <1>:                           Summary of the grammar.
                                                             (line   60)
* MAXIMUM <2>:                           Keywords.           (line  174)
* mcast_stmt:                            Multicasting.       (line   14)
* mcast_stmt <1>:                        Multicasting.       (line   19)
* mcast_stmt <2>:                        Multicasting.       (line   31)
* mcast_stmt <3>:                        Multicasting.       (line   32)
* mcast_stmt <4>:                        Complex statements. (line   34)
* mcast_stmt <5>:                        Summary of the grammar.
                                                             (line  187)
* mcast_stmt <6>:                        Summary of the grammar.
                                                             (line  243)
* MEAN:                                  Aggregate functions.
                                                             (line    9)
* MEAN <1>:                              Aggregate functions.
                                                             (line   13)
* MEAN <2>:                              Summary of the grammar.
                                                             (line   58)
* MEAN <3>:                              Keywords.           (line  176)
* Measure (GUI button):                  Command bar.        (line   18)
* MEDIAN:                                Aggregate functions.
                                                             (line    9)
* MEDIAN <1>:                            Aggregate functions.
                                                             (line   13)
* MEDIAN <2>:                            Aggregate functions.
                                                             (line   15)
* MEDIAN <3>:                            Computing aggregates.
                                                             (line   13)
* MEDIAN <4>:                            Summary of the grammar.
                                                             (line   58)
* MEDIAN <5>:                            Keywords.           (line  178)
* MEDIAN ABSOLUTE DEVIATION:             Aggregate functions.
                                                             (line   10)
* MEDIAN ABSOLUTE DEVIATION <1>:         Summary of the grammar.
                                                             (line   59)
* Mediawiki:                             Installing stylesheets.
                                                             (line  104)
* Mediawiki <1>:                         Referenced Applications.
                                                             (line   31)
* MEGABYTE:                              Item size.          (line   19)
* MEGABYTE <1>:                          Item size.          (line   40)
* MEGABYTE <2>:                          Summary of the grammar.
                                                             (line  160)
* MEGABYTE <3>:                          Keywords.           (line  180)
* MEMORY:                                Keywords.           (line  182)
* memory efficiency:                     Memory efficiency.  (line    6)
* MEMORY REGION:                         Simulating computation.
                                                             (line   17)
* MEMORY REGION <1>:                     Summary of the grammar.
                                                             (line  284)
* memory-allocation functions:           Memory-allocation functions.
                                                             (line    6)
* memory.h:                              Cache Variables.    (line  216)
* menus, GUI:                            Menu bar.           (line    6)
* menus, GUI <1>:                        Menu bar.           (line   15)
* menus, GUI <2>:                        Menu bar.           (line   18)
* menus, GUI <3>:                        Menu bar.           (line   22)
* menus, GUI <4>:                        Menu bar.           (line   27)
* mesh functions:                        Mesh/torus functions.
                                                             (line    6)
* MESH_COORDINATE:                       Built-in functions. (line   19)
* MESH_COORDINATE <1>:                   Mesh/torus functions.
                                                             (line    6)
* MESH_COORDINATE <2>:                   Mesh/torus functions.
                                                             (line   13)
* MESH_COORDINATE <3>:                   Mesh/torus functions.
                                                             (line   41)
* MESH_COORDINATE <4>:                   Mesh/torus functions.
                                                             (line   42)
* MESH_COORDINATE <5>:                   Mesh/torus functions.
                                                             (line   64)
* MESH_COORDINATE <6>:                   Mesh/torus functions.
                                                             (line   68)
* MESH_COORDINATE <7>:                   Mesh/torus functions.
                                                             (line   75)
* MESH_COORDINATE <8>:                   Mesh/torus functions.
                                                             (line  113)
* MESH_COORDINATE <9>:                   Mesh/torus functions.
                                                             (line  128)
* MESH_COORDINATE <10>:                  Mesh/torus functions.
                                                             (line  192)
* MESH_COORDINATE <11>:                  Summary of the grammar.
                                                             (line   47)
* MESH_COORDINATE <12>:                  Keywords.           (line  184)
* MESH_DISTANCE:                         Built-in functions. (line   19)
* MESH_DISTANCE <1>:                     Mesh/torus functions.
                                                             (line    7)
* MESH_DISTANCE <2>:                     Mesh/torus functions.
                                                             (line   13)
* MESH_DISTANCE <3>:                     Mesh/torus functions.
                                                             (line   55)
* MESH_DISTANCE <4>:                     Mesh/torus functions.
                                                             (line   64)
* MESH_DISTANCE <5>:                     Mesh/torus functions.
                                                             (line   68)
* MESH_DISTANCE <6>:                     Mesh/torus functions.
                                                             (line  129)
* MESH_DISTANCE <7>:                     Mesh/torus functions.
                                                             (line  192)
* MESH_DISTANCE <8>:                     Summary of the grammar.
                                                             (line   47)
* MESH_DISTANCE <9>:                     Keywords.           (line  186)
* MESH_NEIGHBOR:                         Built-in functions. (line   19)
* MESH_NEIGHBOR <1>:                     Mesh/torus functions.
                                                             (line    6)
* MESH_NEIGHBOR <2>:                     Mesh/torus functions.
                                                             (line   13)
* MESH_NEIGHBOR <3>:                     Mesh/torus functions.
                                                             (line   27)
* MESH_NEIGHBOR <4>:                     Mesh/torus functions.
                                                             (line   36)
* MESH_NEIGHBOR <5>:                     Mesh/torus functions.
                                                             (line   64)
* MESH_NEIGHBOR <6>:                     Mesh/torus functions.
                                                             (line   68)
* MESH_NEIGHBOR <7>:                     Mesh/torus functions.
                                                             (line   75)
* MESH_NEIGHBOR <8>:                     Mesh/torus functions.
                                                             (line  113)
* MESH_NEIGHBOR <9>:                     Mesh/torus functions.
                                                             (line  128)
* MESH_NEIGHBOR <10>:                    Mesh/torus functions.
                                                             (line  191)
* MESH_NEIGHBOR <11>:                    Summary of the grammar.
                                                             (line   47)
* MESH_NEIGHBOR <12>:                    Using out-of-bound task IDs to simplify code.
                                                             (line   45)
* MESH_NEIGHBOR <13>:                    Keywords.           (line  188)
* MESSAGE:                               Keywords.           (line  190)
* message alignment:                     Message alignment.  (line    6)
* MESSAGE BUFFER:                        Priming message buffers.
                                                             (line   18)
* MESSAGE BUFFER <1>:                    Summary of the grammar.
                                                             (line  291)
* message buffers:                       Buffer control.     (line    6)
* message buffers <1>:                   Priming message buffers.
                                                             (line    6)
* message buffers <2>:                   Message-buffer manipulation functions.
                                                             (line    6)
* message ordering:                      Tag matching.       (line    6)
* Message Passing Interface (MPI):       Motivation.         (line   54)
* Message Passing Interface (MPI) <1>:   configure.          (line   79)
* Message Passing Interface (MPI) <2>:   configure.          (line   88)
* Message Passing Interface (MPI) <3>:   configure.          (line   88)
* Message Passing Interface (MPI) <4>:   configure.          (line   93)
* Message Passing Interface (MPI) <5>:   configure.          (line   99)
* Message Passing Interface (MPI) <6>:   configure.          (line  136)
* Message Passing Interface (MPI) <7>:   configure.          (line  137)
* Message Passing Interface (MPI) <8>:   Compiling coNCePTuaL programs.
                                                             (line   32)
* Message Passing Interface (MPI) <9>:   Supplied backends.  (line   13)
* Message Passing Interface (MPI) <10>:  The c_mpi backend.  (line    8)
* Message Passing Interface (MPI) <11>:  The c_mpi backend.  (line   14)
* Message Passing Interface (MPI) <12>:  The c_mpi backend.  (line   16)
* Message Passing Interface (MPI) <13>:  The c_mpi backend.  (line   21)
* Message Passing Interface (MPI) <14>:  The c_mpi backend.  (line   32)
* Message Passing Interface (MPI) <15>:  Command-line options for c_mpi.
                                                             (line   19)
* Message Passing Interface (MPI) <16>:  Implementation of reductions.
                                                             (line   15)
* Message Passing Interface (MPI) <17>:  Implementation of multicasts.
                                                             (line   10)
* Message Passing Interface (MPI) <18>:  Implementation of multicasts.
                                                             (line   14)
* Message Passing Interface (MPI) <19>:  Implementation of multicasts.
                                                             (line   15)
* Message Passing Interface (MPI) <20>:  The picl backend.   (line    8)
* Message Passing Interface (MPI) <21>:  The picl backend.   (line    9)
* Message Passing Interface (MPI) <22>:  Running coNCePTuaL programs.
                                                             (line    8)
* Message Passing Interface (MPI) <23>:  Calling MPI functions.
                                                             (line   23)
* Message Passing Interface (MPI) <24>:  Calling MPI functions.
                                                             (line   24)
* Message Passing Interface (MPI) <25>:  Problems with ``C compiler used for Python extension modules''.
                                                             (line   27)
* Message Passing Interface (MPI) <26>:  Incorrect tools/flags are utilized.
                                                             (line   14)
* message tags:                          Tag matching.       (line    6)
* MESSAGES:                              Message specifications.
                                                             (line   15)
* MESSAGES <1>:                          Message specifications.
                                                             (line   36)
* messages:                              Message specifications.
                                                             (line    6)
* MESSAGES <2>:                          Summary of the grammar.
                                                             (line  108)
* MESSAGES <3>:                          Summary of the grammar.
                                                             (line  122)
* MESSAGES <4>:                          Keywords.           (line  192)
* message_alignment:                     Message specifications.
                                                             (line   13)
* message_alignment <1>:                 Message specifications.
                                                             (line   14)
* message_alignment <2>:                 Message specifications.
                                                             (line   34)
* message_alignment <3>:                 Message specifications.
                                                             (line   35)
* message_alignment <4>:                 Message specifications.
                                                             (line   54)
* message_alignment <5>:                 Message specifications.
                                                             (line   55)
* message_alignment <6>:                 Message specifications.
                                                             (line   65)
* message_alignment <7>:                 Message specifications.
                                                             (line   66)
* message_alignment <8>:                 Message alignment.  (line    9)
* message_alignment <9>:                 Message alignment.  (line   12)
* message_alignment <10>:                Message alignment.  (line   16)
* message_alignment <11>:                Summary of the grammar.
                                                             (line  106)
* message_alignment <12>:                Summary of the grammar.
                                                             (line  107)
* message_alignment <13>:                Summary of the grammar.
                                                             (line  120)
* message_alignment <14>:                Summary of the grammar.
                                                             (line  121)
* message_alignment <15>:                Summary of the grammar.
                                                             (line  133)
* message_alignment <16>:                Summary of the grammar.
                                                             (line  134)
* message_alignment <17>:                Summary of the grammar.
                                                             (line  144)
* message_alignment <18>:                Summary of the grammar.
                                                             (line  145)
* message_alignment <19>:                Summary of the grammar.
                                                             (line  165)
* message_spec:                          Message specifications.
                                                             (line    9)
* message_spec <1>:                      Message specifications.
                                                             (line   23)
* message_spec <2>:                      Message specifications.
                                                             (line   49)
* message_spec <3>:                      Message specifications.
                                                             (line   75)
* message_spec <4>:                      Item count.         (line    6)
* message_spec <5>:                      Data touching.      (line    6)
* message_spec <6>:                      Data touching.      (line    7)
* message_spec <7>:                      Data touching.      (line    9)
* message_spec <8>:                      Sending.            (line   12)
* message_spec <9>:                      Sending.            (line   16)
* message_spec <10>:                     Sending.            (line   21)
* message_spec <11>:                     Sending.            (line   25)
* message_spec <12>:                     Receiving.          (line   15)
* message_spec <13>:                     Receiving.          (line   18)
* message_spec <14>:                     Receiving.          (line   51)
* message_spec <15>:                     Multicasting.       (line   16)
* message_spec <16>:                     Summary of the grammar.
                                                             (line  102)
* message_spec <17>:                     Summary of the grammar.
                                                             (line  170)
* message_spec <18>:                     Summary of the grammar.
                                                             (line  174)
* message_spec <19>:                     Summary of the grammar.
                                                             (line  181)
* message_spec <20>:                     Summary of the grammar.
                                                             (line  189)
* MICROSECOND:                           Keywords.           (line  194)
* MICROSECONDS:                          Delaying execution. (line   21)
* MICROSECONDS <1>:                      Summary of the grammar.
                                                             (line  279)
* MICROSECONDS <2>:                      Keywords.           (line  196)
* MILLISECOND:                           Keywords.           (line  198)
* MILLISECONDS:                          Delaying execution. (line   21)
* MILLISECONDS <1>:                      Summary of the grammar.
                                                             (line  279)
* MILLISECONDS <2>:                      Keywords.           (line  200)
* MIN:                                   Built-in functions. (line   15)
* MIN <1>:                               Integer functions.  (line   32)
* MIN <2>:                               Integer functions.  (line   33)
* MIN <3>:                               Summary of the grammar.
                                                             (line   43)
* MIN <4>:                               Keywords.           (line  202)
* MinGW:                                 "makehelper.py config" fails.
                                                             (line   11)
* MINIMUM:                               Aggregate functions.
                                                             (line   11)
* MINIMUM <1>:                           Summary of the grammar.
                                                             (line   60)
* MINIMUM <2>:                           Keywords.           (line  204)
* MINUTE:                                Keywords.           (line  206)
* MINUTES:                               Delaying execution. (line   21)
* MINUTES <1>:                           Summary of the grammar.
                                                             (line  279)
* MINUTES <2>:                           Keywords.           (line  208)
* MISALIGNED:                            Message specifications.
                                                             (line   14)
* MISALIGNED <1>:                        Message specifications.
                                                             (line   35)
* MISALIGNED <2>:                        Message specifications.
                                                             (line   55)
* MISALIGNED <3>:                        Message specifications.
                                                             (line   66)
* MISALIGNED <4>:                        Message alignment.  (line   23)
* MISALIGNED <5>:                        Message alignment.  (line   28)
* MISALIGNED <6>:                        Message alignment.  (line   31)
* MISALIGNED <7>:                        Summary of the grammar.
                                                             (line  107)
* MISALIGNED <8>:                        Summary of the grammar.
                                                             (line  121)
* MISALIGNED <9>:                        Summary of the grammar.
                                                             (line  134)
* MISALIGNED <10>:                       Summary of the grammar.
                                                             (line  145)
* MISALIGNED <11>:                       Keywords.           (line  210)
* missing:                               Failure following "missing" check.
                                                             (line   11)
* missing <1>:                           Failure following "missing" check.
                                                             (line   23)
* MOD:                                   Arithmetic expressions.
                                                             (line   13)
* MOD <1>:                               Arithmetic expressions.
                                                             (line   36)
* MOD <2>:                               Formal grammar for arithmetic expressions.
                                                             (line   22)
* MOD <3>:                               Summary of the grammar.
                                                             (line   23)
* MOD <4>:                               Keywords.           (line  212)
* module:                                make.               (line  146)
* module <1>:                            Incorrect tools/flags are utilized.
                                                             (line   15)
* MODULEPATH:                            make.               (line  136)
* mpi.h:                                 Cache Variables.    (line  219)
* MPICC:                                 configure.          (line  130)
* MPICC <1>:                             The c_mpi backend.  (line   21)
* MPICC <2>:                             The c_mpi backend.  (line   25)
* mpicc:                                 configure.          (line  137)
* MPICC <3>:                             Incorrect tools/flags are utilized.
                                                             (line   12)
* MPICFLAGS:                             The c_mpi backend.  (line   21)
* MPICFLAGS <1>:                         The c_mpi backend.  (line   27)
* MPICL:                                 The picl backend.   (line    8)
* MPICL <1>:                             The picl backend.   (line   13)
* MPICL <2>:                             Referenced Applications.
                                                             (line   33)
* MPICL <3>:                             Referenced Applications.
                                                             (line   39)
* MPICPPFLAGS:                           configure.          (line  131)
* MPICPPFLAGS <1>:                       The c_mpi backend.  (line   21)
* MPILDFLAGS:                            configure.          (line  132)
* MPILDFLAGS <1>:                        The c_mpi backend.  (line   21)
* MPILIBS:                               configure.          (line  133)
* MPILIBS <1>:                           The c_mpi backend.  (line   23)
* mpirun:                                The c_mpi backend.  (line   12)
* MPI_Allgather:                         Calling MPI functions.
                                                             (line   22)
* MPI_Allgather <1>:                     Calling MPI functions.
                                                             (line   59)
* MPI_Allgather <2>:                     Calling MPI functions.
                                                             (line   62)
* MPI_Allreduce:                         The c_mpi backend.  (line   33)
* MPI_Allreduce <1>:                     Implementation of reductions.
                                                             (line   10)
* MPI_Allreduce <2>:                     Implementation of reductions.
                                                             (line   16)
* MPI_Alltoallv:                         The c_mpi backend.  (line   33)
* MPI_Alltoallv <1>:                     Implementation of multicasts.
                                                             (line    9)
* MPI_Alltoallv <2>:                     Implementation of multicasts.
                                                             (line   30)
* MPI_Barrier:                           The c_mpi backend.  (line   33)
* MPI_Bcast:                             The c_mpi backend.  (line   33)
* MPI_Bcast <1>:                         Implementation of reductions.
                                                             (line   12)
* MPI_Bcast <2>:                         Implementation of multicasts.
                                                             (line    8)
* MPI_Bcast <3>:                         Implementation of multicasts.
                                                             (line   14)
* MPI_Bcast <4>:                         Implementation of multicasts.
                                                             (line   24)
* MPI_Comm_group:                        The c_mpi backend.  (line   34)
* MPI_Comm_rank:                         The c_mpi backend.  (line   34)
* MPI_Comm_size:                         The c_mpi backend.  (line   34)
* MPI_Comm_split:                        The c_mpi backend.  (line   35)
* MPI_Errhandler_create:                 The c_mpi backend.  (line   36)
* MPI_Errhandler_set:                    The c_mpi backend.  (line   36)
* MPI_Finalize:                          The c_mpi backend.  (line   36)
* MPI_Group_translate_ranks:             The c_mpi backend.  (line   37)
* MPI_Init:                              configure.          (line   97)
* MPI_Init <1>:                          configure.          (line  100)
* MPI_Init <2>:                          The c_mpi backend.  (line   37)
* MPI_Irecv:                             The c_mpi backend.  (line   37)
* MPI_Irecv <1>:                         Command-line options for c_mpi.
                                                             (line   10)
* MPI_Isend:                             The c_mpi backend.  (line   38)
* MPI_Isend <1>:                         Command-line options for c_mpi.
                                                             (line   10)
* MPI_Recv:                              The c_mpi backend.  (line   38)
* MPI_Recv <1>:                          Command-line options for c_mpi.
                                                             (line   12)
* MPI_Reduce:                            The c_mpi backend.  (line   38)
* MPI_Reduce <1>:                        Implementation of reductions.
                                                             (line    8)
* MPI_Reduce <2>:                        Implementation of reductions.
                                                             (line   11)
* MPI_Reduce <3>:                        Implementation of reductions.
                                                             (line   15)
* MPI_Send:                              The c_mpi backend.  (line   38)
* MPI_Send <1>:                          Command-line options for c_mpi.
                                                             (line   11)
* MPI_Send <2>:                          Command-line options for c_mpi.
                                                             (line   16)
* MPI_Send <3>:                          Command-line options for c_mpi.
                                                             (line   20)
* MPI_Ssend:                             The c_mpi backend.  (line   39)
* MPI_Ssend <1>:                         Command-line options for c_mpi.
                                                             (line   18)
* MPI_Ssend <2>:                         Command-line options for c_mpi.
                                                             (line   22)
* MPI_SUM:                               Command-line options for c_mpi.
                                                             (line   25)
* MPI_Waitall:                           The c_mpi backend.  (line   40)
* MPI_Wtime:                             configure.          (line   78)
* MPI_Wtime <1>:                         configure.          (line   81)
* MPI_Wtime <2>:                         configure.          (line   92)
* MPI_Wtime <3>:                         configure.          (line   93)
* MPI_Wtime <4>:                         configure.          (line   96)
* MPI_Wtime <5>:                         configure.          (line  100)
* MPI_Wtime <6>:                         configure.          (line  104)
* MPI_Wtime <7>:                         The c_mpi backend.  (line   43)
* MPI_Wtime <8>:                         Time-related functions.
                                                             (line   47)
* msgdigest:                             Cache Variables.    (line  384)
* msgs_received:                         Predeclared variables.
                                                             (line   17)
* msgs_received <1>:                     Predeclared variables.
                                                             (line   43)
* msgs_sent:                             Predeclared variables.
                                                             (line   19)
* msgs_sent <1>:                         Predeclared variables.
                                                             (line   37)
* MULTICAST:                             Components.         (line   70)
* MULTICAST <1>:                         Implementation of multicasts.
                                                             (line    6)
* MULTICAST <2>:                         Implementation of multicasts.
                                                             (line    8)
* MULTICAST <3>:                         Keywords.           (line  214)
* Multicast (GUI button):                Command bar.        (line   47)
* multicast-tree benchmark:              Multicast trees.    (line    6)
* MULTICASTS:                            Multicasting.       (line   15)
* MULTICASTS <1>:                        Multicasting.       (line   20)
* MULTICASTS <2>:                        Multicasting.       (line   35)
* MULTICASTS <3>:                        Summary of the grammar.
                                                             (line  188)
* MULTICASTS <4>:                        Calling MPI functions.
                                                             (line   55)
* MULTICASTS <5>:                        Keywords.           (line  216)
* MULTICASTS <6>:                        Predeclared variables.
                                                             (line   48)
* multipliers:                           Primitives.         (line   61)
* multipliers <1>:                       Primitives.         (line   77)
* mult_expr:                             Formal grammar for arithmetic expressions.
                                                             (line   13)
* mult_expr <1>:                         Formal grammar for arithmetic expressions.
                                                             (line   14)
* mult_expr <2>:                         Formal grammar for arithmetic expressions.
                                                             (line   15)
* mult_expr <3>:                         Formal grammar for arithmetic expressions.
                                                             (line   16)
* mult_expr <4>:                         Formal grammar for arithmetic expressions.
                                                             (line   17)
* mult_expr <5>:                         Formal grammar for arithmetic expressions.
                                                             (line   19)
* mult_expr <6>:                         Formal grammar for arithmetic expressions.
                                                             (line   20)
* mult_expr <7>:                         Formal grammar for arithmetic expressions.
                                                             (line   21)
* mult_expr <8>:                         Formal grammar for arithmetic expressions.
                                                             (line   22)
* mult_expr <9>:                         Formal grammar for arithmetic expressions.
                                                             (line   23)
* mult_expr <10>:                        Formal grammar for arithmetic expressions.
                                                             (line   24)
* mult_expr <11>:                        Formal grammar for arithmetic expressions.
                                                             (line   25)
* mult_expr <12>:                        Summary of the grammar.
                                                             (line   14)
* mult_expr <13>:                        Summary of the grammar.
                                                             (line   15)
* mult_expr <14>:                        Summary of the grammar.
                                                             (line   16)
* mult_expr <15>:                        Summary of the grammar.
                                                             (line   17)
* mult_expr <16>:                        Summary of the grammar.
                                                             (line   18)
* mult_expr <17>:                        Summary of the grammar.
                                                             (line   20)
* mult_expr <18>:                        Summary of the grammar.
                                                             (line   21)
* mult_expr <19>:                        Summary of the grammar.
                                                             (line   22)
* mult_expr <20>:                        Summary of the grammar.
                                                             (line   23)
* mult_expr <21>:                        Summary of the grammar.
                                                             (line   24)
* mult_expr <22>:                        Summary of the grammar.
                                                             (line   25)
* mult_expr <23>:                        Summary of the grammar.
                                                             (line   26)
* MY:                                    Keywords.           (line  218)
* nanosleep:                             Time-related functions.
                                                             (line  148)
* nanosleep <1>:                         Time-related functions.
                                                             (line  150)
* nanosleep <2>:                         Cache Variables.    (line   87)
* nanosleep <3>:                         Cache Variables.    (line  396)
* ncptl:                                 Compiling coNCePTuaL programs.
                                                             (line   25)
* ncptl <1>:                             Compiling coNCePTuaL programs.
                                                             (line   29)
* ncptl <2>:                             Compiling coNCePTuaL programs.
                                                             (line   38)
* ncptl <3>:                             Compiling coNCePTuaL programs.
                                                             (line   45)
* ncptl <4>:                             Running without installing.
                                                             (line   24)
* ncptl <5>:                             Compiling coNCePTuaL programs.
                                                             (line    6)
* ncptl <6>:                             Compiling coNCePTuaL programs.
                                                             (line   31)
* ncptl <7>:                             Compiling coNCePTuaL programs.
                                                             (line   50)
* ncptl <8>:                             Compiling coNCePTuaL programs.
                                                             (line   54)
* ncptl <9>:                             Compiling coNCePTuaL programs.
                                                             (line   61)
* ncptl <10>:                            Compiling coNCePTuaL programs.
                                                             (line   69)
* ncptl <11>:                            Compiling coNCePTuaL programs.
                                                             (line   85)
* ncptl <12>:                            Compiling coNCePTuaL programs.
                                                             (line  116)
* ncptl <13>:                            Compiling coNCePTuaL programs.
                                                             (line  143)
* ncptl <14>:                            Compiling coNCePTuaL programs.
                                                             (line  145)
* ncptl <15>:                            Compiling coNCePTuaL programs.
                                                             (line  147)
* ncptl <16>:                            Compiling coNCePTuaL programs.
                                                             (line  149)
* ncptl <17>:                            Compiling coNCePTuaL programs.
                                                             (line  151)
* ncptl <18>:                            Compiling coNCePTuaL programs.
                                                             (line  153)
* ncptl <19>:                            The c_mpi backend.  (line   14)
* ncptl <20>:                            The c_mpi backend.  (line   16)
* ncptl <21>:                            Command-line options for c_mpi.
                                                             (line    6)
* ncptl <22>:                            The c_udgram backend.
                                                             (line   16)
* ncptl <23>:                            The c_udgram backend.
                                                             (line   21)
* ncptl <24>:                            Command-line options for c_trace.
                                                             (line    6)
* ncptl <25>:                            The dot_ast backend.
                                                             (line  132)
* ncptl <26>:                            The dot_ast backend.
                                                             (line  239)
* ncptl <27>:                            The libsea_ast backend.
                                                             (line   29)
* ncptl <28>:                            Backend creation.   (line   39)
* ncptl <29>:                            Backend creation.   (line   61)
* ncptl <30>:                            Backend creation.   (line   67)
* ncptl <31>:                            Backend creation.   (line   73)
* ncptl <32>:                            Backend creation.   (line   76)
* ncptl <33>:                            Backend creation.   (line   79)
* ncptl <34>:                            Incorrect tools/flags are utilized.
                                                             (line    9)
* ncptl <35>:                            ``TeX capacity exceeded''.
                                                             (line   28)
* ncptl <36>:                            Environment Variables.
                                                             (line    6)
* ncptl <37>:                            Environment Variables.
                                                             (line   12)
* ncptl-logextract:                      make.               (line   79)
* ncptl-logextract <1>:                  make.               (line   81)
* ncptl-logextract <2>:                  make.               (line   83)
* ncptl-logextract <3>:                  make.               (line   84)
* ncptl-logextract <4>:                  make.               (line   90)
* ncptl-logextract <5>:                  Interpreting coNCePTuaL log files.
                                                             (line   10)
* ncptl-logextract <6>:                  ncptl-logextract.   (line    7)
* ncptl-logextract <7>:                  ncptl-logextract.   (line   10)
* ncptl-logextract <8>:                  ncptl-logextract.   (line   15)
* ncptl-logextract <9>:                  ncptl-logextract.   (line   21)
* ncptl-logextract <10>:                 Cache Variables.    (line  470)
* ncptl-logextract.html:                 make.               (line   89)
* ncptl-logmerge:                        Running coNCePTuaL programs.
                                                             (line  179)
* ncptl-logmerge <1>:                    ncptl-logmerge.     (line    9)
* ncptl-logmerge <2>:                    ncptl-logmerge.     (line   12)
* ncptl-logmerge <3>:                    ncptl-logmerge.     (line   14)
* ncptl-logmerge <4>:                    ncptl-logmerge.     (line   18)
* ncptl-logmerge <5>:                    ncptl-logmerge.     (line   23)
* ncptl-logmerge <6>:                    ncptl-logmerge.     (line   29)
* ncptl-logmerge <7>:                    ncptl-logunmerge.   (line    6)
* ncptl-logunmerge:                      ncptl-logunmerge.   (line    8)
* ncptl-logunmerge <1>:                  ncptl-logunmerge.   (line   13)
* ncptl-logunmerge <2>:                  ncptl-logunmerge.   (line   19)
* ncptl-mode.el:                         make.               (line  109)
* ncptl-mode.el <1>:                     Installing stylesheets.
                                                             (line   36)
* ncptl-mode.el <2>:                     Installing stylesheets.
                                                             (line   38)
* ncptl-mode.elc:                        make.               (line  111)
* ncptl-mode.elc <1>:                    Installing stylesheets.
                                                             (line   37)
* ncptl-mode.elc <2>:                    Installing stylesheets.
                                                             (line   38)
* ncptl-mode.vim:                        make.               (line  115)
* ncptl-replaytrace:                     Offline tracing with curses.
                                                             (line   12)
* ncptl-replaytrace <1>:                 Offline tracing with curses.
                                                             (line   17)
* ncptl-replaytrace <2>:                 Offline tracing with curses.
                                                             (line   37)
* ncptl-replaytrace <3>:                 Offline tracing with curses.
                                                             (line   41)
* ncptl.h:                               pkg-config.         (line   11)
* ncptl.h <1>:                           Build process.      (line   11)
* ncptl.h <2>:                           Variables and data types.
                                                             (line   15)
* ncptl.h <3>:                           Initialization functions.
                                                             (line   12)
* ncptl.h <4>:                           Running without installing.
                                                             (line   17)
* ncptl.h <5>:                           Manual configuration.
                                                             (line   43)
* ncptl.h <6>:                           Representing aggregate functions.
                                                             (line    6)
* ncptl.h.in:                            Build process.      (line   10)
* ncptl.lang:                            make.               (line  112)
* ncptl.lang <1>:                        Installing stylesheets.
                                                             (line   66)
* ncptl.lang <2>:                        Installing stylesheets.
                                                             (line   68)
* ncptl.pc:                              pkg-config.         (line   13)
* ncptl.pc <1>:                          pkg-config.         (line   16)
* ncptl.php:                             make.               (line  113)
* ncptl.php <1>:                         Installing stylesheets.
                                                             (line   77)
* ncptl.php <2>:                         Installing stylesheets.
                                                             (line   79)
* ncptl.php <3>:                         Installing stylesheets.
                                                             (line  105)
* ncptl.py:                              Compiler.           (line    8)
* ncptl.py <1>:                          A minimal C-based backend.
                                                             (line   15)
* ncptl.py <2>:                          Internals.          (line   36)
* ncptl.ssh:                             make.               (line  109)
* ncptl.ssh <1>:                         Installing stylesheets.
                                                             (line   28)
* ncptl.ssh <2>:                         Installing stylesheets.
                                                             (line   30)
* ncptl.sty:                             make.               (line  108)
* ncptl.sty <1>:                         Installing stylesheets.
                                                             (line   12)
* ncptl.sty <2>:                         Installing stylesheets.
                                                             (line   13)
* ncptl.sty <3>:                         Installing stylesheets.
                                                             (line   20)
* ncptl.vim:                             make.               (line  111)
* ncptl.vim <1>:                         Installing stylesheets.
                                                             (line   54)
* ncptl.vim <2>:                         Installing stylesheets.
                                                             (line   56)
* ncptlGUI-1.5.1.jar:                    make.               (line  168)
* ncptlGUI-1.5.1.jar <1>:                The coNCePTuaL GUI. (line   21)
* ncptl_allocate_task_map:               Task-mapping functions.
                                                             (line    8)
* ncptl_allocate_task_map <1>:           Task-mapping functions.
                                                             (line   22)
* ncptl_allocate_task_map <2>:           Task-mapping functions.
                                                             (line   27)
* ncptl_assign_processor:                Task-mapping functions.
                                                             (line   33)
* ncptl_assign_processor <1>:            Task-mapping functions.
                                                             (line   36)
* ncptl_ast.py:                          Compiler.           (line   14)
* ncptl_ast.py <1>:                      Backend creation.   (line   24)
* NCPTL_BACKEND:                         Compiling coNCePTuaL programs.
                                                             (line   28)
* NCPTL_BACKEND <1>:                     Environment Variables.
                                                             (line   10)
* NCPTL_BACKEND <2>:                     Environment Variables.
                                                             (line   11)
* NCPTL_CHECKPOINT:                      Problems running.   (line   12)
* NCPTL_CHECKPOINT <1>:                  Extremely noisy measurements.
                                                             (line   17)
* NCPTL_CHECKPOINT <2>:                  Extremely noisy measurements.
                                                             (line   21)
* NCPTL_CHECKPOINT <3>:                  Environment Variables.
                                                             (line   26)
* NCPTL_CHECKPOINT <4>:                  Environment Variables.
                                                             (line   41)
* NCPTL_CHECKPOINT <5>:                  Environment Variables.
                                                             (line   49)
* NCPTL_CHECKPOINT <6>:                  Environment Variables.
                                                             (line   51)
* NCPTL_CMDLINE:                         Variables and data types.
                                                             (line   39)
* NCPTL_CMDLINE <1>:                     Variables and data types.
                                                             (line   39)
* NCPTL_CodeGen:                         Backend creation.   (line   16)
* NCPTL_CodeGen <1>:                     Backend creation.   (line   16)
* NCPTL_CodeGen <2>:                     Backend creation.   (line   32)
* NCPTL_CodeGen <3>:                     Backend creation.   (line   40)
* NCPTL_CodeGen <4>:                     Backend creation.   (line   82)
* NCPTL_CodeGen <5>:                     Hook methods.       (line   10)
* NCPTL_CodeGen <6>:                     Hook methods.       (line   14)
* NCPTL_CodeGen <7>:                     A minimal C-based backend.
                                                             (line    6)
* NCPTL_CodeGen <8>:                     A minimal C-based backend.
                                                             (line    8)
* NCPTL_CodeGen <9>:                     A minimal C-based backend.
                                                             (line   16)
* NCPTL_CodeGen <10>:                    Internals.          (line   34)
* NCPTL_CodeGen <11>:                    Internals.          (line   38)
* NCPTL_CodeGen <12>:                    Internals.          (line   99)
* ncptl_conditionally_copy_task_map:     Task-mapping functions.
                                                             (line   17)
* ncptl_dfunc_abs:                       Integer-function descriptions.
                                                             (line   56)
* ncptl_dfunc_bits:                      Integer-function descriptions.
                                                             (line   27)
* ncptl_dfunc_bits <1>:                  Integer-function descriptions.
                                                             (line   28)
* ncptl_dfunc_cbrt:                      Integer-function descriptions.
                                                             (line   14)
* ncptl_dfunc_cbrt <1>:                  Integer-function descriptions.
                                                             (line   15)
* ncptl_dfunc_ceiling:                   Floating-point-function descriptions.
                                                             (line   14)
* ncptl_dfunc_factor10:                  Integer-function descriptions.
                                                             (line   50)
* ncptl_dfunc_floor:                     Floating-point-function descriptions.
                                                             (line    8)
* ncptl_dfunc_knomial_child:             Topology-function descriptions.
                                                             (line   63)
* ncptl_dfunc_knomial_parent:            Topology-function descriptions.
                                                             (line   55)
* ncptl_dfunc_log10:                     Integer-function descriptions.
                                                             (line   44)
* ncptl_dfunc_max:                       Integer-function descriptions.
                                                             (line   83)
* ncptl_dfunc_mesh_coord:                Topology-function descriptions.
                                                             (line   26)
* ncptl_dfunc_mesh_neighbor:             Topology-function descriptions.
                                                             (line   37)
* ncptl_dfunc_min:                       Integer-function descriptions.
                                                             (line   77)
* ncptl_dfunc_modulo:                    Integer-function descriptions.
                                                             (line   68)
* ncptl_dfunc_modulo <1>:                Integer-function descriptions.
                                                             (line   69)
* ncptl_dfunc_power:                     Integer-function descriptions.
                                                             (line   62)
* ncptl_dfunc_random_gaussian:           Random-number-function descriptions.
                                                             (line   17)
* ncptl_dfunc_random_pareto:             Random-number-function descriptions.
                                                             (line   29)
* ncptl_dfunc_random_poisson:            Random-number-function descriptions.
                                                             (line   22)
* ncptl_dfunc_random_uniform:            Random-number-function descriptions.
                                                             (line   10)
* ncptl_dfunc_root:                      Integer-function descriptions.
                                                             (line   20)
* ncptl_dfunc_round:                     Floating-point-function descriptions.
                                                             (line   20)
* ncptl_dfunc_shift_left:                Integer-function descriptions.
                                                             (line   34)
* ncptl_dfunc_shift_left <1>:            Integer-function descriptions.
                                                             (line   35)
* ncptl_dfunc_shift_right:               Integer-function descriptions.
                                                             (line   38)
* ncptl_dfunc_sqrt:                      Integer-function descriptions.
                                                             (line    8)
* ncptl_dfunc_sqrt <1>:                  Integer-function descriptions.
                                                             (line    9)
* ncptl_dfunc_tree_child:                Topology-function descriptions.
                                                             (line   19)
* ncptl_dfunc_tree_parent:               Topology-function descriptions.
                                                             (line   13)
* ncptl_fast_init:                       Variables and data types.
                                                             (line   70)
* NCPTL_FAST_INIT:                       Variables and data types.
                                                             (line   83)
* NCPTL_FAST_INIT <1>:                   Environment Variables.
                                                             (line   55)
* NCPTL_FAST_INIT <2>:                   Environment Variables.
                                                             (line   57)
* NCPTL_FAST_INIT <3>:                   Environment Variables.
                                                             (line   61)
* ncptl_fast_init <1>:                   Variables and data types.
                                                             (line   71)
* ncptl_fast_init <2>:                   Variables and data types.
                                                             (line   76)
* ncptl_fast_init <3>:                   Variables and data types.
                                                             (line   81)
* ncptl_fatal:                           Memory-allocation functions.
                                                             (line   11)
* ncptl_fatal <1>:                       Memory-allocation functions.
                                                             (line   20)
* ncptl_fatal <2>:                       Memory-allocation functions.
                                                             (line   29)
* ncptl_fatal <3>:                       Memory-allocation functions.
                                                             (line   47)
* ncptl_fatal <4>:                       Finalization functions.
                                                             (line   15)
* ncptl_fatal <5>:                       Finalization functions.
                                                             (line   15)
* ncptl_fill_buffer:                     Message-buffer manipulation functions.
                                                             (line   12)
* ncptl_fill_buffer <1>:                 Message-buffer manipulation functions.
                                                             (line   12)
* ncptl_fill_buffer <2>:                 Message-buffer manipulation functions.
                                                             (line   15)
* ncptl_fill_buffer <3>:                 Message-buffer manipulation functions.
                                                             (line   22)
* ncptl_finalize:                        Finalization functions.
                                                             (line   10)
* ncptl_finalize <1>:                    Finalization functions.
                                                             (line   11)
* ncptl_free:                            Memory-allocation functions.
                                                             (line   34)
* ncptl_free <1>:                        Memory-allocation functions.
                                                             (line   35)
* ncptl_free <2>:                        Memory-allocation functions.
                                                             (line   57)
* ncptl_free <3>:                        Memory-allocation functions.
                                                             (line   70)
* ncptl_free <4>:                        Log-file functions. (line   64)
* ncptl_free <5>:                        Queue functions.    (line   67)
* ncptl_free <6>:                        Queue functions.    (line   72)
* ncptl_free <7>:                        Queue functions.    (line   84)
* ncptl_free <8>:                        Unordered-set functions.
                                                             (line   47)
* ncptl_func_abs:                        Integer-function descriptions.
                                                             (line   56)
* ncptl_func_bits:                       Integer-function descriptions.
                                                             (line   27)
* ncptl_func_cbrt:                       Integer-function descriptions.
                                                             (line   14)
* ncptl_func_cbrt <1>:                   Integer-function descriptions.
                                                             (line   14)
* ncptl_func_ceiling:                    Floating-point-function descriptions.
                                                             (line   14)
* ncptl_func_ceiling <1>:                Floating-point-function descriptions.
                                                             (line   15)
* ncptl_func_factor10:                   Integer-function descriptions.
                                                             (line   50)
* NCPTL_FUNC_FINAL:                      Representing aggregate functions.
                                                             (line   31)
* ncptl_func_floor:                      Floating-point-function descriptions.
                                                             (line    8)
* ncptl_func_floor <1>:                  Floating-point-function descriptions.
                                                             (line    9)
* NCPTL_FUNC_GEOMETRIC_MEAN:             Representing aggregate functions.
                                                             (line   15)
* NCPTL_FUNC_HARMONIC_MEAN:              Representing aggregate functions.
                                                             (line   13)
* NCPTL_FUNC_HISTOGRAM:                  Representing aggregate functions.
                                                             (line   38)
* ncptl_func_knomial_child:              Topology-function descriptions.
                                                             (line   63)
* ncptl_func_knomial_parent:             Topology-function descriptions.
                                                             (line   55)
* ncptl_func_log10:                      Integer-function descriptions.
                                                             (line   44)
* ncptl_func_log10 <1>:                  Integer-function descriptions.
                                                             (line   44)
* ncptl_func_log10 <2>:                  Integer-function descriptions.
                                                             (line   56)
* NCPTL_FUNC_MAD:                        Representing aggregate functions.
                                                             (line   19)
* ncptl_func_max:                        Integer-function descriptions.
                                                             (line   83)
* NCPTL_FUNC_MAXIMUM:                    Representing aggregate functions.
                                                             (line   29)
* NCPTL_FUNC_MEAN:                       Representing aggregate functions.
                                                             (line   11)
* NCPTL_FUNC_MEDIAN:                     Representing aggregate functions.
                                                             (line   17)
* ncptl_func_mesh_coord:                 Topology-function descriptions.
                                                             (line   26)
* ncptl_func_mesh_neighbor:              Topology-function descriptions.
                                                             (line   37)
* ncptl_func_min:                        Integer-function descriptions.
                                                             (line   77)
* NCPTL_FUNC_MINIMUM:                    Representing aggregate functions.
                                                             (line   27)
* ncptl_func_modulo:                     Integer-function descriptions.
                                                             (line   68)
* NCPTL_FUNC_NO_AGGREGATE:               Representing aggregate functions.
                                                             (line    9)
* NCPTL_FUNC_ONLY:                       Representing aggregate functions.
                                                             (line   35)
* NCPTL_FUNC_PERCENTILE:                 Log-file functions. (line  106)
* NCPTL_FUNC_PERCENTILE <1>:             Representing aggregate functions.
                                                             (line   33)
* ncptl_func_power:                      Integer-function descriptions.
                                                             (line   62)
* ncptl_func_random_gaussian:            Random-number-function descriptions.
                                                             (line   17)
* ncptl_func_random_pareto:              Random-number-function descriptions.
                                                             (line   29)
* ncptl_func_random_poisson:             Random-number-function descriptions.
                                                             (line   22)
* ncptl_func_random_uniform:             Random-number-function descriptions.
                                                             (line   10)
* ncptl_func_root:                       Integer-function descriptions.
                                                             (line   20)
* ncptl_func_root <1>:                   Integer-function descriptions.
                                                             (line   20)
* ncptl_func_round:                      Floating-point-function descriptions.
                                                             (line   20)
* ncptl_func_round <1>:                  Floating-point-function descriptions.
                                                             (line   21)
* ncptl_func_shift_left:                 Integer-function descriptions.
                                                             (line   34)
* ncptl_func_shift_right:                Integer-function descriptions.
                                                             (line   37)
* ncptl_func_sqrt:                       Integer-function descriptions.
                                                             (line    8)
* ncptl_func_sqrt <1>:                   Integer-function descriptions.
                                                             (line    8)
* NCPTL_FUNC_STDEV:                      Representing aggregate functions.
                                                             (line   21)
* NCPTL_FUNC_SUM:                        Representing aggregate functions.
                                                             (line   25)
* ncptl_func_tree_child:                 Topology-function descriptions.
                                                             (line   19)
* ncptl_func_tree_parent:                Topology-function descriptions.
                                                             (line   13)
* NCPTL_FUNC_VARIANCE:                   Representing aggregate functions.
                                                             (line   23)
* ncptl_get_message_buffer:              Memory-allocation functions.
                                                             (line   73)
* ncptl_get_message_buffer <1>:          Memory-allocation functions.
                                                             (line   75)
* ncptl_get_message_buffer <2>:          Memory-allocation functions.
                                                             (line   79)
* ncptl_init:                            Variables and data types.
                                                             (line   64)
* ncptl_init <1>:                        Variables and data types.
                                                             (line   71)
* ncptl_init <2>:                        Variables and data types.
                                                             (line   78)
* ncptl_init <3>:                        Initialization functions.
                                                             (line   10)
* ncptl_init <4>:                        Initialization functions.
                                                             (line   16)
* ncptl_init <5>:                        Initialization functions.
                                                             (line   42)
* ncptl_init <6>:                        Initialization functions.
                                                             (line   45)
* ncptl_init <7>:                        Initialization functions.
                                                             (line   48)
* ncptl_init <8>:                        Initialization functions.
                                                             (line   51)
* ncptl_init <9>:                        Initialization functions.
                                                             (line   59)
* ncptl_init <10>:                       Initialization functions.
                                                             (line   61)
* ncptl_init <11>:                       Time-related functions.
                                                             (line   11)
* ncptl_init <12>:                       Time-related functions.
                                                             (line   17)
* ncptl_int:                             Variables and data types.
                                                             (line   10)
* ncptl_int <1>:                         Variables and data types.
                                                             (line   10)
* ncptl_int <2>:                         Variables and data types.
                                                             (line   17)
* ncptl_int <3>:                         Variables and data types.
                                                             (line   18)
* ncptl_int <4>:                         Variables and data types.
                                                             (line   24)
* ncptl_int <5>:                         Variables and data types.
                                                             (line   32)
* ncptl_int <6>:                         Variables and data types.
                                                             (line   33)
* ncptl_int <7>:                         Variables and data types.
                                                             (line   42)
* ncptl_int <8>:                         Time-related functions.
                                                             (line   33)
* ncptl_int <9>:                         Time-related functions.
                                                             (line  125)
* ncptl_int <10>:                        Time-related functions.
                                                             (line  137)
* ncptl_int <11>:                        Language-visible functions.
                                                             (line   11)
* ncptl_int <12>:                        Language-visible functions.
                                                             (line   11)
* ncptl_int <13>:                        Integer-function descriptions.
                                                             (line   36)
* ncptl_int <14>:                        Topology-function descriptions.
                                                             (line    7)
* NCPTL_INT_MIN:                         Variables and data types.
                                                             (line   29)
* NCPTL_INT_MIN <1>:                     Variables and data types.
                                                             (line   30)
* NCPTL_INT_MIN <2>:                     Variables and data types.
                                                             (line   30)
* NCPTL_INT_MIN <3>:                     Variables and data types.
                                                             (line   34)
* NCPTL_INT_MIN <4>:                     Message-buffer manipulation functions.
                                                             (line   56)
* ncptl_lexer.py:                        Compiler.           (line   10)
* ncptl_log_add_comment:                 Log-file functions. (line   22)
* ncptl_log_add_comment <1>:             Log-file functions. (line   22)
* ncptl_log_add_comment <2>:             Log-file functions. (line   25)
* ncptl_log_add_comment <3>:             Log-file functions. (line   29)
* ncptl_log_add_comment <4>:             Log-file functions. (line   43)
* ncptl_log_close:                       Log-file functions. (line  132)
* ncptl_log_close <1>:                   Log-file functions. (line  157)
* ncptl_log_close <2>:                   Log-file functions. (line  158)
* ncptl_log_commit_data:                 Log-file functions. (line  122)
* ncptl_log_commit_data <1>:             Log-file functions. (line  127)
* ncptl_log_commit_data <2>:             Log-file functions. (line  128)
* ncptl_log_commit_data <3>:             Log-file functions. (line  131)
* ncptl_log_commit_data <4>:             Log-file functions. (line  134)
* ncptl_log_commit_data <5>:             Log-file functions. (line  138)
* ncptl_log_compute_aggregates:          Log-file functions. (line  112)
* ncptl_log_compute_aggregates <1>:      Log-file functions. (line  112)
* ncptl_log_compute_aggregates <2>:      Log-file functions. (line  114)
* ncptl_log_compute_aggregates <3>:      Log-file functions. (line  119)
* ncptl_log_compute_aggregates <4>:      Log-file functions. (line  121)
* NCPTL_LOG_DELAY:                       Environment Variables.
                                                             (line   68)
* NCPTL_LOG_DELAY <1>:                   Environment Variables.
                                                             (line   69)
* NCPTL_LOG_DELAY <2>:                   Environment Variables.
                                                             (line   71)
* NCPTL_LOG_DELAY <3>:                   Environment Variables.
                                                             (line   75)
* NCPTL_LOG_FILE_STATE:                  Variables and data types.
                                                             (line   57)
* NCPTL_LOG_FILE_STATE <1>:              Variables and data types.
                                                             (line   57)
* NCPTL_LOG_FILE_STATE <2>:              Variables and data types.
                                                             (line   58)
* NCPTL_LOG_FILE_STATE <3>:              Log-file functions. (line   46)
* ncptl_log_generate_uuid:               Log-file functions. (line   61)
* ncptl_log_generate_uuid <1>:           Log-file functions. (line   75)
* ncptl_log_get_contents:                Log-file functions. (line   57)
* ncptl_log_get_contents <1>:            Log-file functions. (line  148)
* ncptl_log_lookup_string:               Log-file functions. (line   88)
* ncptl_log_lookup_string <1>:           Log-file functions. (line   89)
* ncptl_log_lookup_string <2>:           Log-file functions. (line   94)
* NCPTL_LOG_ONLY:                        The interpret backend.
                                                             (line   69)
* NCPTL_LOG_ONLY <1>:                    The interpret backend.
                                                             (line   73)
* NCPTL_LOG_ONLY <2>:                    Running coNCePTuaL programs.
                                                             (line  185)
* NCPTL_LOG_ONLY <3>:                    Running coNCePTuaL programs.
                                                             (line  186)
* NCPTL_LOG_ONLY <4>:                    Environment Variables.
                                                             (line   84)
* NCPTL_LOG_ONLY <5>:                    Environment Variables.
                                                             (line   84)
* ncptl_log_open:                        Log-file functions. (line   26)
* ncptl_log_open <1>:                    Log-file functions. (line   27)
* ncptl_log_open <2>:                    Log-file functions. (line   35)
* ncptl_log_open <3>:                    Log-file functions. (line   37)
* ncptl_log_open <4>:                    Log-file functions. (line   41)
* ncptl_log_open <5>:                    Log-file functions. (line   44)
* ncptl_log_open <6>:                    Log-file functions. (line   45)
* ncptl_log_write:                       Log-file functions. (line  102)
* ncptl_log_write <1>:                   Log-file functions. (line  116)
* ncptl_log_write_epilogue:              Log-file functions. (line  144)
* ncptl_log_write_prologue:              Time-related functions.
                                                             (line   13)
* ncptl_log_write_prologue <1>:          Time-related functions.
                                                             (line   29)
* ncptl_log_write_prologue <2>:          Time-related functions.
                                                             (line   31)
* ncptl_log_write_prologue <3>:          Log-file functions. (line   63)
* ncptl_log_write_prologue <4>:          Log-file functions. (line   66)
* ncptl_log_write_prologue <5>:          Log-file functions. (line   73)
* ncptl_log_write_prologue <6>:          Log-file functions. (line   73)
* ncptl_log_write_prologue <7>:          Log-file functions. (line   77)
* ncptl_log_write_prologue <8>:          Log-file functions. (line   88)
* ncptl_malloc:                          Memory-allocation functions.
                                                             (line   17)
* ncptl_malloc <1>:                      Memory-allocation functions.
                                                             (line   18)
* ncptl_malloc <2>:                      Memory-allocation functions.
                                                             (line   19)
* ncptl_malloc <3>:                      Memory-allocation functions.
                                                             (line   34)
* ncptl_malloc <4>:                      Memory-allocation functions.
                                                             (line   36)
* ncptl_malloc <5>:                      Memory-allocation functions.
                                                             (line   41)
* ncptl_malloc <6>:                      Memory-allocation functions.
                                                             (line   54)
* ncptl_malloc <7>:                      Queue functions.    (line   63)
* ncptl_malloc_message:                  Memory-allocation functions.
                                                             (line   62)
* ncptl_malloc_message <1>:              Memory-allocation functions.
                                                             (line   65)
* ncptl_malloc_message <2>:              Memory-allocation functions.
                                                             (line   74)
* ncptl_malloc_message <3>:              Memory-allocation functions.
                                                             (line   77)
* ncptl_malloc_message <4>:              Message-buffer manipulation functions.
                                                             (line   59)
* ncptl_malloc_misaligned:               Memory-allocation functions.
                                                             (line   26)
* ncptl_malloc_misaligned <1>:           Memory-allocation functions.
                                                             (line   27)
* ncptl_malloc_misaligned <2>:           Memory-allocation functions.
                                                             (line   28)
* NCPTL_NOFORK:                          Problems running.   (line   12)
* NCPTL_NOFORK <1>:                      Miscellaneous mysterious hangs or crashes.
                                                             (line   13)
* NCPTL_NOFORK <2>:                      Miscellaneous mysterious hangs or crashes.
                                                             (line   17)
* NCPTL_NOFORK <3>:                      Environment Variables.
                                                             (line   91)
* NCPTL_NOFORK <4>:                      Environment Variables.
                                                             (line   93)
* ncptl_pagesize:                        Variables and data types.
                                                             (line   63)
* ncptl_pagesize <1>:                    Variables and data types.
                                                             (line   64)
* ncptl_pagesize <2>:                    Variables and data types.
                                                             (line   65)
* ncptl_parser.py:                       Compiler.           (line   12)
* ncptl_parse_command_line:              Initialization functions.
                                                             (line   32)
* ncptl_parse_command_line <1>:          Initialization functions.
                                                             (line   37)
* ncptl_parse_command_line <2>:          Initialization functions.
                                                             (line   46)
* ncptl_parse_command_line <3>:          Initialization functions.
                                                             (line   49)
* ncptl_parse_command_line <4>:          Initialization functions.
                                                             (line   57)
* ncptl_parse_command_line <5>:          Log-file functions. (line   81)
* NCPTL_PATH:                            Compiling coNCePTuaL programs.
                                                             (line   38)
* NCPTL_PATH <1>:                        Environment Variables.
                                                             (line   18)
* ncptl_permit_signal:                   Initialization functions.
                                                             (line   21)
* ncptl_permit_signal <1>:               Initialization functions.
                                                             (line   31)
* ncptl_point_to_task_map:               Task-mapping functions.
                                                             (line   13)
* NCPTL_QUEUE:                           Variables and data types.
                                                             (line   51)
* NCPTL_QUEUE <1>:                       Variables and data types.
                                                             (line   51)
* NCPTL_QUEUE <2>:                       Variables and data types.
                                                             (line   53)
* ncptl_queue_allocate:                  Queue functions.    (line   17)
* ncptl_queue_allocate <1>:              Queue functions.    (line   18)
* ncptl_queue_allocate <2>:              Queue functions.    (line   20)
* ncptl_queue_allocate <3>:              Queue functions.    (line   27)
* ncptl_queue_allocate <4>:              Queue functions.    (line   31)
* ncptl_queue_allocate <5>:              Queue functions.    (line   56)
* ncptl_queue_contents:                  Queue functions.    (line   61)
* ncptl_queue_contents <1>:              Queue functions.    (line   61)
* ncptl_queue_contents <2>:              Queue functions.    (line   69)
* ncptl_queue_contents <3>:              Queue functions.    (line   81)
* ncptl_queue_empty:                     Queue functions.    (line   46)
* ncptl_queue_empty <1>:                 Queue functions.    (line   55)
* ncptl_queue_empty <2>:                 Queue functions.    (line   80)
* ncptl_queue_init:                      Queue functions.    (line   13)
* ncptl_queue_init <1>:                  Queue functions.    (line   13)
* ncptl_queue_init <2>:                  Queue functions.    (line   19)
* ncptl_queue_init <3>:                  Queue functions.    (line   29)
* ncptl_queue_init <4>:                  Queue functions.    (line   38)
* ncptl_queue_length:                    Queue functions.    (line   77)
* ncptl_queue_pop:                       Queue functions.    (line   43)
* ncptl_queue_pop <1>:                   Queue functions.    (line   44)
* ncptl_queue_pop_tail:                  Queue functions.    (line   50)
* ncptl_queue_pop_tail <1>:              Queue functions.    (line   52)
* ncptl_queue_push:                      Queue functions.    (line   25)
* ncptl_queue_push <1>:                  Queue functions.    (line   30)
* ncptl_queue_push <2>:                  Queue functions.    (line   56)
* ncptl_queue_push_all:                  Queue functions.    (line   36)
* ncptl_queue_push_all <1>:              Queue functions.    (line   39)
* ncptl_random_task:                     Random-task functions.
                                                             (line   16)
* ncptl_random_task <1>:                 Random-task functions.
                                                             (line   27)
* ncptl_realloc:                         Memory-allocation functions.
                                                             (line   41)
* ncptl_realloc <1>:                     Memory-allocation functions.
                                                             (line   44)
* ncptl_realloc <2>:                     Memory-allocation functions.
                                                             (line   45)
* NCPTL_RUN_TIME_VERSION:                Initialization functions.
                                                             (line   13)
* ncptl_seed_random_task:                Initialization functions.
                                                             (line   56)
* ncptl_seed_random_task <1>:            Initialization functions.
                                                             (line   60)
* ncptl_seed_random_task <2>:            Random-task functions.
                                                             (line   16)
* ncptl_seed_random_task <3>:            Random-task functions.
                                                             (line   17)
* ncptl_seed_random_task <4>:            Random-task functions.
                                                             (line   18)
* ncptl_set_empty:                       Unordered-set functions.
                                                             (line   45)
* ncptl_set_find:                        Unordered-set functions.
                                                             (line   22)
* ncptl_set_flag_after_usecs:            Time-related functions.
                                                             (line  121)
* ncptl_set_flag_after_usecs <1>:        Time-related functions.
                                                             (line  121)
* ncptl_set_flag_after_usecs <2>:        Time-related functions.
                                                             (line  128)
* ncptl_set_init:                        Unordered-set functions.
                                                             (line   14)
* ncptl_set_init <1>:                    Unordered-set functions.
                                                             (line   17)
* ncptl_set_insert:                      Unordered-set functions.
                                                             (line   27)
* ncptl_set_insert <1>:                  Unordered-set functions.
                                                             (line   27)
* ncptl_set_length:                      Unordered-set functions.
                                                             (line   52)
* ncptl_set_remove:                      Unordered-set functions.
                                                             (line   40)
* ncptl_set_walk:                        Unordered-set functions.
                                                             (line   34)
* ncptl_strdup:                          Memory-allocation functions.
                                                             (line   52)
* ncptl_strdup <1>:                      Memory-allocation functions.
                                                             (line   52)
* ncptl_strdup <2>:                      Memory-allocation functions.
                                                             (line   53)
* ncptl_strdup <3>:                      Log-file functions. (line  151)
* ncptl_time:                            Log-file format.    (line  194)
* ncptl_time <1>:                        Time-related functions.
                                                             (line    7)
* ncptl_time <2>:                        Time-related functions.
                                                             (line   24)
* ncptl_time <3>:                        Time-related functions.
                                                             (line   26)
* ncptl_time <4>:                        Time-related functions.
                                                             (line   32)
* ncptl_time <5>:                        Time-related functions.
                                                             (line   43)
* ncptl_time <6>:                        Time-related functions.
                                                             (line   47)
* ncptl_time <7>:                        Time-related functions.
                                                             (line   52)
* ncptl_time <8>:                        Time-related functions.
                                                             (line   57)
* ncptl_time <9>:                        Time-related functions.
                                                             (line   65)
* ncptl_time <10>:                       Time-related functions.
                                                             (line   69)
* ncptl_time <11>:                       Time-related functions.
                                                             (line   75)
* ncptl_time <12>:                       Time-related functions.
                                                             (line   79)
* ncptl_time <13>:                       Time-related functions.
                                                             (line   84)
* ncptl_time <14>:                       Time-related functions.
                                                             (line   92)
* ncptl_time <15>:                       Time-related functions.
                                                             (line   94)
* ncptl_time <16>:                       Time-related functions.
                                                             (line  142)
* ncptl_time <17>:                       Time-related functions.
                                                             (line  143)
* ncptl_time <18>:                       Time-related functions.
                                                             (line  146)
* ncptl_token.py:                        Compiler.           (line   12)
* ncptl_touch_data:                      Message-buffer manipulation functions.
                                                             (line   29)
* ncptl_touch_data <1>:                  Message-buffer manipulation functions.
                                                             (line   29)
* ncptl_touch_data <2>:                  Message-buffer manipulation functions.
                                                             (line   35)
* ncptl_touch_data <3>:                  Message-buffer manipulation functions.
                                                             (line   36)
* ncptl_touch_memory:                    Message-buffer manipulation functions.
                                                             (line   33)
* ncptl_touch_memory <1>:                Message-buffer manipulation functions.
                                                             (line   37)
* ncptl_touch_memory <2>:                Message-buffer manipulation functions.
                                                             (line   44)
* ncptl_touch_memory <3>:                Message-buffer manipulation functions.
                                                             (line   58)
* ncptl_touch_memory <4>:                Message-buffer manipulation functions.
                                                             (line   64)
* ncptl_touch_memory <5>:                Message-buffer manipulation functions.
                                                             (line   67)
* NCPTL_TYPE_INT:                        Variables and data types.
                                                             (line   40)
* NCPTL_TYPE_STRING:                     Variables and data types.
                                                             (line   43)
* ncptl_udelay:                          Time-related functions.
                                                             (line  133)
* ncptl_udelay <1>:                      Time-related functions.
                                                             (line  133)
* ncptl_udelay <2>:                      Time-related functions.
                                                             (line  134)
* ncptl_udelay <3>:                      Time-related functions.
                                                             (line  138)
* ncptl_udelay <4>:                      Time-related functions.
                                                             (line  142)
* ncptl_udelay <5>:                      Time-related functions.
                                                             (line  145)
* ncptl_udelay <6>:                      Time-related functions.
                                                             (line  147)
* ncptl_udelay <7>:                      Time-related functions.
                                                             (line  149)
* ncptl_verify:                          Message-buffer manipulation functions.
                                                             (line   22)
* ncptl_verify <1>:                      Message-buffer manipulation functions.
                                                             (line   23)
* ncptl_virtual_to_physical:             Task-mapping functions.
                                                             (line   22)
* NCPTL_VIRT_PHYS_MAP:                   Task-mapping functions.
                                                             (line    8)
* ncurses:                               Command-line options for c_trace.
                                                             (line   22)
* ncurses <1>:                           c_trace tracing with curses.
                                                             (line    9)
* nearbyint:                             Cache Variables.    (line   90)
* netdb.h:                               Cache Variables.    (line  222)
* New (GUI menu item):                   Menu bar.           (line    7)
* newline:                               Primitives.         (line   42)
* newlines in backquoted commands:       Running coNCePTuaL programs.
                                                             (line  106)
* NICS:                                  Variables and data types.
                                                             (line   16)
* NODESHAPE:                             Further customizations.
                                                             (line   25)
* nonblocking:                           Blocking semantics. (line    6)
* nonterminal:                           Grammar.            (line   36)
* NONUNIQUE:                             Message specifications.
                                                             (line   10)
* NONUNIQUE <1>:                         Message specifications.
                                                             (line   32)
* NONUNIQUE <2>:                         Message specifications.
                                                             (line   52)
* NONUNIQUE <3>:                         Message specifications.
                                                             (line   64)
* NONUNIQUE <4>:                         Unique messages.    (line    9)
* NONUNIQUE <5>:                         Buffer control.     (line    8)
* NONUNIQUE <6>:                         Summary of the grammar.
                                                             (line  103)
* NONUNIQUE <7>:                         Summary of the grammar.
                                                             (line  118)
* NONUNIQUE <8>:                         Summary of the grammar.
                                                             (line  131)
* NONUNIQUE <9>:                         Summary of the grammar.
                                                             (line  143)
* NONUNIQUE <10>:                        Keywords.           (line  220)
* Normalize (GUI button):                Command bar.        (line   53)
* NOT:                                   Arithmetic expressions.
                                                             (line    9)
* NOT <1>:                               Arithmetic expressions.
                                                             (line   22)
* NOT <2>:                               Formal grammar for arithmetic expressions.
                                                             (line   32)
* NOT <3>:                               Summary of the grammar.
                                                             (line   33)
* NOT <4>:                               Keywords.           (line  222)
* num_tasks:                             k-nomial tree functions.
                                                             (line   21)
* num_tasks <1>:                         k-nomial tree functions.
                                                             (line   34)
* num_tasks <2>:                         k-nomial tree functions.
                                                             (line   95)
* num_tasks <3>:                         Predeclared variables.
                                                             (line   21)
* num_tasks <4>:                         Resetting counters. (line   15)
* num_tasks <5>:                         Binding variables.  (line  126)
* num_tasks <6>:                         Reordering task IDs.
                                                             (line   34)
* num_tasks <7>:                         Reordering task IDs.
                                                             (line   42)
* num_tasks <8>:                         Using out-of-bound task IDs to simplify code.
                                                             (line   47)
* n_add_expr:                            Method calls.       (line   10)
* n_aggregate_expr:                      Method calls.       (line   12)
* n_aggregate_func:                      Method calls.       (line   14)
* n_an:                                  Method calls.       (line   16)
* n_assert_stmt:                         Method calls.       (line   18)
* n_awaits_completion:                   Method calls.       (line   20)
* n_backend_decl:                        Method calls.       (line   22)
* n_backend_stmt:                        Method calls.       (line   24)
* n_buffer_number:                       Method calls.       (line   26)
* n_buffer_offset:                       Method calls.       (line   28)
* n_computes_for:                        Method calls.       (line   30)
* n_data_multiplier:                     Method calls.       (line   32)
* n_data_type:                           Method calls.       (line   34)
* n_dimension:                           Method calls.       (line   36)
* n_dimension_list:                      Method calls.       (line   38)
* n_empty_stmt:                          Method calls.       (line   40)
* n_eq_expr:                             Method calls.       (line   42)
* n_expr_list:                           Method calls.       (line   44)
* n_for_count:                           Method calls.       (line   46)
* n_for_count <1>:                       C hooks.            (line  167)
* n_for_count_SYNC_ALL:                  Internals.          (line   90)
* n_for_count_SYNC_ALL <1>:              C hooks.            (line  168)
* n_for_each:                            Method calls.       (line   48)
* n_for_each_expr:                       Method calls.       (line   50)
* n_for_time:                            Method calls.       (line   52)
* n_func_call:                           Method calls.       (line   54)
* n_ident:                               Method calls.       (line   56)
* n_ifelse_expr:                         Method calls.       (line   60)
* n_if_stmt:                             Method calls.       (line   58)
* n_integer:                             Method calls.       (line   62)
* n_item_size:                           Method calls.       (line   64)
* n_let_binding:                         Method calls.       (line   66)
* n_let_binding_list:                    Method calls.       (line   68)
* n_let_stmt:                            Method calls.       (line   70)
* n_log_expr_list:                       Method calls.       (line   72)
* n_log_expr_list_elt:                   Method calls.       (line   74)
* n_log_flush_stmt:                      Method calls.       (line   76)
* n_log_stmt:                            Method calls.       (line   78)
* n_mcast_stmt:                          Method calls.       (line   80)
* n_mcast_stmt <1>:                      C hooks.            (line  170)
* n_mcast_stmt_DECL:                     C hooks.            (line  171)
* n_mcast_stmt_INIT:                     C hooks.            (line  172)
* n_mcast_stmt_MANY_MANY:                C hooks.            (line  173)
* n_mcast_stmt_POST:                     C hooks.            (line  174)
* n_mcast_stmt_PRE:                      C hooks.            (line  175)
* n_message_alignment:                   Method calls.       (line   82)
* n_message_spec:                        Method calls.       (line   84)
* n_mult_expr:                           Method calls.       (line   86)
* n_my_task:                             Method calls.       (line   88)
* n_no_touching:                         Method calls.       (line   90)
* n_outputs:                             Internals.          (line   42)
* n_output_stmt:                         Method calls.       (line   92)
* n_param_decl:                          Method calls.       (line   94)
* n_power_expr:                          Method calls.       (line   96)
* n_processor_stmt:                      Method calls.       (line   98)
* n_program:                             Method calls.       (line  100)
* n_range:                               Method calls.       (line  102)
* n_range_list:                          Method calls.       (line  104)
* n_real:                                Method calls.       (line  106)
* n_receive_attrs:                       Method calls.       (line  108)
* n_receive_stmt:                        Method calls.       (line  110)
* n_recv_buffer_number:                  Method calls.       (line  112)
* n_recv_stmt:                           C hooks.            (line  177)
* n_recv_stmt_BODY:                      C hooks.            (line  178)
* n_reduce_message_spec:                 Method calls.       (line  114)
* n_reduce_stmt:                         Method calls.       (line  116)
* n_reduce_stmt <1>:                     C hooks.            (line  180)
* n_reduce_stmt_DECL:                    C hooks.            (line  181)
* n_reduce_stmt_HAVE_PEERS:              C hooks.            (line  182)
* n_reduce_stmt_INIT:                    C hooks.            (line  183)
* n_reduce_stmt_INIT2:                   C hooks.            (line  184)
* n_reduce_stmt_POST:                    C hooks.            (line  185)
* n_reduce_stmt_PRE:                     C hooks.            (line  186)
* n_rel_conj_expr:                       Method calls.       (line  118)
* n_rel_disj_expr:                       Method calls.       (line  120)
* n_reset_stmt:                          Method calls.       (line  122)
* n_restore_stmt:                        Method calls.       (line  124)
* n_send_attrs:                          Method calls.       (line  126)
* n_send_stmt:                           Method calls.       (line  128)
* n_send_stmt <1>:                       C hooks.            (line  188)
* n_send_stmt_BODY:                      C hooks.            (line  189)
* n_simple_stmt_list:                    Method calls.       (line  130)
* n_sleeps_for:                          Method calls.       (line  132)
* n_store_stmt:                          Method calls.       (line  134)
* n_stride:                              Method calls.       (line  136)
* n_string:                              Method calls.       (line  138)
* n_string_or_expr_list:                 Method calls.       (line  140)
* n_string_or_log_comment:               Method calls.       (line  142)
* n_sync_stmt:                           Method calls.       (line  144)
* n_sync_stmt <1>:                       C hooks.            (line  191)
* n_sync_stmt_DECL:                      C hooks.            (line  192)
* n_sync_stmt_INIT:                      C hooks.            (line  193)
* n_sync_stmt_POST:                      C hooks.            (line  194)
* n_sync_stmt_PRE:                       C hooks.            (line  195)
* n_tag:                                 Method calls.       (line  146)
* n_task_expr:                           Method calls.       (line  148)
* n_time_unit:                           Method calls.       (line  150)
* n_top_level_stmt:                      Method calls.       (line  152)
* n_touching:                            Method calls.       (line  160)
* n_touch_buffer_stmt:                   Method calls.       (line  154)
* n_touch_repeat_count:                  Method calls.       (line  156)
* n_touch_stmt:                          Method calls.       (line  158)
* n_trivial_node:                        Method calls.       (line  162)
* n_unary_expr:                          Method calls.       (line  164)
* n_unique:                              Method calls.       (line  166)
* n_verification:                        Method calls.       (line  168)
* n_version_decl:                        Method calls.       (line  170)
* n_where_expr:                          Method calls.       (line  172)
* ODD:                                   Keywords.           (line  224)
* odmi.h:                                Cache Variables.    (line  225)
* OF:                                    Aggregate expressions.
                                                             (line   13)
* OF <1>:                                Simulating computation.
                                                             (line   16)
* OF <2>:                                Summary of the grammar.
                                                             (line   55)
* OF <3>:                                Summary of the grammar.
                                                             (line  283)
* OF <4>:                                Keywords.           (line  226)
* Open (GUI menu item):                  Menu bar.           (line    7)
* opencc:                                Installation.       (line   14)
* options:                               A minimal C-based backend.
                                                             (line   14)
* options <1>:                           A minimal C-based backend.
                                                             (line   17)
* Options (GUI menu):                    Menu bar.           (line   18)
* OR:                                    Command-line arguments.
                                                             (line   11)
* OR <1>:                                Summary of the grammar.
                                                             (line  307)
* OR <2>:                                Keywords.           (line  228)
* ordering messages:                     Tag matching.       (line    6)
* ordinal numbers:                       Primitives.         (line   82)
* OTHER:                                 Keywords.           (line  230)
* OTHER THAN:                            Binding variables.  (line   33)
* OTHER THAN <1>:                        Summary of the grammar.
                                                             (line  263)
* OTHERWISE:                             Arithmetic expressions.
                                                             (line   17)
* OTHERWISE <1>:                         Arithmetic expressions.
                                                             (line   49)
* OTHERWISE <2>:                         Formal grammar for arithmetic expressions.
                                                             (line   11)
* OTHERWISE <3>:                         Complex statements. (line   29)
* OTHERWISE <4>:                         Conditional execution.
                                                             (line   11)
* OTHERWISE <5>:                         Grouping.           (line    7)
* OTHERWISE <6>:                         Summary of the grammar.
                                                             (line   12)
* OTHERWISE <7>:                         Summary of the grammar.
                                                             (line  238)
* OTHERWISE <8>:                         Summary of the grammar.
                                                             (line  270)
* OTHERWISE <9>:                         Keywords.           (line  232)
* OUTPUT:                                Primitives.         (line   24)
* OUTPUT <1>:                            Writing to standard output.
                                                             (line    6)
* OUTPUT <2>:                            Writing to standard output.
                                                             (line   27)
* OUTPUT <3>:                            Keywords.           (line  234)
* OUTPUTS:                               The c_profile backend.
                                                             (line    8)
* OUTPUTS <1>:                           The picl backend.   (line   70)
* OUTPUTS <2>:                           Primitives.         (line   25)
* OUTPUTS <3>:                           Evaluation contexts.
                                                             (line   14)
* OUTPUTS <4>:                           Writing to standard output.
                                                             (line   12)
* OUTPUTS <5>:                           Counted loops.      (line   18)
* OUTPUTS <6>:                           Timed loops.        (line   30)
* OUTPUTS <7>:                           Summary of the grammar.
                                                             (line  209)
* OUTPUTS <8>:                           Generated code.     (line   31)
* OUTPUTS <9>:                           Keywords.           (line  236)
* output_stmt:                           Utilizing log-file comments.
                                                             (line    6)
* output_stmt <1>:                       Writing to standard output.
                                                             (line    9)
* output_stmt <2>:                       Writing to standard output.
                                                             (line   11)
* output_stmt <3>:                       Writing to standard output.
                                                             (line   16)
* output_stmt <4>:                       Writing to standard output.
                                                             (line   33)
* output_stmt <5>:                       Complex statements. (line   37)
* output_stmt <6>:                       Summary of the grammar.
                                                             (line  208)
* output_stmt <7>:                       Summary of the grammar.
                                                             (line  246)
* PACKAGES:                              Further customizations.
                                                             (line   25)
* PAGE:                                  Item size.          (line   19)
* PAGE <1>:                              Item size.          (line   36)
* PAGE <2>:                              Item size.          (line   49)
* PAGE <3>:                              Item size.          (line   64)
* PAGE <4>:                              Item size.          (line   69)
* PAGE <5>:                              Summary of the grammar.
                                                             (line  160)
* PAGE <6>:                              Summary of the grammar.
                                                             (line  163)
* PAGE <7>:                              Keywords.           (line  238)
* PAGE ALIGNED:                          Variables and data types.
                                                             (line   68)
* PAGE ALIGNED <1>:                      ``Unable to determine the OS page size''.
                                                             (line    6)
* PAGE SIZED:                            Variables and data types.
                                                             (line   67)
* PAGES:                                 Keywords.           (line  240)
* PAPI:                                  Time-related functions.
                                                             (line   69)
* papi.h:                                Cache Variables.    (line  228)
* PAPI_get_real_usec:                    Time-related functions.
                                                             (line   70)
* ParaGraph:                             The picl backend.   (line   10)
* ParaGraph <1>:                         The picl backend.   (line   47)
* ParaGraph <2>:                         The picl backend.   (line   49)
* ParaGraph <3>:                         The picl backend.   (line   72)
* ParaGraph <4>:                         The picl backend.   (line   84)
* ParaGraph <5>:                         The latex_vis backend.
                                                             (line    9)
* ParaGraph <6>:                         Referenced Applications.
                                                             (line   35)
* param_decl:                            Command-line arguments.
                                                             (line    9)
* param_decl <1>:                        Complete programs.  (line   12)
* param_decl <2>:                        Summary of the grammar.
                                                             (line  305)
* param_decl <3>:                        Summary of the grammar.
                                                             (line  312)
* Paraver:                               Supplied backends.  (line   46)
* Paraver <1>:                           The paraver backend.
                                                             (line    6)
* Paraver <2>:                           The paraver backend.
                                                             (line    9)
* Paraver <3>:                           The paraver backend.
                                                             (line   12)
* Paraver <4>:                           The paraver backend.
                                                             (line   13)
* Paraver <5>:                           The paraver backend.
                                                             (line   24)
* Paraver <6>:                           The paraver backend.
                                                             (line   47)
* Paraver <7>:                           The paraver backend.
                                                             (line   76)
* Paraver <8>:                           The paraver backend.
                                                             (line   82)
* Paraver <9>:                           The paraver backend.
                                                             (line   92)
* Paraver <10>:                          The paraver backend.
                                                             (line  100)
* Paraver <11>:                          The paraver backend.
                                                             (line  104)
* Paraver <12>:                          The latex_vis backend.
                                                             (line    9)
* Paraver <13>:                          Referenced Applications.
                                                             (line   12)
* Paraver <14>:                          Referenced Applications.
                                                             (line   18)
* Paraver <15>:                          Referenced Applications.
                                                             (line   37)
* paraver (codegen_paraver.py):          Supplied backends.  (line   46)
* paraver (codegen_paraver.py) <1>:      The paraver backend.
                                                             (line   12)
* paraver (codegen_paraver.py) <2>:      The paraver backend.
                                                             (line   15)
* paraver (codegen_paraver.py) <3>:      The paraver backend.
                                                             (line   20)
* paraver (codegen_paraver.py) <4>:      The paraver backend.
                                                             (line   25)
* paraver (codegen_paraver.py) <5>:      The paraver backend.
                                                             (line   43)
* paraver (codegen_paraver.py) <6>:      The paraver backend.
                                                             (line   54)
* paraver (codegen_paraver.py) <7>:      The paraver backend.
                                                             (line   57)
* paraver (codegen_paraver.py) <8>:      The paraver backend.
                                                             (line   59)
* paraver (codegen_paraver.py) <9>:      The paraver backend.
                                                             (line   77)
* paraver (codegen_paraver.py) <10>:     The paraver backend.
                                                             (line   78)
* paraver (codegen_paraver.py) <11>:     The paraver backend.
                                                             (line   80)
* paraver (codegen_paraver.py) <12>:     The paraver backend.
                                                             (line   84)
* paraver (codegen_paraver.py) <13>:     The paraver backend.
                                                             (line  107)
* paraver (codegen_paraver.py) <14>:     The paraver backend.
                                                             (line  111)
* paraver (codegen_paraver.py) <15>:     The latex_vis backend.
                                                             (line    9)
* Paste (GUI menu item):                 Menu bar.           (line   15)
* PATH:                                  Typesetting conventions.
                                                             (line   15)
* PATH <1>:                              make.               (line  128)
* pathcc:                                Installation.       (line   28)
* pci/pci.h:                             Cache Variables.    (line  231)
* pdsh:                                  The c_mpi backend.  (line   13)
* PERCENTILE:                            Primitives.         (line   84)
* PERCENTILE <1>:                        Aggregate functions.
                                                             (line   11)
* PERCENTILE <2>:                        Aggregate functions.
                                                             (line   16)
* PERCENTILE <3>:                        Summary of the grammar.
                                                             (line   60)
* PERCENTILE <4>:                        Keywords.           (line  242)
* perl:                                  Cache Variables.    (line  364)
* pgcc:                                  Installation.       (line   27)
* pgcc <1>:                              Installation.       (line   32)
* PHP:                                   Installing stylesheets.
                                                             (line   82)
* PICL:                                  Supplied backends.  (line   42)
* PICL <1>:                              The picl backend.   (line    6)
* PICL <2>:                              The picl backend.   (line    8)
* PICL <3>:                              The picl backend.   (line   10)
* PICL <4>:                              The picl backend.   (line   14)
* PICL <5>:                              The picl backend.   (line   15)
* PICL <6>:                              The picl backend.   (line   26)
* PICL <7>:                              The picl backend.   (line   43)
* PICL <8>:                              The picl backend.   (line   47)
* PICL <9>:                              The picl backend.   (line   71)
* PICL <10>:                             The picl backend.   (line   76)
* PICL <11>:                             Referenced Applications.
                                                             (line   39)
* picl (codegen_picl.py):                Supplied backends.  (line   42)
* picl (codegen_picl.py) <1>:            The picl backend.   (line   14)
* picl (codegen_picl.py) <2>:            The picl backend.   (line   18)
* picl (codegen_picl.py) <3>:            The picl backend.   (line   22)
* picl (codegen_picl.py) <4>:            The picl backend.   (line   26)
* picl (codegen_picl.py) <5>:            The picl backend.   (line   49)
* picl (codegen_picl.py) <6>:            The picl backend.   (line   53)
* picl (codegen_picl.py) <7>:            The picl backend.   (line   56)
* picl (codegen_picl.py) <8>:            The picl backend.   (line   58)
* picl (codegen_picl.py) <9>:            The picl backend.   (line   77)
* picl (codegen_picl.py) <10>:           The picl backend.   (line   77)
* picl (codegen_picl.py) <11>:           The picl backend.   (line   80)
* picl (codegen_picl.py) <12>:           The picl backend.   (line   85)
* picl (codegen_picl.py) <13>:           The picl backend.   (line   88)
* picl (codegen_picl.py) <14>:           The latex_vis backend.
                                                             (line    9)
* picl (codegen_picl.py) <15>:           Variables and data types.
                                                             (line   74)
* picl (codegen_picl.py) <16>:           Environment Variables.
                                                             (line   63)
* pictures of communication patterns:    The latex_vis backend.
                                                             (line    6)
* pkg-config:                            pkg-config.         (line    6)
* pkg-config <1>:                        pkg-config.         (line   10)
* pkg-config <2>:                        pkg-config.         (line   15)
* pkg-config <3>:                        pkg-config.         (line   17)
* pkg-config <4>:                        Referenced Applications.
                                                             (line   41)
* pkgconfig:                             Cache Variables.    (line  386)
* PLUS:                                  Complex statements. (line   23)
* PLUS <1>:                              Complex statements. (line   26)
* PLUS <2>:                              Counted loops.      (line   17)
* PLUS <3>:                              Timed loops.        (line   29)
* PLUS <4>:                              Summary of the grammar.
                                                             (line  232)
* PLUS <5>:                              Summary of the grammar.
                                                             (line  235)
* PLUS <6>:                              Keywords.           (line  244)
* pop:                                   Internals.          (line  116)
* popen:                                 configure.          (line   60)
* popen <1>:                             Environment Variables.
                                                             (line   91)
* popen <2>:                             Cache Variables.    (line   93)
* popt.h:                                Cache Variables.    (line  234)
* PostScript:                            Supplied backends.  (line   50)
* PostScript <1>:                        The latex_vis backend.
                                                             (line    7)
* PostScript <2>:                        The latex_vis backend.
                                                             (line   93)
* PostScript <3>:                        The latex_vis backend.
                                                             (line  129)
* PostScript <4>:                        The latex_vis backend.
                                                             (line  145)
* PostScript <5>:                        The dot_ast backend.
                                                             (line  137)
* PostScript <6>:                        The dot_ast backend.
                                                             (line  138)
* PostScript <7>:                        The dot_ast backend.
                                                             (line  237)
* PostScript <8>:                        Bad bounding boxes from latex_vis.
                                                             (line    9)
* power_expr:                            Formal grammar for arithmetic expressions.
                                                             (line   27)
* power_expr <1>:                        Formal grammar for arithmetic expressions.
                                                             (line   29)
* power_expr <2>:                        Summary of the grammar.
                                                             (line   28)
* power_expr <3>:                        Summary of the grammar.
                                                             (line   30)
* prctl:                                 ``Unaligned access'' warnings.
                                                             (line   41)
* predeclared variables:                 Predeclared variables.
                                                             (line    6)
* PRId64:                                PRId64 is not a valid printf conversion specifier.
                                                             (line   15)
* PRId64 <1>:                            PRId64 is not a valid printf conversion specifier.
                                                             (line   26)
* PRId64 <2>:                            PRId64 is not a valid printf conversion specifier.
                                                             (line   28)
* primary_expr:                          Formal grammar for arithmetic expressions.
                                                             (line   27)
* primary_expr <1>:                      Formal grammar for arithmetic expressions.
                                                             (line   34)
* primary_expr <2>:                      Summary of the grammar.
                                                             (line   28)
* primary_expr <3>:                      Summary of the grammar.
                                                             (line   35)
* primitives, language:                  Primitives.         (line    6)
* Print (GUI menu item):                 Menu bar.           (line    7)
* Print (GUI menu item) <1>:             Menu bar.           (line   11)
* printf:                                Running coNCePTuaL programs.
                                                             (line  136)
* printf <1>:                            Finalization functions.
                                                             (line   16)
* printf <2>:                            PRId64 is not a valid printf conversion specifier.
                                                             (line   19)
* PROCESSOR:                             Reordering task IDs.
                                                             (line   23)
* PROCESSOR <1>:                         Summary of the grammar.
                                                             (line  296)
* PROCESSOR <2>:                         Keywords.           (line  246)
* PROCESSORS:                            Keywords.           (line  250)
* PROCESSOR_OF:                          Built-in functions. (line   22)
* PROCESSOR_OF <1>:                      Processor/task mapping functions.
                                                             (line   17)
* PROCESSOR_OF <2>:                      Summary of the grammar.
                                                             (line   50)
* PROCESSOR_OF <3>:                      Keywords.           (line  248)
* processor_stmt:                        Complex statements. (line   47)
* processor_stmt <1>:                    Reordering task IDs.
                                                             (line   21)
* processor_stmt <2>:                    Summary of the grammar.
                                                             (line  256)
* processor_stmt <3>:                    Summary of the grammar.
                                                             (line  294)
* program:                               The dot_ast backend.
                                                             (line  155)
* program <1>:                           The libsea_ast backend.
                                                             (line   36)
* program <2>:                           Complete programs.  (line   10)
* program <3>:                           Complete programs.  (line   12)
* program <4>:                           Summary of the grammar.
                                                             (line  312)
* prun:                                  The c_mpi backend.  (line   13)
* PSMATRIX:                              Further customizations.
                                                             (line   26)
* PSTricks:                              The latex_vis backend.
                                                             (line   11)
* PSTricks <1>:                          The latex_vis backend.
                                                             (line   22)
* PSTricks <2>:                          Further customizations.
                                                             (line   13)
* PSTricks <3>:                          Further customizations.
                                                             (line   46)
* PSTricks <4>:                          Referenced Applications.
                                                             (line   43)
* push:                                  Internals.          (line   53)
* push <1>:                              Internals.          (line   63)
* pushmany:                              Hook methods.       (line   70)
* pushmany <1>:                          Internals.          (line   54)
* push_marker:                           Internals.          (line  119)
* pwd.h:                                 Cache Variables.    (line  237)
* Python:                                configure.          (line   23)
* Python <1>:                            configure.          (line   26)
* Python <2>:                            make.               (line  170)
* Python <3>:                            Compiling coNCePTuaL programs.
                                                             (line   41)
* Python <4>:                            Compiling coNCePTuaL programs.
                                                             (line   42)
* Python <5>:                            Compiling coNCePTuaL programs.
                                                             (line   43)
* Python <6>:                            Compiling coNCePTuaL programs.
                                                             (line  104)
* Python <7>:                            The latex_vis backend.
                                                             (line  144)
* Python <8>:                            The latex_vis backend.
                                                             (line  155)
* Python <9>:                            The latex_vis backend.
                                                             (line  155)
* Python <10>:                           Arithmetic expressions.
                                                             (line   33)
* Python <11>:                           Compiler.           (line    6)
* Python <12>:                           Hook methods.       (line   21)
* Python <13>:                           Internals.          (line  130)
* Python <14>:                           Cross-compilation.  (line   85)
* Python <15>:                           Problems with ``C compiler used for Python extension modules''.
                                                             (line   12)
* Python <16>:                           Problems with ``C compiler used for Python extension modules''.
                                                             (line   12)
* Python <17>:                           Problems with ``C compiler used for Python extension modules''.
                                                             (line   26)
* Python <18>:                           Problems with ``C compiler used for Python extension modules''.
                                                             (line   28)
* Python <19>:                           Problems with ``C compiler used for Python extension modules''.
                                                             (line   31)
* Python <20>:                           Problems with ``C compiler used for Python extension modules''.
                                                             (line   32)
* Python <21>:                           Problems with ``C compiler used for Python extension modules''.
                                                             (line   32)
* Python <22>:                           Compaq compilers on Alpha CPUs.
                                                             (line   11)
* Python <23>:                           "makehelper.py config" fails.
                                                             (line   11)
* Python <24>:                           Referenced Applications.
                                                             (line   45)
* python:                                Cache Variables.    (line  366)
* Python interface, failure to build:    Problems with ``C compiler used for Python extension modules''.
                                                             (line    6)
* Python Lex-Yacc (PLY):                 Compiler.           (line    6)
* Python Lex-Yacc (PLY) <1>:             Internals.          (line   37)
* Python Lex-Yacc (PLY) <2>:             Method calls.       (line    7)
* Python.h:                              Problems with ``C compiler used for Python extension modules''.
                                                             (line   35)
* Python.h <1>:                          Problems with ``C compiler used for Python extension modules''.
                                                             (line   36)
* QUADWORD:                              Item size.          (line   19)
* QUADWORD <1>:                          Item size.          (line   34)
* QUADWORD <2>:                          Item size.          (line   49)
* QUADWORD <3>:                          Item size.          (line   62)
* QUADWORD <4>:                          Summary of the grammar.
                                                             (line  160)
* QUADWORD <5>:                          Summary of the grammar.
                                                             (line  163)
* QUADWORD <6>:                          Keywords.           (line  252)
* QUADWORDS:                             Keywords.           (line  254)
* QueryPerformanceCounter:               Time-related functions.
                                                             (line   89)
* QueryPerformanceFrequency:             Time-related functions.
                                                             (line   91)
* queue functions:                       Queue functions.    (line    6)
* Quit (GUI menu item):                  Menu bar.           (line    8)
* quotes:                                Running coNCePTuaL programs.
                                                             (line  106)
* quotes <1>:                            Log-file format.    (line   13)
* quotes <2>:                            Primitives.         (line   42)
* quotes <3>:                            PRId64 is not a valid printf conversion specifier.
                                                             (line   13)
* RANDOM:                                Keywords.           (line  256)
* random numbers:                        Random-number functions.
                                                             (line    6)
* random numbers <1>:                    Random-number-function descriptions.
                                                             (line    6)
* RANDOM TASK:                           Running coNCePTuaL programs.
                                                             (line  167)
* random tasks:                          Random-task functions.
                                                             (line    6)
* RANDOM_GAUSSIAN:                       Built-in functions. (line   20)
* RANDOM_GAUSSIAN <1>:                   Random-number functions.
                                                             (line   21)
* RANDOM_GAUSSIAN <2>:                   Summary of the grammar.
                                                             (line   48)
* RANDOM_GAUSSIAN <3>:                   Keywords.           (line  258)
* RANDOM_PARETO:                         Built-in functions. (line   21)
* RANDOM_PARETO <1>:                     Random-number functions.
                                                             (line   30)
* RANDOM_PARETO <2>:                     Summary of the grammar.
                                                             (line   49)
* RANDOM_PARETO <3>:                     Keywords.           (line  260)
* RANDOM_POISSON:                        Built-in functions. (line   21)
* RANDOM_POISSON <1>:                    Random-number functions.
                                                             (line   25)
* RANDOM_POISSON <2>:                    Summary of the grammar.
                                                             (line   49)
* RANDOM_POISSON <3>:                    Keywords.           (line  262)
* random_task_constraints:               Binding variables.  (line   28)
* random_task_constraints <1>:           Binding variables.  (line   30)
* random_task_constraints <2>:           Binding variables.  (line   33)
* random_task_constraints <3>:           Summary of the grammar.
                                                             (line  261)
* random_task_constraints <4>:           Summary of the grammar.
                                                             (line  263)
* RANDOM_UNIFORM:                        Built-in functions. (line   20)
* RANDOM_UNIFORM <1>:                    Random-number functions.
                                                             (line   17)
* RANDOM_UNIFORM <2>:                    Summary of the grammar.
                                                             (line   48)
* RANDOM_UNIFORM <3>:                    Keywords.           (line  264)
* range:                                 Relational expressions.
                                                             (line   40)
* range <1>:                             Relational expressions.
                                                             (line   40)
* range <2>:                             Relational expressions.
                                                             (line   42)
* range <3>:                             Formal grammar for relational expressions.
                                                             (line   27)
* range <4>:                             Formal grammar for relational expressions.
                                                             (line   27)
* range <5>:                             Formal grammar for relational expressions.
                                                             (line   28)
* range <6>:                             Formal grammar for relational expressions.
                                                             (line   28)
* range <7>:                             Range expressions.  (line   17)
* range <8>:                             Range expressions.  (line   18)
* range <9>:                             Range expressions.  (line   18)
* range <10>:                            Range expressions.  (line  178)
* range <11>:                            Source tasks.       (line   13)
* range <12>:                            Source tasks.       (line   13)
* range <13>:                            Source tasks.       (line   40)
* range <14>:                            Target tasks.       (line   12)
* range <15>:                            Target tasks.       (line   12)
* range <16>:                            Complex statements. (line   25)
* range <17>:                            Complex statements. (line   25)
* range <18>:                            Range loops.        (line   12)
* range <19>:                            Range loops.        (line   12)
* range <20>:                            Range loops.        (line   15)
* range <21>:                            Range loops.        (line   20)
* range <22>:                            Range loops.        (line  113)
* range <23>:                            Summary of the grammar.
                                                             (line   80)
* range <24>:                            Summary of the grammar.
                                                             (line   80)
* range <25>:                            Summary of the grammar.
                                                             (line   81)
* range <26>:                            Summary of the grammar.
                                                             (line   81)
* range <27>:                            Summary of the grammar.
                                                             (line   83)
* range <28>:                            Summary of the grammar.
                                                             (line   84)
* range <29>:                            Summary of the grammar.
                                                             (line   84)
* range <30>:                            Summary of the grammar.
                                                             (line   94)
* range <31>:                            Summary of the grammar.
                                                             (line   94)
* range <32>:                            Summary of the grammar.
                                                             (line  100)
* range <33>:                            Summary of the grammar.
                                                             (line  100)
* range <34>:                            Summary of the grammar.
                                                             (line  234)
* range <35>:                            Summary of the grammar.
                                                             (line  234)
* range <36>:                            Latency.            (line   36)
* range <37>:                            Latency.            (line   38)
* range expressions:                     Range expressions.  (line    6)
* REAL:                                  Arithmetic expressions.
                                                             (line    9)
* REAL <1>:                              Evaluation contexts.
                                                             (line   32)
* REAL <2>:                              Evaluation contexts.
                                                             (line   34)
* REAL <3>:                              Evaluation contexts.
                                                             (line   35)
* REAL <4>:                              Formal grammar for arithmetic expressions.
                                                             (line   38)
* REAL <5>:                              Summary of the grammar.
                                                             (line   39)
* REAL <6>:                              Keywords.           (line  266)
* realpath:                              Cache Variables.    (line   96)
* RECEIVE:                               Typesetting conventions.
                                                             (line   27)
* RECEIVE <1>:                           Components.         (line   34)
* RECEIVE <2>:                           Primitives.         (line   22)
* RECEIVE <3>:                           Message specifications.
                                                             (line   23)
* RECEIVE <4>:                           Tag matching.       (line   11)
* RECEIVE <5>:                           Tag matching.       (line   42)
* RECEIVE <6>:                           Sending.            (line   72)
* RECEIVE <7>:                           Sending.            (line  121)
* RECEIVE <8>:                           Receiving.          (line    9)
* RECEIVE <9>:                           Receiving.          (line   14)
* RECEIVE <10>:                          Receiving.          (line   23)
* RECEIVE <11>:                          Receiving.          (line   28)
* RECEIVE <12>:                          Receiving.          (line   34)
* RECEIVE <13>:                          Receiving.          (line   37)
* RECEIVE <14>:                          Receiving.          (line   50)
* RECEIVE <15>:                          Receiving.          (line   65)
* RECEIVE <16>:                          Receiving.          (line   71)
* RECEIVE <17>:                          Summary of the grammar.
                                                             (line  180)
* RECEIVE <18>:                          Keywords.           (line  268)
* Received signal:                       Keeping programs from dying on a signal.
                                                             (line    6)
* RECEIVES:                              Keywords.           (line  270)
* receive_stmt:                          Receiving.          (line   10)
* receive_stmt <1>:                      Receiving.          (line   13)
* receive_stmt <2>:                      Receiving.          (line   56)
* receive_stmt <3>:                      Complex statements. (line   32)
* receive_stmt <4>:                      Summary of the grammar.
                                                             (line  179)
* receive_stmt <5>:                      Summary of the grammar.
                                                             (line  241)
* receive_stmt <6>:                      Memory efficiency.  (line   16)
* recv_message_spec:                     Message specifications.
                                                             (line   28)
* recv_message_spec <1>:                 Message specifications.
                                                             (line   30)
* recv_message_spec <2>:                 Message specifications.
                                                             (line   44)
* recv_message_spec <3>:                 Message specifications.
                                                             (line   49)
* recv_message_spec <4>:                 Message specifications.
                                                             (line   75)
* recv_message_spec <5>:                 Sending.            (line   19)
* recv_message_spec <6>:                 Sending.            (line   21)
* recv_message_spec <7>:                 Summary of the grammar.
                                                             (line  116)
* recv_message_spec <8>:                 Summary of the grammar.
                                                             (line  177)
* Red Storm:                             Cross-compilation.  (line   10)
* Red Storm <1>:                         Cross-compilation.  (line   10)
* Red Storm <2>:                         Cross-compilation.  (line   39)
* Red Storm <3>:                         Cross-compilation.  (line   55)
* Red Storm <4>:                         Cross-compilation.  (line   66)
* Red Storm <5>:                         Cross-compilation.  (line   75)
* Red Storm <6>:                         Cross-compilation.  (line   80)
* Red Storm <7>:                         Miscellaneous mysterious hangs or crashes.
                                                             (line   29)
* REDUCE:                                Components.         (line   76)
* REDUCE <1>:                            Implementation of reductions.
                                                             (line    6)
* REDUCE <2>:                            Message specifications.
                                                             (line   48)
* REDUCE <3>:                            Keywords.           (line  272)
* Reduce (GUI button):                   Command bar.        (line   42)
* REDUCES:                               Reducing.           (line   22)
* REDUCES <1>:                           Reducing.           (line   27)
* REDUCES <2>:                           Reducing.           (line   56)
* REDUCES <3>:                           Reducing.           (line   59)
* REDUCES <4>:                           Summary of the grammar.
                                                             (line  193)
* REDUCES <5>:                           Summary of the grammar.
                                                             (line  198)
* REDUCES <6>:                           Keywords.           (line  274)
* reduce_message_spec:                   Message specifications.
                                                             (line   51)
* reduce_message_spec <1>:               Message specifications.
                                                             (line   76)
* reduce_message_spec <2>:               Reducing.           (line   23)
* reduce_message_spec <3>:               Reducing.           (line   28)
* reduce_message_spec <4>:               Reducing.           (line   29)
* reduce_message_spec <5>:               Reducing.           (line   31)
* reduce_message_spec <6>:               Reducing.           (line   42)
* reduce_message_spec <7>:               Reducing.           (line   45)
* reduce_message_spec <8>:               Summary of the grammar.
                                                             (line  130)
* reduce_message_spec <9>:               Summary of the grammar.
                                                             (line  194)
* reduce_message_spec <10>:              Summary of the grammar.
                                                             (line  199)
* reduce_message_spec <11>:              Summary of the grammar.
                                                             (line  200)
* reduce_stmt:                           Reducing.           (line   21)
* reduce_stmt <1>:                       Complex statements. (line   35)
* reduce_stmt <2>:                       Summary of the grammar.
                                                             (line  192)
* reduce_stmt <3>:                       Summary of the grammar.
                                                             (line  244)
* reduce_target_message_spec:            Message specifications.
                                                             (line   63)
* reduce_target_message_spec <1>:        Message specifications.
                                                             (line   76)
* reduce_target_message_spec <2>:        Reducing.           (line   25)
* reduce_target_message_spec <3>:        Reducing.           (line   42)
* reduce_target_message_spec <4>:        Summary of the grammar.
                                                             (line  142)
* reduce_target_message_spec <5>:        Summary of the grammar.
                                                             (line  196)
* REGION:                                Keywords.           (line  276)
* relational expressions:                Relational expressions.
                                                             (line    6)
* rel_conj_expr:                         Formal grammar for relational expressions.
                                                             (line   11)
* rel_conj_expr <1>:                     Formal grammar for relational expressions.
                                                             (line   13)
* rel_conj_expr <2>:                     Formal grammar for relational expressions.
                                                             (line   13)
* rel_conj_expr <3>:                     Summary of the grammar.
                                                             (line   64)
* rel_conj_expr <4>:                     Summary of the grammar.
                                                             (line   66)
* rel_conj_expr <5>:                     Summary of the grammar.
                                                             (line   66)
* rel_disj_expr:                         Formal grammar for relational expressions.
                                                             (line    9)
* rel_disj_expr <1>:                     Formal grammar for relational expressions.
                                                             (line   11)
* rel_disj_expr <2>:                     Formal grammar for relational expressions.
                                                             (line   11)
* rel_disj_expr <3>:                     Summary of the grammar.
                                                             (line   62)
* rel_disj_expr <4>:                     Summary of the grammar.
                                                             (line   64)
* rel_disj_expr <5>:                     Summary of the grammar.
                                                             (line   64)
* rel_expr:                              Arithmetic expressions.
                                                             (line   17)
* rel_expr <1>:                          Arithmetic expressions.
                                                             (line   49)
* rel_expr <2>:                          Arithmetic expressions.
                                                             (line   50)
* rel_expr <3>:                          Arithmetic expressions.
                                                             (line   51)
* rel_expr <4>:                          Arithmetic expressions.
                                                             (line   70)
* rel_expr <5>:                          Formal grammar for arithmetic expressions.
                                                             (line   11)
* rel_expr <6>:                          Relational expressions.
                                                             (line    6)
* rel_expr <7>:                          Relational expressions.
                                                             (line   58)
* rel_expr <8>:                          Relational expressions.
                                                             (line   58)
* rel_expr <9>:                          Relational expressions.
                                                             (line   59)
* rel_expr <10>:                         Relational expressions.
                                                             (line   59)
* rel_expr <11>:                         Relational expressions.
                                                             (line   59)
* rel_expr <12>:                         Relational expressions.
                                                             (line   60)
* rel_expr <13>:                         Formal grammar for relational expressions.
                                                             (line    9)
* rel_expr <14>:                         Formal grammar for relational expressions.
                                                             (line   16)
* rel_expr <15>:                         Range expressions.  (line   19)
* rel_expr <16>:                         Restricted identifiers.
                                                             (line    9)
* rel_expr <17>:                         Restricted identifiers.
                                                             (line   12)
* rel_expr <18>:                         Complex statements. (line   29)
* rel_expr <19>:                         Conditional execution.
                                                             (line    9)
* rel_expr <20>:                         Conditional execution.
                                                             (line   13)
* rel_expr <21>:                         Conditional execution.
                                                             (line   15)
* rel_expr <22>:                         Conditional execution.
                                                             (line   16)
* rel_expr <23>:                         Conditional execution.
                                                             (line   18)
* rel_expr <24>:                         Asserting conditions.
                                                             (line   11)
* rel_expr <25>:                         Asserting conditions.
                                                             (line   14)
* rel_expr <26>:                         Asserting conditions.
                                                             (line   31)
* rel_expr <27>:                         Summary of the grammar.
                                                             (line   12)
* rel_expr <28>:                         Summary of the grammar.
                                                             (line   62)
* rel_expr <29>:                         Summary of the grammar.
                                                             (line   69)
* rel_expr <30>:                         Summary of the grammar.
                                                             (line   85)
* rel_expr <31>:                         Summary of the grammar.
                                                             (line   87)
* rel_expr <32>:                         Summary of the grammar.
                                                             (line  238)
* rel_expr <33>:                         Summary of the grammar.
                                                             (line  268)
* rel_expr <34>:                         Summary of the grammar.
                                                             (line  273)
* rel_primary_expr:                      Formal grammar for relational expressions.
                                                             (line   13)
* rel_primary_expr <1>:                  Formal grammar for relational expressions.
                                                             (line   15)
* rel_primary_expr <2>:                  Summary of the grammar.
                                                             (line   66)
* rel_primary_expr <3>:                  Summary of the grammar.
                                                             (line   68)
* reordering task IDs:                   Reordering task IDs.
                                                             (line    6)
* REPETITION:                            Keywords.           (line  278)
* REPETITIONS:                           The interpret backend.
                                                             (line   57)
* REPETITIONS <1>:                       Complex statements. (line   23)
* REPETITIONS <2>:                       Complex statements. (line   23)
* REPETITIONS <3>:                       Counted loops.      (line    8)
* REPETITIONS <4>:                       Counted loops.      (line   15)
* REPETITIONS <5>:                       Counted loops.      (line   17)
* REPETITIONS <6>:                       Simulating computation.
                                                             (line   79)
* REPETITIONS <7>:                       Summary of the grammar.
                                                             (line  232)
* REPETITIONS <8>:                       Summary of the grammar.
                                                             (line  232)
* REPETITIONS <9>:                       Memory efficiency.  (line   19)
* REPETITIONS <10>:                      Keywords.           (line  280)
* REQUIRE:                               Keywords.           (line  282)
* REQUIRE LANGUAGE VERSION:              Language versioning.
                                                             (line   14)
* REQUIRE LANGUAGE VERSION <1>:          Summary of the grammar.
                                                             (line  303)
* reserved words:                        Reserved Words.     (line    6)
* RESET:                                 Restoring counter values.
                                                             (line   73)
* RESET <1>:                             Restoring counter values.
                                                             (line   75)
* RESET <2>:                             Keywords.           (line  284)
* RESET ITS COUNTERS:                    Priming message buffers.
                                                             (line   10)
* RESETS:                                Keywords.           (line  286)
* RESETS ITS COUNTERS:                   Counter and timer statements.
                                                             (line   14)
* RESETS ITS COUNTERS <1>:               Resetting counters. (line   11)
* RESETS ITS COUNTERS <2>:               Summary of the grammar.
                                                             (line  222)
* reset_stmt:                            Resetting counters. (line   10)
* reset_stmt <1>:                        Complex statements. (line   40)
* reset_stmt <2>:                        Summary of the grammar.
                                                             (line  221)
* reset_stmt <3>:                        Summary of the grammar.
                                                             (line  249)
* RESTORE:                               Restoring counter values.
                                                             (line   21)
* RESTORE <1>:                           Restoring counter values.
                                                             (line   41)
* RESTORE <2>:                           Restoring counter values.
                                                             (line   48)
* RESTORE <3>:                           Restoring counter values.
                                                             (line   56)
* RESTORE <4>:                           Restoring counter values.
                                                             (line   59)
* RESTORE <5>:                           Restoring counter values.
                                                             (line   81)
* RESTORE <6>:                           Keywords.           (line  288)
* RESTORE ITS COUNTERS:                  Counter and timer statements.
                                                             (line   19)
* RESTORES:                              Restoring counter values.
                                                             (line   19)
* RESTORES <1>:                          Keywords.           (line  290)
* RESTORES ITS COUNTERS:                 Restoring counter values.
                                                             (line   10)
* RESTORES ITS COUNTERS <1>:             Summary of the grammar.
                                                             (line  228)
* restore_stmt:                          Restoring counter values.
                                                             (line    6)
* restore_stmt <1>:                      Restoring counter values.
                                                             (line    9)
* restore_stmt <2>:                      Complex statements. (line   42)
* restore_stmt <3>:                      Summary of the grammar.
                                                             (line  227)
* restore_stmt <4>:                      Summary of the grammar.
                                                             (line  251)
* restricted identifiers:                Restricted identifiers.
                                                             (line    6)
* restricted_ident:                      Task descriptions.  (line   21)
* restricted_ident <1>:                  Restricted identifiers.
                                                             (line   12)
* restricted_ident <2>:                  Source tasks.       (line   11)
* restricted_ident <3>:                  Source tasks.       (line   26)
* restricted_ident <4>:                  Source tasks.       (line   40)
* restricted_ident <5>:                  Source tasks.       (line   46)
* restricted_ident <6>:                  Target tasks.       (line   10)
* restricted_ident <7>:                  Sending.            (line  106)
* restricted_ident <8>:                  Sending.            (line  145)
* restricted_ident <9>:                  Summary of the grammar.
                                                             (line   87)
* restricted_ident <10>:                 Summary of the grammar.
                                                             (line   92)
* restricted_ident <11>:                 Summary of the grammar.
                                                             (line   98)
* RESULT:                                Keywords.           (line  292)
* RESULTS:                               Keywords.           (line  294)
* rint:                                  Cache Variables.    (line   99)
* rms/rmscall.h:                         Cache Variables.    (line  240)
* ROOT:                                  Built-in functions. (line   15)
* ROOT <1>:                              Integer functions.  (line   18)
* ROOT <2>:                              Integer functions.  (line   37)
* ROOT <3>:                              Integer functions.  (line   38)
* ROOT <4>:                              Integer functions.  (line   39)
* ROOT <5>:                              Integer functions.  (line   48)
* ROOT <6>:                              Floating-point functions.
                                                             (line   10)
* ROOT <7>:                              Summary of the grammar.
                                                             (line   43)
* ROOT <8>:                              Keywords.           (line  296)
* ROUND:                                 Built-in functions. (line   16)
* ROUND <1>:                             Floating-point functions.
                                                             (line   21)
* ROUND <2>:                             Floating-point functions.
                                                             (line   31)
* ROUND <3>:                             Floating-point functions.
                                                             (line   34)
* ROUND <4>:                             Summary of the grammar.
                                                             (line   44)
* round:                                 Cache Variables.    (line  102)
* ROUND <5>:                             Keywords.           (line  298)
* run-time library:                      Run-time library.   (line    6)
* run-time library <1>:                  Run-time library functions.
                                                             (line    6)
* running programs:                      Running coNCePTuaL programs.
                                                             (line    6)
* running programs <1>:                  Problems running.   (line    6)
* runtimelib.c:                          Run-time library.   (line    6)
* runtimelib.c <1>:                      Initialization functions.
                                                             (line   11)
* runtime_random:                        make.               (line   33)
* sample programs:                       Examples.           (line    6)
* Save (GUI menu item):                  Menu bar.           (line    7)
* Save As (GUI menu item):               Menu bar.           (line    7)
* sched.h:                               Cache Variables.    (line  243)
* sched_getaffinity:                     Cache Variables.    (line  105)
* SECOND:                                Keywords.           (line  300)
* SECONDS:                               Delaying execution. (line   21)
* SECONDS <1>:                           Summary of the grammar.
                                                             (line  279)
* SECONDS <2>:                           Keywords.           (line  302)
* sed:                                   Compiling coNCePTuaL programs.
                                                             (line   93)
* sed <1>:                               Compiling coNCePTuaL programs.
                                                             (line  109)
* sed <2>:                               Compiling coNCePTuaL programs.
                                                             (line  112)
* sed <3>:                               Cache Variables.    (line  368)
* segmentation fault:                    Miscellaneous mysterious hangs or crashes.
                                                             (line   10)
* SEND:                                  Components.         (line   34)
* SEND <1>:                              Primitives.         (line   22)
* SEND <2>:                              Message specifications.
                                                             (line   26)
* SEND <3>:                              Sending.            (line    6)
* SEND <4>:                              Sending.            (line   25)
* SEND <5>:                              Sending.            (line   73)
* SEND <6>:                              Sending.            (line   77)
* SEND <7>:                              Sending.            (line  104)
* SEND <8>:                              Receiving.          (line   49)
* SEND <9>:                              Receiving.          (line   64)
* SEND <10>:                             Receiving.          (line   65)
* SEND <11>:                             Receiving.          (line   71)
* SEND <12>:                             Keywords.           (line  304)
* SENDS:                                 Sending.            (line   11)
* SENDS <1>:                             Sending.            (line   15)
* SENDS <2>:                             Sending.            (line   25)
* SENDS <3>:                             Multicasting.       (line   39)
* SENDS <4>:                             Summary of the grammar.
                                                             (line  169)
* SENDS <5>:                             Summary of the grammar.
                                                             (line  173)
* SENDS <6>:                             Keywords.           (line  306)
* send_stmt:                             Sending.            (line   10)
* send_stmt <1>:                         Sending.            (line   39)
* send_stmt <2>:                         Sending.            (line   74)
* send_stmt <3>:                         Receiving.          (line    6)
* send_stmt <4>:                         Receiving.          (line   10)
* send_stmt <5>:                         Receiving.          (line   56)
* send_stmt <6>:                         Multicasting.       (line    6)
* send_stmt <7>:                         Multicasting.       (line   19)
* send_stmt <8>:                         Complex statements. (line   31)
* send_stmt <9>:                         Summary of the grammar.
                                                             (line  168)
* send_stmt <10>:                        Summary of the grammar.
                                                             (line  240)
* send_stmt <11>:                        Memory efficiency.  (line   16)
* set functions:                         Unordered-set functions.
                                                             (line    6)
* setitimer:                             Time-related functions.
                                                             (line  128)
* setitimer <1>:                         Time-related functions.
                                                             (line  129)
* setitimer <2>:                         Cache Variables.    (line  108)
* Settings (GUI menu item):              Menu bar.           (line   18)
* shared objects:                        ``cannot open shared object file''.
                                                             (line    6)
* sheets:                                Installing stylesheets.
                                                             (line   31)
* shuffling task IDs:                    Reordering task IDs.
                                                             (line    6)
* sigaction:                             Cache Variables.    (line  111)
* signal:                                Cache Variables.    (line  114)
* signal.h:                              Cache Variables.    (line  246)
* signals:                               Keeping programs from dying on a signal.
                                                             (line    6)
* simple_stmt:                           Default c_trace tracing.
                                                             (line   37)
* simple_stmt <1>:                       The libsea_ast backend.
                                                             (line   25)
* simple_stmt <2>:                       Complex statements. (line   10)
* simple_stmt <3>:                       Complex statements. (line   16)
* simple_stmt <4>:                       Complex statements. (line   23)
* simple_stmt <5>:                       Complex statements. (line   24)
* simple_stmt <6>:                       Complex statements. (line   25)
* simple_stmt <7>:                       Complex statements. (line   27)
* simple_stmt <8>:                       Complex statements. (line   28)
* simple_stmt <9>:                       Complex statements. (line   29)
* simple_stmt <10>:                      Complex statements. (line   29)
* simple_stmt <11>:                      Complex statements. (line   51)
* simple_stmt <12>:                      Iterating.          (line    7)
* simple_stmt <13>:                      Counted loops.      (line    6)
* simple_stmt <14>:                      Counted loops.      (line    8)
* simple_stmt <15>:                      Counted loops.      (line   10)
* simple_stmt <16>:                      Counted loops.      (line   18)
* simple_stmt <17>:                      Range loops.        (line   13)
* simple_stmt <18>:                      Range loops.        (line   20)
* simple_stmt <19>:                      Timed loops.        (line   11)
* simple_stmt <20>:                      Timed loops.        (line   29)
* simple_stmt <21>:                      Binding variables.  (line   22)
* simple_stmt <22>:                      Conditional execution.
                                                             (line   10)
* simple_stmt <23>:                      Conditional execution.
                                                             (line   11)
* simple_stmt <24>:                      Conditional execution.
                                                             (line   14)
* simple_stmt <25>:                      Conditional execution.
                                                             (line   15)
* simple_stmt <26>:                      Grouping.           (line    6)
* simple_stmt <27>:                      Grouping.           (line    7)
* simple_stmt <28>:                      Grouping.           (line    8)
* simple_stmt <29>:                      Grouping.           (line    9)
* simple_stmt <30>:                      Grouping.           (line   10)
* simple_stmt <31>:                      Grouping.           (line   35)
* simple_stmt <32>:                      Complete programs.  (line   17)
* simple_stmt <33>:                      Complete programs.  (line   18)
* simple_stmt <34>:                      Top-level statements and log files.
                                                             (line   15)
* simple_stmt <35>:                      Top-level statements and log files.
                                                             (line   23)
* simple_stmt <36>:                      Summary of the grammar.
                                                             (line  230)
* simple_stmt <37>:                      Summary of the grammar.
                                                             (line  232)
* simple_stmt <38>:                      Summary of the grammar.
                                                             (line  233)
* simple_stmt <39>:                      Summary of the grammar.
                                                             (line  234)
* simple_stmt <40>:                      Summary of the grammar.
                                                             (line  236)
* simple_stmt <41>:                      Summary of the grammar.
                                                             (line  237)
* simple_stmt <42>:                      Summary of the grammar.
                                                             (line  238)
* simple_stmt <43>:                      Summary of the grammar.
                                                             (line  238)
* simple_stmt <44>:                      Summary of the grammar.
                                                             (line  269)
* simple_stmt <45>:                      Summary of the grammar.
                                                             (line  270)
* single-stepping:                       c_trace tracing with curses.
                                                             (line   18)
* single-stepping <1>:                   c_trace tracing with curses.
                                                             (line   57)
* single-stepping <2>:                   c_trace tracing with curses.
                                                             (line   62)
* single-stepping <3>:                   c_trace tracing with curses.
                                                             (line   75)
* single-stepping <4>:                   Offline tracing with curses.
                                                             (line   34)
* SIZED:                                 Item size.          (line   11)
* SIZED <1>:                             Summary of the grammar.
                                                             (line  157)
* SIZED <2>:                             Keywords.           (line  308)
* SLEEP:                                 Components.         (line   64)
* SLEEP <1>:                             Delaying execution. (line    9)
* SLEEP <2>:                             Delaying execution. (line   23)
* sleep:                                 Cache Variables.    (line  117)
* SLEEP <3>:                             Keywords.           (line  310)
* SLEEPS:                                The interpret backend.
                                                             (line   16)
* SLEEPS <1>:                            The picl backend.   (line   19)
* SLEEPS <2>:                            The paraver backend.
                                                             (line   17)
* SLEEPS <3>:                            Tag matching.       (line   48)
* SLEEPS <4>:                            Delaying execution. (line   13)
* SLEEPS <5>:                            Summary of the grammar.
                                                             (line  276)
* SLEEPS <6>:                            Time-related functions.
                                                             (line  139)
* SLEEPS <7>:                            Keywords.           (line  312)
* SLOCCount:                             SLOCCount.          (line    6)
* SLOCCount <1>:                         SLOCCount.          (line    7)
* SLOCCount <2>:                         SLOCCount.          (line   10)
* SLOCCount <3>:                         SLOCCount.          (line   21)
* SLOCCount <4>:                         Referenced Applications.
                                                             (line   47)
* smart preprocessing:                   undefined type found DEFINE____.
                                                             (line   12)
* Source-highlight:                      make.               (line  112)
* Source-highlight <1>:                  Installing stylesheets.
                                                             (line   67)
* Source-highlight <2>:                  Referenced Applications.
                                                             (line   49)
* source_task:                           Task descriptions.  (line   17)
* source_task <1>:                       Task descriptions.  (line   20)
* source_task <2>:                       Source tasks.       (line    6)
* source_task <3>:                       Source tasks.       (line    8)
* source_task <4>:                       Source tasks.       (line   37)
* source_task <5>:                       Target tasks.       (line   14)
* source_task <6>:                       Target tasks.       (line   19)
* source_task <7>:                       Target tasks.       (line   21)
* source_task <8>:                       Target tasks.       (line   21)
* source_task <9>:                       Communication statements.
                                                             (line   21)
* source_task <10>:                      Sending.            (line   10)
* source_task <11>:                      Sending.            (line   14)
* source_task <12>:                      Sending.            (line   21)
* source_task <13>:                      Sending.            (line   25)
* source_task <14>:                      Receiving.          (line   10)
* source_task <15>:                      Receiving.          (line   16)
* source_task <16>:                      Receiving.          (line   19)
* source_task <17>:                      Receiving.          (line   22)
* source_task <18>:                      Receiving.          (line   24)
* source_task <19>:                      Receiving.          (line   30)
* source_task <20>:                      Awaiting completion.
                                                             (line   12)
* source_task <21>:                      Awaiting completion.
                                                             (line   16)
* source_task <22>:                      Multicasting.       (line   14)
* source_task <23>:                      Multicasting.       (line   24)
* source_task <24>:                      Reducing.           (line   21)
* source_task <25>:                      Reducing.           (line   24)
* source_task <26>:                      Reducing.           (line   26)
* source_task <27>:                      Reducing.           (line   32)
* source_task <28>:                      Synchronizing.      (line   10)
* source_task <29>:                      Writing to standard output.
                                                             (line   11)
* source_task <30>:                      Writing to a log file.
                                                             (line   11)
* source_task <31>:                      Computing aggregates.
                                                             (line   16)
* source_task <32>:                      Resetting counters. (line   10)
* source_task <33>:                      Storing counter values.
                                                             (line    9)
* source_task <34>:                      Restoring counter values.
                                                             (line    9)
* source_task <35>:                      Binding variables.  (line   27)
* source_task <36>:                      Binding variables.  (line   38)
* source_task <37>:                      Delaying execution. (line   12)
* source_task <38>:                      Delaying execution. (line   16)
* source_task <39>:                      Simulating computation.
                                                             (line   14)
* source_task <40>:                      Simulating computation.
                                                             (line   25)
* source_task <41>:                      Priming message buffers.
                                                             (line   15)
* source_task <42>:                      Reordering task IDs.
                                                             (line   21)
* source_task <43>:                      Injecting arbitrary code.
                                                             (line   12)
* source_task <44>:                      Summary of the grammar.
                                                             (line   89)
* source_task <45>:                      Summary of the grammar.
                                                             (line  168)
* source_task <46>:                      Summary of the grammar.
                                                             (line  172)
* source_task <47>:                      Summary of the grammar.
                                                             (line  182)
* source_task <48>:                      Summary of the grammar.
                                                             (line  184)
* source_task <49>:                      Summary of the grammar.
                                                             (line  187)
* source_task <50>:                      Summary of the grammar.
                                                             (line  192)
* source_task <51>:                      Summary of the grammar.
                                                             (line  195)
* source_task <52>:                      Summary of the grammar.
                                                             (line  197)
* source_task <53>:                      Summary of the grammar.
                                                             (line  202)
* source_task <54>:                      Summary of the grammar.
                                                             (line  208)
* source_task <55>:                      Summary of the grammar.
                                                             (line  213)
* source_task <56>:                      Summary of the grammar.
                                                             (line  218)
* source_task <57>:                      Summary of the grammar.
                                                             (line  221)
* source_task <58>:                      Summary of the grammar.
                                                             (line  224)
* source_task <59>:                      Summary of the grammar.
                                                             (line  227)
* source_task <60>:                      Summary of the grammar.
                                                             (line  260)
* source_task <61>:                      Summary of the grammar.
                                                             (line  275)
* source_task <62>:                      Summary of the grammar.
                                                             (line  281)
* source_task <63>:                      Summary of the grammar.
                                                             (line  288)
* source_task <64>:                      Summary of the grammar.
                                                             (line  294)
* source_task <65>:                      Summary of the grammar.
                                                             (line  298)
* space:                                 Primitives.         (line   31)
* space <1>:                             Primitives.         (line   42)
* spinning:                              Delaying execution. (line    6)
* SQRT:                                  Built-in functions. (line   15)
* SQRT <1>:                              Integer functions.  (line   47)
* SQRT <2>:                              Floating-point functions.
                                                             (line   10)
* SQRT <3>:                              Summary of the grammar.
                                                             (line   43)
* SQRT <4>:                              Keywords.           (line  314)
* stack functions:                       Queue functions.    (line   50)
* STANDARD:                              Keywords.           (line  316)
* STANDARD DEVIATION:                    Aggregate functions.
                                                             (line   10)
* STANDARD DEVIATION <1>:                Summary of the grammar.
                                                             (line   59)
* standard output:                       Writing to standard output.
                                                             (line    6)
* statements, communication:             Communication statements.
                                                             (line    6)
* STATIC_FILE_DATA:                      Built-in functions. (line   23)
* STATIC_FILE_DATA <1>:                  File-reading functions.
                                                             (line   80)
* STATIC_FILE_DATA <2>:                  File-reading functions.
                                                             (line   89)
* STATIC_FILE_DATA <3>:                  File-reading functions.
                                                             (line   95)
* STATIC_FILE_DATA <4>:                  File-reading functions.
                                                             (line  101)
* STATIC_FILE_DATA <5>:                  File-reading functions.
                                                             (line  104)
* STATIC_FILE_DATA <6>:                  Summary of the grammar.
                                                             (line   51)
* STATIC_FILE_DATA <7>:                  Keywords.           (line  318)
* stats (codegen_stats.py):              Supplied backends.  (line   37)
* stats (codegen_stats.py) <1>:          The stats backend.  (line    6)
* stats (codegen_stats.py) <2>:          The stats backend.  (line   10)
* stats (codegen_stats.py) <3>:          The stats backend.  (line   94)
* stats (codegen_stats.py) <4>:          The stats backend.  (line   97)
* stats (codegen_stats.py) <5>:          The stats backend.  (line   98)
* stats (codegen_stats.py) <6>:          The stats backend.  (line  108)
* stats (codegen_stats.py) <7>:          The stats backend.  (line  135)
* stats (codegen_stats.py) <8>:          The stats backend.  (line  144)
* stats (codegen_stats.py) <9>:          The stats backend.  (line  150)
* stdint.h:                              Cache Variables.    (line  249)
* stdlib.h:                              Cache Variables.    (line  252)
* STORE:                                 Restoring counter values.
                                                             (line   20)
* STORE <1>:                             Restoring counter values.
                                                             (line   42)
* STORE <2>:                             Restoring counter values.
                                                             (line   42)
* STORE <3>:                             Restoring counter values.
                                                             (line   44)
* STORE <4>:                             Restoring counter values.
                                                             (line   49)
* STORE <5>:                             Restoring counter values.
                                                             (line   81)
* STORE <6>:                             Keywords.           (line  320)
* STORE ITS COUNTERS:                    Counter and timer statements.
                                                             (line   18)
* STORES:                                Restoring counter values.
                                                             (line   19)
* STORES <1>:                            Keywords.           (line  322)
* STORES ITS COUNTERS:                   Storing counter values.
                                                             (line   10)
* STORES ITS COUNTERS <1>:               Summary of the grammar.
                                                             (line  225)
* store_stmt:                            Storing counter values.
                                                             (line    9)
* store_stmt <1>:                        Restoring counter values.
                                                             (line   15)
* store_stmt <2>:                        Complex statements. (line   41)
* store_stmt <3>:                        Summary of the grammar.
                                                             (line  224)
* store_stmt <4>:                        Summary of the grammar.
                                                             (line  250)
* strcasestr:                            Cache Variables.    (line  120)
* strdup:                                Memory-allocation functions.
                                                             (line   52)
* strerror:                              Cache Variables.    (line  123)
* STRIDE:                                Keywords.           (line  324)
* string:                                Message specifications.
                                                             (line   19)
* string <1>:                            Message specifications.
                                                             (line   40)
* string <2>:                            Message specifications.
                                                             (line   59)
* string <3>:                            Message specifications.
                                                             (line   70)
* string <4>:                            Tag matching.       (line    9)
* string <5>:                            Tag matching.       (line   59)
* string <6>:                            Tag matching.       (line   68)
* string <7>:                            Utilizing log-file comments.
                                                             (line   12)
* string <8>:                            Utilizing log-file comments.
                                                             (line   13)
* string <9>:                            Asserting conditions.
                                                             (line   10)
* string <10>:                           Asserting conditions.
                                                             (line   13)
* string <11>:                           Injecting arbitrary code.
                                                             (line   14)
* string <12>:                           Injecting arbitrary code.
                                                             (line   15)
* string <13>:                           Injecting arbitrary code.
                                                             (line   38)
* string <14>:                           Language versioning.
                                                             (line   14)
* string <15>:                           Language versioning.
                                                             (line   16)
* string <16>:                           Command-line arguments.
                                                             (line   10)
* string <17>:                           Command-line arguments.
                                                             (line   11)
* string <18>:                           Command-line arguments.
                                                             (line   11)
* string <19>:                           Command-line arguments.
                                                             (line   14)
* string <20>:                           Command-line arguments.
                                                             (line   17)
* string <21>:                           Command-line arguments.
                                                             (line   17)
* string <22>:                           Backend-specific declarations.
                                                             (line   12)
* string <23>:                           Summary of the grammar.
                                                             (line  112)
* string <24>:                           Summary of the grammar.
                                                             (line  126)
* string <25>:                           Summary of the grammar.
                                                             (line  138)
* string <26>:                           Summary of the grammar.
                                                             (line  149)
* string <27>:                           Summary of the grammar.
                                                             (line  205)
* string <28>:                           Summary of the grammar.
                                                             (line  206)
* string <29>:                           Summary of the grammar.
                                                             (line  272)
* string <30>:                           Summary of the grammar.
                                                             (line  300)
* string <31>:                           Summary of the grammar.
                                                             (line  301)
* string <32>:                           Summary of the grammar.
                                                             (line  303)
* string <33>:                           Summary of the grammar.
                                                             (line  306)
* string <34>:                           Summary of the grammar.
                                                             (line  307)
* string <35>:                           Summary of the grammar.
                                                             (line  307)
* string <36>:                           Summary of the grammar.
                                                             (line  310)
* string <37>:                           Summary of the grammar.
                                                             (line  318)
* string.h:                              Cache Variables.    (line  255)
* strings:                               Primitives.         (line   42)
* strings.h:                             Cache Variables.    (line  258)
* string_or_log_comment:                 Utilizing log-file comments.
                                                             (line   12)
* string_or_log_comment <1>:             Writing to standard output.
                                                             (line   13)
* string_or_log_comment <2>:             Writing to standard output.
                                                             (line   14)
* string_or_log_comment <3>:             Writing to a log file.
                                                             (line   13)
* string_or_log_comment <4>:             Writing to a log file.
                                                             (line   14)
* string_or_log_comment <5>:             Writing to a log file.
                                                             (line   18)
* string_or_log_comment <6>:             Writing to a log file.
                                                             (line   48)
* string_or_log_comment <7>:             Summary of the grammar.
                                                             (line  205)
* string_or_log_comment <8>:             Summary of the grammar.
                                                             (line  210)
* string_or_log_comment <9>:             Summary of the grammar.
                                                             (line  211)
* string_or_log_comment <10>:            Summary of the grammar.
                                                             (line  215)
* string_or_log_comment <11>:            Summary of the grammar.
                                                             (line  216)
* strsignal:                             Cache Variables.    (line  126)
* strtok:                                Cache Variables.    (line  129)
* strtoll:                               Cache Variables.    (line  132)
* strtoq:                                Cache Variables.    (line  135)
* stylesheets:                           make.               (line  104)
* stylesheets <1>:                       Installing stylesheets.
                                                             (line    6)
* substitutions.dat:                     undefined type found DEFINE____.
                                                             (line   11)
* SUCH:                                  Keywords.           (line  326)
* SUCH THAT:                             Restricted identifiers.
                                                             (line   12)
* SUCH THAT <1>:                         Source tasks.       (line   42)
* SUCH THAT <2>:                         Binding variables.  (line   47)
* SUCH THAT <3>:                         Summary of the grammar.
                                                             (line   87)
* SUM:                                   Aggregate functions.
                                                             (line   10)
* SUM <1>:                               Summary of the grammar.
                                                             (line   59)
* SUM <2>:                               Keywords.           (line  328)
* swig:                                  Cache Variables.    (line  370)
* swig <1>:                              Cache Variables.    (line  472)
* swig <2>:                              Cache Variables.    (line  474)
* SYNCHRONIZATION:                       Keywords.           (line  330)
* SYNCHRONIZE:                           Components.         (line   85)
* SYNCHRONIZE <1>:                       Keywords.           (line  332)
* Synchronize (GUI button):              Command bar.        (line   38)
* SYNCHRONIZES:                          Synchronizing.      (line   11)
* SYNCHRONIZES <1>:                      Counted loops.      (line   31)
* SYNCHRONIZES <2>:                      Timed loops.        (line   42)
* SYNCHRONIZES <3>:                      Summary of the grammar.
                                                             (line  203)
* SYNCHRONIZES <4>:                      Keywords.           (line  334)
* SYNCHRONIZES <5>:                      Predeclared variables.
                                                             (line   52)
* SYNCHRONOUSLY:                         Message specifications.
                                                             (line   30)
* SYNCHRONOUSLY <1>:                     Blocking semantics. (line    6)
* SYNCHRONOUSLY <2>:                     Summary of the grammar.
                                                             (line  116)
* SYNCHRONOUSLY <3>:                     Keywords.           (line  336)
* sync_stmt:                             Synchronizing.      (line   10)
* sync_stmt <1>:                         Synchronizing.      (line   13)
* sync_stmt <2>:                         Complex statements. (line   36)
* sync_stmt <3>:                         Summary of the grammar.
                                                             (line  202)
* sync_stmt <4>:                         Summary of the grammar.
                                                             (line  245)
* syntax highlighting:                   make.               (line  104)
* syntax highlighting <1>:               Installing stylesheets.
                                                             (line    6)
* sys/cfgodm.h:                          Cache Variables.    (line  261)
* sys/mman.h:                            Cache Variables.    (line  264)
* sys/param.h:                           Cache Variables.    (line  267)
* sys/resource.h:                        Cache Variables.    (line  270)
* sys/select.h:                          Cache Variables.    (line  273)
* sys/stat.h:                            Cache Variables.    (line  276)
* sys/sysctl.h:                          Cache Variables.    (line  279)
* sys/sysinfo.h:                         Cache Variables.    (line  282)
* sys/sysmp.h:                           Cache Variables.    (line  285)
* sys/syssgi.h:                          Cache Variables.    (line  288)
* sys/time.h:                            Cache Variables.    (line  291)
* sys/types.h:                           Cache Variables.    (line  294)
* sys/utsname.h:                         Cache Variables.    (line  297)
* sys/wait.h:                            Cache Variables.    (line  300)
* sysconf:                               ``Unable to determine the OS page size''.
                                                             (line   10)
* sysconf <1>:                           Cache Variables.    (line  138)
* sysctl:                                Cache Variables.    (line  141)
* sysfs_open_class:                      Cache Variables.    (line  330)
* sysmp:                                 Cache Variables.    (line  144)
* syssgi:                                Cache Variables.    (line  147)
* system:                                configure.          (line   59)
* system <1>:                            Environment Variables.
                                                             (line   91)
* tag:                                   The c_udgram backend.
                                                             (line   38)
* TAG:                                   Keywords.           (line  338)
* TAGS:                                  make.               (line  159)
* tags, message:                         Tag matching.       (line    6)
* target_tasks:                          Task descriptions.  (line   16)
* target_tasks <1>:                      Task descriptions.  (line   20)
* target_tasks <2>:                      Target tasks.       (line    6)
* target_tasks <3>:                      Target tasks.       (line    8)
* target_tasks <4>:                      Target tasks.       (line   19)
* target_tasks <5>:                      Target tasks.       (line   23)
* target_tasks <6>:                      Communication statements.
                                                             (line   22)
* target_tasks <7>:                      Sending.            (line   13)
* target_tasks <8>:                      Sending.            (line   17)
* target_tasks <9>:                      Sending.            (line   23)
* target_tasks <10>:                     Sending.            (line   26)
* target_tasks <11>:                     Sending.            (line   34)
* target_tasks <12>:                     Receiving.          (line   11)
* target_tasks <13>:                     Receiving.          (line   13)
* target_tasks <14>:                     Receiving.          (line   18)
* target_tasks <15>:                     Receiving.          (line   22)
* target_tasks <16>:                     Receiving.          (line   24)
* target_tasks <17>:                     Receiving.          (line   29)
* target_tasks <18>:                     Receiving.          (line   51)
* target_tasks <19>:                     Multicasting.       (line   17)
* target_tasks <20>:                     Multicasting.       (line   21)
* target_tasks <21>:                     Multicasting.       (line   24)
* target_tasks <22>:                     Summary of the grammar.
                                                             (line   96)
* target_tasks <23>:                     Summary of the grammar.
                                                             (line  171)
* target_tasks <24>:                     Summary of the grammar.
                                                             (line  175)
* target_tasks <25>:                     Summary of the grammar.
                                                             (line  179)
* target_tasks <26>:                     Summary of the grammar.
                                                             (line  190)
* TASK:                                  Primitives.         (line   26)
* TASK <1>:                              Source tasks.       (line   10)
* TASK <2>:                              Source tasks.       (line   12)
* TASK <3>:                              Source tasks.       (line   22)
* TASK <4>:                              Target tasks.       (line    9)
* TASK <5>:                              Target tasks.       (line   11)
* TASK <6>:                              Summary of the grammar.
                                                             (line   91)
* TASK <7>:                              Summary of the grammar.
                                                             (line   93)
* TASK <8>:                              Summary of the grammar.
                                                             (line   97)
* TASK <9>:                              Summary of the grammar.
                                                             (line   99)
* TASK <10>:                             Keywords.           (line  340)
* TASK GROUP:                            Source tasks.       (line   36)
* TASK GROUP <1>:                        Binding variables.  (line   39)
* TASK GROUP <2>:                        Binding variables.  (line   46)
* task-mapping functions:                Processor/task mapping functions.
                                                             (line    6)
* task-mapping functions <1>:            Task-mapping functions.
                                                             (line    6)
* TASKS:                                 Primitives.         (line   26)
* TASKS <1>:                             Source tasks.       (line   11)
* TASKS <2>:                             Source tasks.       (line   13)
* TASKS <3>:                             Source tasks.       (line   26)
* TASKS <4>:                             Source tasks.       (line   40)
* TASKS <5>:                             Source tasks.       (line   42)
* TASKS <6>:                             Target tasks.       (line   10)
* TASKS <7>:                             Target tasks.       (line   12)
* tasks:                                 Task descriptions.  (line    6)
* tasks <1>:                             Source tasks.       (line    6)
* tasks <2>:                             Target tasks.       (line    6)
* tasks <3>:                             Using out-of-bound task IDs to simplify code.
                                                             (line    6)
* TASKS <8>:                             Binding variables.  (line   47)
* TASKS <9>:                             Summary of the grammar.
                                                             (line   92)
* TASKS <10>:                            Summary of the grammar.
                                                             (line   94)
* TASKS <11>:                            Summary of the grammar.
                                                             (line   98)
* TASKS <12>:                            Summary of the grammar.
                                                             (line  100)
* TASKS <13>:                            Keywords.           (line  344)
* TASKS {3, 5, 8}:                       Source tasks.       (line   41)
* TASK_OF:                               Built-in functions. (line   22)
* TASK_OF <1>:                           Processor/task mapping functions.
                                                             (line   14)
* TASK_OF <2>:                           Summary of the grammar.
                                                             (line   50)
* TASK_OF <3>:                           Keywords.           (line  342)
* tcsh:                                  Running coNCePTuaL programs.
                                                             (line  113)
* tests:                                 make.               (line   29)
* TESTS_ENVIRONMENT:                     Cross-compilation.  (line   77)
* TeX:                                   Installing stylesheets.
                                                             (line   15)
* TeX <1>:                               Installing stylesheets.
                                                             (line   16)
* TeX <2>:                               The latex_vis backend.
                                                             (line   93)
* TeX <3>:                               ``TeX capacity exceeded''.
                                                             (line    6)
* TeX <4>:                               ``TeX capacity exceeded''.
                                                             (line    8)
* TeX <5>:                               ``TeX capacity exceeded''.
                                                             (line   18)
* TeX <6>:                               ``TeX capacity exceeded''.
                                                             (line   19)
* TeX <7>:                               ``TeX capacity exceeded''.
                                                             (line   25)
* TeX <8>:                               Referenced Applications.
                                                             (line   51)
* TEXTOEPS:                              Further customizations.
                                                             (line   27)
* THAN:                                  Keywords.           (line  346)
* THAT:                                  Keywords.           (line  348)
* THE:                                   Aggregate expressions.
                                                             (line   12)
* THE <1>:                               Aggregate expressions.
                                                             (line   13)
* THE <2>:                               Aggregate expressions.
                                                             (line   13)
* THE <3>:                               Aggregate expressions.
                                                             (line   13)
* THE <4>:                               Aggregate expressions.
                                                             (line   14)
* THE <5>:                               Writing to a log file.
                                                             (line   54)
* THE <6>:                               Writing to a log file.
                                                             (line   58)
* THE <7>:                               Summary of the grammar.
                                                             (line   54)
* THE <8>:                               Summary of the grammar.
                                                             (line   55)
* THE <9>:                               Summary of the grammar.
                                                             (line   55)
* THE <10>:                              Summary of the grammar.
                                                             (line   55)
* THE <11>:                              Summary of the grammar.
                                                             (line   56)
* THE <12>:                              Keywords.           (line  350)
* THE BACKEND DECLARES:                  Backend-specific declarations.
                                                             (line   12)
* THE BACKEND DECLARES <1>:              Summary of the grammar.
                                                             (line  310)
* THE CURRENT MESSAGE BUFFER:            Priming message buffers.
                                                             (line   19)
* THE CURRENT MESSAGE BUFFER <1>:        Summary of the grammar.
                                                             (line  292)
* THE DEFAULT BUFFER:                    Message specifications.
                                                             (line   21)
* THE DEFAULT BUFFER <1>:                Message specifications.
                                                             (line   42)
* THE DEFAULT BUFFER <2>:                Message specifications.
                                                             (line   61)
* THE DEFAULT BUFFER <3>:                Message specifications.
                                                             (line   72)
* THE DEFAULT BUFFER <4>:                Summary of the grammar.
                                                             (line  114)
* THE DEFAULT BUFFER <5>:                Summary of the grammar.
                                                             (line  128)
* THE DEFAULT BUFFER <6>:                Summary of the grammar.
                                                             (line  140)
* THE DEFAULT BUFFER <7>:                Summary of the grammar.
                                                             (line  151)
* THE VALUE OF:                          Utilizing log-file comments.
                                                             (line   13)
* THE VALUE OF <1>:                      Utilizing log-file comments.
                                                             (line   18)
* THE VALUE OF <2>:                      Summary of the grammar.
                                                             (line  206)
* THE VALUE OF <3>:                      Log-file functions. (line   96)
* THEIR:                                 Keywords.           (line  352)
* THEM:                                  Keywords.           (line  354)
* THEN:                                  Complex statements. (line   16)
* THEN <1>:                              Complex statements. (line   29)
* THEN <2>:                              Complex statements. (line   50)
* THEN <3>:                              Combining statements.
                                                             (line    6)
* THEN <4>:                              Combining statements.
                                                             (line   15)
* THEN <5>:                              Conditional execution.
                                                             (line   10)
* THEN <6>:                              Simulating computation.
                                                             (line   79)
* THEN <7>:                              Summary of the grammar.
                                                             (line  230)
* THEN <8>:                              Summary of the grammar.
                                                             (line  238)
* THEN <9>:                              Summary of the grammar.
                                                             (line  269)
* THEN <10>:                             Keywords.           (line  356)
* time:                                  Cache Variables.    (line  150)
* TIME:                                  Keywords.           (line  358)
* time-related functions:                Time-related functions.
                                                             (line    6)
* time.h:                                Cache Variables.    (line  303)
* TIMELINE:                              Further customizations.
                                                             (line   27)
* timer selection:                       Time-related functions.
                                                             (line   37)
* timer validation:                      Validating the coNCePTuaL timer.
                                                             (line    6)
* TIMES:                                 Simulating computation.
                                                             (line   18)
* TIMES <1>:                             Summary of the grammar.
                                                             (line  285)
* TIMES <2>:                             Keywords.           (line  360)
* time_unit:                             Complex statements. (line   26)
* time_unit <1>:                         Complex statements. (line   26)
* time_unit <2>:                         Timed loops.        (line   11)
* time_unit <3>:                         Timed loops.        (line   11)
* time_unit <4>:                         Timed loops.        (line   13)
* time_unit <5>:                         Timed loops.        (line   28)
* time_unit <6>:                         Timed loops.        (line   29)
* time_unit <7>:                         Delaying execution. (line   14)
* time_unit <8>:                         Delaying execution. (line   18)
* time_unit <9>:                         Delaying execution. (line   18)
* time_unit <10>:                        Delaying execution. (line   21)
* time_unit <11>:                        Summary of the grammar.
                                                             (line  235)
* time_unit <12>:                        Summary of the grammar.
                                                             (line  235)
* time_unit <13>:                        Summary of the grammar.
                                                             (line  277)
* time_unit <14>:                        Summary of the grammar.
                                                             (line  279)
* timings, invalid:                      Invalid timing measurements.
                                                             (line    6)
* tips and Tricks:                       Tips and Tricks.    (line    6)
* TO:                                    Sending.            (line   13)
* TO <1>:                                Sending.            (line   17)
* TO <2>:                                Sending.            (line   26)
* TO <3>:                                Multicasting.       (line   17)
* TO <4>:                                Reducing.           (line   24)
* TO <5>:                                Reducing.           (line   29)
* TO <6>:                                Reducing.           (line   45)
* TO <7>:                                Summary of the grammar.
                                                             (line  171)
* TO <8>:                                Summary of the grammar.
                                                             (line  175)
* TO <9>:                                Summary of the grammar.
                                                             (line  190)
* TO <10>:                               Summary of the grammar.
                                                             (line  195)
* TO <11>:                               Summary of the grammar.
                                                             (line  200)
* TO <12>:                               Keywords.           (line  362)
* TO UNSUSPECTING:                       Receiving.          (line   49)
* TO UNSUSPECTING <1>:                   Receiving.          (line   66)
* topology functions:                    Topology-function descriptions.
                                                             (line    6)
* top_level_complex_stmt:                Complete programs.  (line   13)
* top_level_complex_stmt <1>:            Complete programs.  (line   15)
* top_level_complex_stmt <2>:            Top-level statements and log files.
                                                             (line    6)
* top_level_complex_stmt <3>:            Top-level statements and log files.
                                                             (line    7)
* top_level_complex_stmt <4>:            Top-level statements and log files.
                                                             (line   29)
* top_level_complex_stmt <5>:            Summary of the grammar.
                                                             (line  313)
* top_level_complex_stmt <6>:            Summary of the grammar.
                                                             (line  315)
* torus functions:                       Mesh/torus functions.
                                                             (line    6)
* total_bytes:                           Predeclared variables.
                                                             (line   23)
* total_bytes <1>:                       Predeclared variables.
                                                             (line   39)
* total_bytes <2>:                       Predeclared variables.
                                                             (line   46)
* total_msgs:                            Storing counter values.
                                                             (line   14)
* total_msgs <1>:                        Restoring counter values.
                                                             (line   13)
* total_msgs <2>:                        Predeclared variables.
                                                             (line   25)
* total_msgs <3>:                        Predeclared variables.
                                                             (line   38)
* total_msgs <4>:                        Predeclared variables.
                                                             (line   44)
* TOUCH:                                 Simulating computation.
                                                             (line   53)
* TOUCH <1>:                             Keywords.           (line  364)
* TOUCHES:                               The interpret backend.
                                                             (line   16)
* TOUCHES <1>:                           The picl backend.   (line   19)
* TOUCHES <2>:                           The paraver backend.
                                                             (line   17)
* TOUCHES <3>:                           Touching memory.    (line    6)
* TOUCHES <4>:                           Simulating computation.
                                                             (line   15)
* TOUCHES <5>:                           Priming message buffers.
                                                             (line   12)
* TOUCHES <6>:                           Priming message buffers.
                                                             (line   16)
* TOUCHES <7>:                           Priming message buffers.
                                                             (line   22)
* TOUCHES <8>:                           Priming message buffers.
                                                             (line   23)
* TOUCHES <9>:                           Summary of the grammar.
                                                             (line  282)
* TOUCHES <10>:                          Summary of the grammar.
                                                             (line  289)
* TOUCHES <11>:                          Message-buffer manipulation functions.
                                                             (line   38)
* TOUCHES <12>:                          Message-buffer manipulation functions.
                                                             (line   67)
* TOUCHES <13>:                          Keywords.           (line  366)
* TOUCHING:                              Keywords.           (line  368)
* touching data:                         Data touching.      (line    6)
* touching data <1>:                     Touching memory.    (line    6)
* touch_buffer_stmt:                     Complex statements. (line   46)
* touch_buffer_stmt <1>:                 Priming message buffers.
                                                             (line   15)
* touch_buffer_stmt <2>:                 Priming message buffers.
                                                             (line   39)
* touch_buffer_stmt <3>:                 Priming message buffers.
                                                             (line   44)
* touch_buffer_stmt <4>:                 Summary of the grammar.
                                                             (line  255)
* touch_buffer_stmt <5>:                 Summary of the grammar.
                                                             (line  288)
* touch_stmt:                            Complex statements. (line   45)
* touch_stmt <1>:                        Simulating computation.
                                                             (line   14)
* touch_stmt <2>:                        Simulating computation.
                                                             (line   24)
* touch_stmt <3>:                        Simulating computation.
                                                             (line   36)
* touch_stmt <4>:                        Simulating computation.
                                                             (line   55)
* touch_stmt <5>:                        Simulating computation.
                                                             (line   68)
* touch_stmt <6>:                        Simulating computation.
                                                             (line   83)
* touch_stmt <7>:                        Simulating computation.
                                                             (line   84)
* touch_stmt <8>:                        Summary of the grammar.
                                                             (line  254)
* touch_stmt <9>:                        Summary of the grammar.
                                                             (line  281)
* touch_stmt <10>:                       Memory efficiency.  (line   17)
* tracing:                               The c_trace backend.
                                                             (line    6)
* tree functions:                        n-ary tree functions.
                                                             (line    6)
* tree functions <1>:                    k-nomial tree functions.
                                                             (line    6)
* trees:                                 Multicast trees.    (line    6)
* TREE_CHILD:                            Built-in functions. (line   17)
* TREE_CHILD <1>:                        n-ary tree functions.
                                                             (line    9)
* TREE_CHILD <2>:                        n-ary tree functions.
                                                             (line   18)
* TREE_CHILD <3>:                        Summary of the grammar.
                                                             (line   45)
* TREE_CHILD <4>:                        Keywords.           (line  370)
* TREE_PARENT:                           Built-in functions. (line   17)
* TREE_PARENT <1>:                       n-ary tree functions.
                                                             (line    9)
* TREE_PARENT <2>:                       n-ary tree functions.
                                                             (line   12)
* TREE_PARENT <3>:                       n-ary tree functions.
                                                             (line   14)
* TREE_PARENT <4>:                       Summary of the grammar.
                                                             (line   45)
* TREE_PARENT <5>:                       Keywords.           (line  372)
* troubleshooting:                       Troubleshooting.    (line    6)
* trunc:                                 Cache Variables.    (line  153)
* typesetting conventions:               Typesetting conventions.
                                                             (line    6)
* uac:                                   ``Unaligned access'' warnings.
                                                             (line   42)
* UNALIGNED:                             Message specifications.
                                                             (line   12)
* UNALIGNED <1>:                         Message specifications.
                                                             (line   33)
* UNALIGNED <2>:                         Message specifications.
                                                             (line   53)
* UNALIGNED <3>:                         Message alignment.  (line   35)
* UNALIGNED <4>:                         Summary of the grammar.
                                                             (line  105)
* UNALIGNED <5>:                         Summary of the grammar.
                                                             (line  119)
* UNALIGNED <6>:                         Summary of the grammar.
                                                             (line  132)
* UNALIGNED <7>:                         Keywords.           (line  374)
* unaligned accesses:                    ``Unaligned access'' warnings.
                                                             (line    6)
* uname:                                 Cache Variables.    (line  156)
* unary_expr:                            Formal grammar for arithmetic expressions.
                                                             (line   19)
* unary_expr <1>:                        Formal grammar for arithmetic expressions.
                                                             (line   20)
* unary_expr <2>:                        Formal grammar for arithmetic expressions.
                                                             (line   21)
* unary_expr <3>:                        Formal grammar for arithmetic expressions.
                                                             (line   22)
* unary_expr <4>:                        Formal grammar for arithmetic expressions.
                                                             (line   23)
* unary_expr <5>:                        Formal grammar for arithmetic expressions.
                                                             (line   24)
* unary_expr <6>:                        Formal grammar for arithmetic expressions.
                                                             (line   25)
* unary_expr <7>:                        Formal grammar for arithmetic expressions.
                                                             (line   27)
* unary_expr <8>:                        Formal grammar for arithmetic expressions.
                                                             (line   29)
* unary_expr <9>:                        Formal grammar for arithmetic expressions.
                                                             (line   30)
* unary_expr <10>:                       Summary of the grammar.
                                                             (line   20)
* unary_expr <11>:                       Summary of the grammar.
                                                             (line   21)
* unary_expr <12>:                       Summary of the grammar.
                                                             (line   22)
* unary_expr <13>:                       Summary of the grammar.
                                                             (line   23)
* unary_expr <14>:                       Summary of the grammar.
                                                             (line   24)
* unary_expr <15>:                       Summary of the grammar.
                                                             (line   25)
* unary_expr <16>:                       Summary of the grammar.
                                                             (line   26)
* unary_expr <17>:                       Summary of the grammar.
                                                             (line   28)
* unary_expr <18>:                       Summary of the grammar.
                                                             (line   30)
* unary_expr <19>:                       Summary of the grammar.
                                                             (line   31)
* unary_operator:                        Formal grammar for arithmetic expressions.
                                                             (line   30)
* unary_operator <1>:                    Formal grammar for arithmetic expressions.
                                                             (line   32)
* unary_operator <2>:                    Summary of the grammar.
                                                             (line   31)
* unary_operator <3>:                    Summary of the grammar.
                                                             (line   33)
* undefined type:                        undefined type found DEFINE____.
                                                             (line    6)
* Undo (GUI menu item):                  Menu bar.           (line   15)
* UNIQUE:                                Implementation of reductions.
                                                             (line   17)
* UNIQUE <1>:                            Message specifications.
                                                             (line   10)
* UNIQUE <2>:                            Message specifications.
                                                             (line   32)
* UNIQUE <3>:                            Message specifications.
                                                             (line   52)
* UNIQUE <4>:                            Message specifications.
                                                             (line   64)
* UNIQUE <5>:                            Unique messages.    (line    8)
* UNIQUE <6>:                            Buffer control.     (line    7)
* UNIQUE <7>:                            Priming message buffers.
                                                             (line   35)
* UNIQUE <8>:                            Summary of the grammar.
                                                             (line  103)
* UNIQUE <9>:                            Summary of the grammar.
                                                             (line  118)
* UNIQUE <10>:                           Summary of the grammar.
                                                             (line  131)
* UNIQUE <11>:                           Summary of the grammar.
                                                             (line  143)
* UNIQUE <12>:                           Generated code.     (line   74)
* UNIQUE <13>:                           Keywords.           (line  376)
* unistd.h:                              Cache Variables.    (line  306)
* UNSUSPECTING:                          Sending.            (line   13)
* UNSUSPECTING <1>:                      Sending.            (line   34)
* UNSUSPECTING <2>:                      Sending.            (line   72)
* UNSUSPECTING <3>:                      Sending.            (line  104)
* UNSUSPECTING <4>:                      Receiving.          (line    6)
* UNSUSPECTING <5>:                      Multicasting.       (line   19)
* UNSUSPECTING <6>:                      Synchronizing.      (line   17)
* UNSUSPECTING <7>:                      Summary of the grammar.
                                                             (line  171)
* UNSUSPECTING <8>:                      Keywords.           (line  378)
* USING:                                 Keywords.           (line  380)
* USING TAG:                             Message specifications.
                                                             (line   18)
* USING TAG <1>:                         Message specifications.
                                                             (line   39)
* USING TAG <2>:                         Message specifications.
                                                             (line   58)
* USING TAG <3>:                         Message specifications.
                                                             (line   69)
* USING TAG <4>:                         Tag matching.       (line    7)
* USING TAG <5>:                         Tag matching.       (line    8)
* USING TAG <6>:                         Tag matching.       (line   12)
* USING TAG <7>:                         Tag matching.       (line   15)
* USING TAG <8>:                         Summary of the grammar.
                                                             (line  111)
* USING TAG <9>:                         Summary of the grammar.
                                                             (line  125)
* USING TAG <10>:                        Summary of the grammar.
                                                             (line  137)
* USING TAG <11>:                        Summary of the grammar.
                                                             (line  148)
* uuid/uuid.h:                           Cache Variables.    (line  309)
* validatetimer:                         configure.          (line   70)
* validatetimer <1>:                     Validating the coNCePTuaL timer.
                                                             (line    6)
* validatetimer <2>:                     Validating the coNCePTuaL timer.
                                                             (line    6)
* validatetimer <3>:                     Validating the coNCePTuaL timer.
                                                             (line   40)
* validatetimer <4>:                     Validating the coNCePTuaL timer.
                                                             (line   28)
* validatetimer <5>:                     Time-related functions.
                                                             (line   15)
* validatetimer <6>:                     Invalid timing measurements.
                                                             (line   17)
* VALUE:                                 Keywords.           (line  382)
* variability in data values:            Extremely noisy measurements.
                                                             (line    6)
* variable assignment:                   Binding variables.  (line    6)
* variables, binding:                    Binding variables.  (line    6)
* variables, configure cache:            Manual configuration.
                                                             (line   29)
* variables, configure cache <1>:        Cache Variables.    (line    6)
* variables, environment:                Typesetting conventions.
                                                             (line   15)
* variables, environment <1>:            configure.          (line   89)
* variables, environment <2>:            configure.          (line   89)
* variables, environment <3>:            configure.          (line   89)
* variables, environment <4>:            configure.          (line  109)
* variables, environment <5>:            configure.          (line  110)
* variables, environment <6>:            configure.          (line  117)
* variables, environment <7>:            configure.          (line  118)
* variables, environment <8>:            configure.          (line  119)
* variables, environment <9>:            configure.          (line  120)
* variables, environment <10>:           configure.          (line  120)
* variables, environment <11>:           configure.          (line  130)
* variables, environment <12>:           configure.          (line  131)
* variables, environment <13>:           configure.          (line  132)
* variables, environment <14>:           configure.          (line  133)
* variables, environment <15>:           configure.          (line  133)
* variables, environment <16>:           configure.          (line  133)
* variables, environment <17>:           configure.          (line  133)
* variables, environment <18>:           configure.          (line  133)
* variables, environment <19>:           make.               (line  128)
* variables, environment <20>:           make.               (line  129)
* variables, environment <21>:           make.               (line  129)
* variables, environment <22>:           make.               (line  136)
* variables, environment <23>:           Compiling coNCePTuaL programs.
                                                             (line   28)
* variables, environment <24>:           Compiling coNCePTuaL programs.
                                                             (line   38)
* variables, environment <25>:           The c_mpi backend.  (line   21)
* variables, environment <26>:           The c_mpi backend.  (line   21)
* variables, environment <27>:           The c_mpi backend.  (line   21)
* variables, environment <28>:           The c_mpi backend.  (line   21)
* variables, environment <29>:           The c_mpi backend.  (line   23)
* variables, environment <30>:           The c_mpi backend.  (line   25)
* variables, environment <31>:           The c_mpi backend.  (line   26)
* variables, environment <32>:           The c_mpi backend.  (line   27)
* variables, environment <33>:           The c_mpi backend.  (line   27)
* variables, environment <34>:           The c_mpi backend.  (line   28)
* variables, environment <35>:           The c_mpi backend.  (line   29)
* variables, environment <36>:           The c_mpi backend.  (line   29)
* variables, environment <37>:           The c_udgram backend.
                                                             (line   24)
* variables, environment <38>:           The c_udgram backend.
                                                             (line   25)
* variables, environment <39>:           The c_udgram backend.
                                                             (line   25)
* variables, environment <40>:           The c_udgram backend.
                                                             (line   25)
* variables, environment <41>:           The interpret backend.
                                                             (line   69)
* variables, environment <42>:           The interpret backend.
                                                             (line   73)
* variables, environment <43>:           The latex_vis backend.
                                                             (line   15)
* variables, environment <44>:           The latex_vis backend.
                                                             (line   18)
* variables, environment <45>:           The latex_vis backend.
                                                             (line   20)
* variables, environment <46>:           The dot_ast backend.
                                                             (line  232)
* variables, environment <47>:           The dot_ast backend.
                                                             (line  233)
* variables, environment <48>:           Running coNCePTuaL programs.
                                                             (line  185)
* variables, environment <49>:           Running coNCePTuaL programs.
                                                             (line  186)
* variables, environment <50>:           Variables and data types.
                                                             (line   83)
* variables, environment <51>:           Cross-compilation.  (line   77)
* variables, environment <52>:           Implicit dynamic-library search paths.
                                                             (line   10)
* variables, environment <53>:           Implicit dynamic-library search paths.
                                                             (line   16)
* variables, environment <54>:           Implicit dynamic-library search paths.
                                                             (line   17)
* variables, environment <55>:           Interpreting configure warnings.
                                                             (line   52)
* variables, environment <56>:           configure is slow.  (line   23)
* variables, environment <57>:           Incorrect tools/flags are utilized.
                                                             (line   12)
* variables, environment <58>:           Problems running.   (line   12)
* variables, environment <59>:           Problems running.   (line   12)
* variables, environment <60>:           ``cannot open shared object file''.
                                                             (line   19)
* variables, environment <61>:           ``cannot open shared object file''.
                                                             (line   48)
* variables, environment <62>:           Miscellaneous mysterious hangs or crashes.
                                                             (line   13)
* variables, environment <63>:           Miscellaneous mysterious hangs or crashes.
                                                             (line   17)
* variables, environment <64>:           Extremely noisy measurements.
                                                             (line   17)
* variables, environment <65>:           Extremely noisy measurements.
                                                             (line   21)
* variables, environment <66>:           ``TeX capacity exceeded''.
                                                             (line   30)
* variables, environment <67>:           Bad bounding boxes from latex_vis.
                                                             (line   13)
* variables, environment <68>:           Environment Variables.
                                                             (line    6)
* variables, environment <69>:           Environment Variables.
                                                             (line   10)
* variables, environment <70>:           Environment Variables.
                                                             (line   11)
* variables, environment <71>:           Environment Variables.
                                                             (line   18)
* variables, environment <72>:           Environment Variables.
                                                             (line   26)
* variables, environment <73>:           Environment Variables.
                                                             (line   41)
* variables, environment <74>:           Environment Variables.
                                                             (line   49)
* variables, environment <75>:           Environment Variables.
                                                             (line   51)
* variables, environment <76>:           Environment Variables.
                                                             (line   55)
* variables, environment <77>:           Environment Variables.
                                                             (line   57)
* variables, environment <78>:           Environment Variables.
                                                             (line   61)
* variables, environment <79>:           Environment Variables.
                                                             (line   68)
* variables, environment <80>:           Environment Variables.
                                                             (line   69)
* variables, environment <81>:           Environment Variables.
                                                             (line   71)
* variables, environment <82>:           Environment Variables.
                                                             (line   75)
* variables, environment <83>:           Environment Variables.
                                                             (line   84)
* variables, environment <84>:           Environment Variables.
                                                             (line   84)
* variables, environment <85>:           Environment Variables.
                                                             (line   91)
* variables, environment <86>:           Environment Variables.
                                                             (line   93)
* variables, predeclared:                Predeclared variables.
                                                             (line    6)
* variables, run-time library:           Variables and data types.
                                                             (line    6)
* VARIANCE:                              Aggregate functions.
                                                             (line   10)
* VARIANCE <1>:                          Summary of the grammar.
                                                             (line   59)
* VARIANCE <2>:                          Keywords.           (line  384)
* VERIFICATION:                          Keywords.           (line  386)
* VERSION:                               Keywords.           (line  388)
* versioning:                            Language versioning.
                                                             (line    6)
* version_decl:                          Language versioning.
                                                             (line   14)
* version_decl <1>:                      Complete programs.  (line   12)
* version_decl <2>:                      Summary of the grammar.
                                                             (line  303)
* version_decl <3>:                      Summary of the grammar.
                                                             (line  312)
* vfork:                                 Cache Variables.    (line  159)
* vfork.h:                               Cache Variables.    (line  312)
* vfork_works:                           Cache Variables.    (line  162)
* vfprintf:                              Cache Variables.    (line  165)
* Vim:                                   make.               (line  111)
* Vim <1>:                               Installing stylesheets.
                                                             (line   55)
* Vim <2>:                               Installing stylesheets.
                                                             (line   55)
* Vim <3>:                               Installing stylesheets.
                                                             (line   58)
* Vim <4>:                               Referenced Applications.
                                                             (line   53)
* vsnprintf:                             Cache Variables.    (line  168)
* vsprintf:                              Cache Variables.    (line  171)
* Wait (GUI button):                     Command bar.        (line   29)
* wait_stmt:                             Awaiting completion.
                                                             (line   12)
* wait_stmt <1>:                         Awaiting completion.
                                                             (line   15)
* wait_stmt <2>:                         Awaiting completion.
                                                             (line   17)
* wait_stmt <3>:                         Complex statements. (line   33)
* wait_stmt <4>:                         Summary of the grammar.
                                                             (line  184)
* wait_stmt <5>:                         Summary of the grammar.
                                                             (line  242)
* Walrus:                                The libsea_ast backend.
                                                             (line   15)
* Walrus <1>:                            The libsea_ast backend.
                                                             (line   18)
* Walrus <2>:                            The libsea_ast backend.
                                                             (line   23)
* Walrus <3>:                            The libsea_ast backend.
                                                             (line   38)
* Walrus <4>:                            Referenced Applications.
                                                             (line   55)
* WARMUP:                                Complex statements. (line   23)
* WARMUP <1>:                            Complex statements. (line   26)
* WARMUP <2>:                            Timed loops.        (line   29)
* WARMUP <3>:                            Summary of the grammar.
                                                             (line  232)
* WARMUP <4>:                            Summary of the grammar.
                                                             (line  235)
* WARMUP <5>:                            Keywords.           (line  390)
* WARMUP REPETITIONS:                    Counted loops.      (line   17)
* warnings:                              configure.          (line  169)
* WHERE:                                 Range expressions.  (line   19)
* WHERE <1>:                             Summary of the grammar.
                                                             (line   85)
* WHERE <2>:                             Keywords.           (line  392)
* WHILE:                                 Complex statements. (line   28)
* WHILE <1>:                             Binding variables.  (line   22)
* WHILE <2>:                             Summary of the grammar.
                                                             (line  237)
* WHILE <3>:                             Keywords.           (line  394)
* whitespace:                            Primitives.         (line   31)
* whitespace <1>:                        Primitives.         (line   42)
* WHO:                                   Keywords.           (line  396)
* WHO RECEIVE IT:                        Sending.            (line   18)
* WHO RECEIVE IT <1>:                    Summary of the grammar.
                                                             (line  176)
* WHO RECEIVES IT:                       Message specifications.
                                                             (line   26)
* WHO RECEIVES IT <1>:                   Sending.            (line   74)
* WHO RECEIVES IT <2>:                   Sending.            (line   82)
* WHO RECEIVES IT <3>:                   Sending.            (line   90)
* WHO RECEIVES IT <4>:                   Receiving.          (line   64)
* WHO RECEIVES THE RESULT:               Reducing.           (line   25)
* WHO RECEIVES THE RESULT <1>:           Summary of the grammar.
                                                             (line  196)
* WHO RECEIVES THEM:                     Sending.            (line   75)
* windows.h:                             Cache Variables.    (line  315)
* WITH:                                  Asserting conditions.
                                                             (line   11)
* WITH <1>:                              Summary of the grammar.
                                                             (line  273)
* WITH <2>:                              Keywords.           (line  398)
* WITH DATA TOUCHING:                    Message specifications.
                                                             (line   16)
* WITH DATA TOUCHING <1>:                Message specifications.
                                                             (line   37)
* WITH DATA TOUCHING <2>:                Message specifications.
                                                             (line   57)
* WITH DATA TOUCHING <3>:                Message specifications.
                                                             (line   68)
* WITH DATA TOUCHING <4>:                Data touching.      (line    6)
* WITH DATA TOUCHING <5>:                Data touching.      (line   10)
* WITH DATA TOUCHING <6>:                Data touching.      (line   17)
* WITH DATA TOUCHING <7>:                Reducing.           (line   56)
* WITH DATA TOUCHING <8>:                Priming message buffers.
                                                             (line    6)
* WITH DATA TOUCHING <9>:                Summary of the grammar.
                                                             (line  109)
* WITH DATA TOUCHING <10>:               Summary of the grammar.
                                                             (line  123)
* WITH DATA TOUCHING <11>:               Summary of the grammar.
                                                             (line  136)
* WITH DATA TOUCHING <12>:               Summary of the grammar.
                                                             (line  147)
* WITH DATA TOUCHING <13>:               Run-time library functions.
                                                             (line   37)
* WITH DATA TOUCHING <14>:               Message-buffer manipulation functions.
                                                             (line   30)
* WITH DATA TOUCHING <15>:               Message-buffer manipulation functions.
                                                             (line   37)
* WITH DEFAULT:                          Command-line arguments.
                                                             (line   12)
* WITH DEFAULT <1>:                      Summary of the grammar.
                                                             (line  308)
* WITH RANDOM STRIDE:                    Simulating computation.
                                                             (line   19)
* WITH RANDOM STRIDE <1>:                Simulating computation.
                                                             (line   41)
* WITH RANDOM STRIDE <2>:                Summary of the grammar.
                                                             (line  286)
* WITH STRIDE:                           Simulating computation.
                                                             (line   19)
* WITH STRIDE <1>:                       Summary of the grammar.
                                                             (line  286)
* WITH VERIFICATION:                     Running coNCePTuaL programs.
                                                             (line  168)
* WITH VERIFICATION <1>:                 Message specifications.
                                                             (line   16)
* WITH VERIFICATION <2>:                 Message specifications.
                                                             (line   37)
* WITH VERIFICATION <3>:                 Data touching.      (line   21)
* WITH VERIFICATION <4>:                 Data touching.      (line   25)
* WITH VERIFICATION <5>:                 Receiving.          (line   54)
* WITH VERIFICATION <6>:                 Reducing.           (line   57)
* WITH VERIFICATION <7>:                 Summary of the grammar.
                                                             (line  109)
* WITH VERIFICATION <8>:                 Summary of the grammar.
                                                             (line  123)
* WITH VERIFICATION <9>:                 Run-time library functions.
                                                             (line   38)
* WITH VERIFICATION <10>:                Message-buffer manipulation functions.
                                                             (line   25)
* WITHOUT:                               Keywords.           (line  400)
* WITHOUT DATA TOUCHING:                 Message specifications.
                                                             (line   17)
* WITHOUT DATA TOUCHING <1>:             Message specifications.
                                                             (line   38)
* WITHOUT DATA TOUCHING <2>:             Message specifications.
                                                             (line   57)
* WITHOUT DATA TOUCHING <3>:             Message specifications.
                                                             (line   68)
* WITHOUT DATA TOUCHING <4>:             Data touching.      (line   28)
* WITHOUT DATA TOUCHING <5>:             Summary of the grammar.
                                                             (line  110)
* WITHOUT DATA TOUCHING <6>:             Summary of the grammar.
                                                             (line  124)
* WITHOUT DATA TOUCHING <7>:             Summary of the grammar.
                                                             (line  136)
* WITHOUT DATA TOUCHING <8>:             Summary of the grammar.
                                                             (line  147)
* WITHOUT VERIFICATION:                  Message specifications.
                                                             (line   17)
* WITHOUT VERIFICATION <1>:              Message specifications.
                                                             (line   38)
* WITHOUT VERIFICATION <2>:              Data touching.      (line   28)
* WITHOUT VERIFICATION <3>:              Summary of the grammar.
                                                             (line  110)
* WITHOUT VERIFICATION <4>:              Summary of the grammar.
                                                             (line  124)
* WORD:                                  Item size.          (line   18)
* WORD <1>:                              Item size.          (line   27)
* WORD <2>:                              Item size.          (line   48)
* WORD <3>:                              Item size.          (line   55)
* WORD <4>:                              Simulating computation.
                                                             (line   26)
* WORD <5>:                              Simulating computation.
                                                             (line   44)
* WORD <6>:                              Summary of the grammar.
                                                             (line  159)
* WORD <7>:                              Summary of the grammar.
                                                             (line  162)
* WORD <8>:                              Keywords.           (line  402)
* WORDS:                                 Keywords.           (line  404)
* x86-64:                                Installation.       (line   26)
* x86-64 <1>:                            Cross-compilation.  (line   13)
* x86-64 <2>:                            Cross-compilation.  (line   99)
* x86-64 <3>:                            Cross-compilation.  (line   51)
* x86-64 <4>:                            Could not read symbols.
                                                             (line    6)
* x86-64 <5>:                            Could not read symbols.
                                                             (line   11)
* XEmacs:                                Installing stylesheets.
                                                             (line   41)
* xlc:                                   Installation.       (line   40)
* xlc <1>:                               Installation.       (line   42)
* xlc <2>:                               Installation.       (line   44)
* xlc <3>:                               configure.          (line  147)
* XOR:                                   Arithmetic expressions.
                                                             (line   15)
* XOR <1>:                               Arithmetic expressions.
                                                             (line   22)
* XOR <2>:                               Formal grammar for arithmetic expressions.
                                                             (line   17)
* XOR <3>:                               Summary of the grammar.
                                                             (line   18)
* XOR <4>:                               Keywords.           (line  406)
* yod:                                   Cross-compilation.  (line   76)

